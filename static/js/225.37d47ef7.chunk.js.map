{"version":3,"file":"static/js/225.37d47ef7.chunk.js","mappings":"q7NAAIA,E,wCACEC,EAAO,IAAIC,MAAM,IAAIC,UAAKC,GAEhC,SAASC,EAAUC,GACf,OAAOL,EAAKK,EAChB,CAHAL,EAAKM,UAAKH,EAAW,MAAM,GAAM,GAIjC,IAAII,EAAYP,EAAKQ,OAOrB,SAASC,EAAWJ,GAChB,IAAMK,EAAMN,EAAUC,GAEtB,OATJ,SAAoBA,GACZA,EAAM,KAEVL,EAAKK,GAAOE,EACZA,EAAYF,EAChB,CAGIM,CAAWN,GACJK,CACX,CACA,IAAIE,EAAoB,IAAIC,YAAY,QAAS,CAC7CC,WAAW,EACXC,OAAO,IAEXH,EAAkBI,SAClB,IAAIC,EAAuB,KAC3B,SAASC,IAKL,OAJ6B,OAAzBD,GACAA,EAAqBE,SAAWpB,EAAKqB,OAAOD,SAC5CF,EAAuB,IAAII,WAAWtB,EAAKqB,OAAOD,SAE/CF,CACX,CACA,SAASK,EAAmBC,EAAKC,GAC7B,OAAOZ,EAAkBI,OAAOE,IAAkBO,SAASF,EAAKA,EAAMC,GAC1E,CACA,SAASE,EAAcC,GACfpB,IAAcP,EAAKQ,QACnBR,EAAKM,KAAKN,EAAKQ,OAAS,GAC5B,IAAMH,EAAME,EAGZ,OAFAA,EAAYP,EAAKK,GACjBL,EAAKK,GAAOsB,EACLtB,CACX,CACA,IAAIuB,EAAkB,EAClBC,EAAoB,IAAIC,YAAY,SAClCC,EAAuD,oBAAjCF,EAAkBG,WACxC,SAAUC,EAAKC,GACb,OAAOL,EAAkBG,WAAWC,EAAKC,EAC7C,EACE,SAAUD,EAAKC,GACb,IAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIzB,OACV+B,QAASJ,EAAI3B,OAErB,EACJ,SAASgC,EAAkBP,EAAKQ,EAAQC,GACpC,QAAgBvC,IAAZuC,EAAuB,CACvB,IAAMP,EAAMN,EAAkBO,OAAOH,GAC/BV,EAAMkB,EAAON,EAAI3B,QAGvB,OAFAU,IAAkBO,SAASF,EAAKA,EAAMY,EAAI3B,QAAQ6B,IAAIF,GACtDP,EAAkBO,EAAI3B,OACfe,CACX,CAKA,IAJA,IAAIC,EAAMS,EAAIzB,OACVe,EAAMkB,EAAOjB,GACXmB,EAAMzB,IACR0B,EAAS,EACNA,EAASpB,EAAKoB,IAAU,CAC3B,IAAMC,EAAOZ,EAAIa,WAAWF,GAC5B,GAAIC,EAAO,IACP,MACJF,EAAIpB,EAAMqB,GAAUC,CACxB,CACA,GAAID,IAAWpB,EAAK,CACD,IAAXoB,IACAX,EAAMA,EAAIc,MAAMH,IAEpBrB,EAAMmB,EAAQnB,EAAKC,EAAKA,EAAMoB,EAAsB,EAAbX,EAAIzB,QAC3C,IAAM0B,EAAOhB,IAAkBO,SAASF,EAAMqB,EAAQrB,EAAMC,GAE5DoB,GADYb,EAAaE,EAAKC,GAChBK,OAClB,CAEA,OADAX,EAAkBgB,EACXrB,CACX,CACA,IAAIyB,EAAuB,KAC3B,SAASC,IAKL,OAJ6B,OAAzBD,GACAA,EAAqB7B,SAAWpB,EAAKqB,OAAOD,SAC5C6B,EAAuB,IAAIE,WAAWnD,EAAKqB,OAAOD,SAE/C6B,CACX,CACA,SAASG,EAAWC,GAChB,YAAajD,IAANiD,GAAyB,OAANA,CAC9B,CACA,SAASC,EAAYC,GAEjB,IAAMC,SAAcD,EACpB,GAAY,UAARC,GAA4B,WAARA,GAA4B,MAAPD,EACzC,MAAO,GAAP,OAAUA,GAEd,GAAY,UAARC,EACA,MAAO,IAAP,OAAWD,EAAG,KAElB,GAAY,UAARC,EAAkB,CAClB,IAAMC,EAAcF,EAAIE,YACxB,OAAmB,MAAfA,EACO,SAGA,UAAP,OAAiBA,EAAW,IAEpC,CACA,GAAY,YAARD,EAAoB,CACpB,IAAME,EAAOH,EAAIG,KACjB,MAAmB,iBAARA,GAAoBA,EAAKjD,OAAS,EAClC,YAAP,OAAmBiD,EAAI,KAGhB,UAEf,CAEA,GAAIxD,MAAMyD,QAAQJ,GAAM,CACpB,IAAM9C,EAAS8C,EAAI9C,OACfmD,EAAQ,IACRnD,EAAS,IACTmD,GAASN,EAAYC,EAAI,KAE7B,IAAK,IAAIM,EAAI,EAAGA,EAAIpD,EAAQoD,IACxBD,GAAS,KAAON,EAAYC,EAAIM,IAGpC,OADAD,GAAS,GAEb,CAEA,IACIE,EADEC,EAAiB,sBAAsBC,KAAKC,SAASC,KAAKX,IAEhE,KAAIQ,EAAetD,OAAS,GAKxB,OAAOwD,SAASC,KAAKX,GAEzB,GAAiB,WANbO,EAAYC,EAAe,IAU3B,IACI,MAAO,UAAYI,KAAKC,UAAUb,GAAO,GAI7C,CAFA,MAAOc,GACH,MAAO,QACX,CAGJ,OAAId,aAAee,MACR,GAAP,OAAUf,EAAIG,KAAI,aAAKH,EAAIgB,QAAO,aAAKhB,EAAIiB,OAGxCV,CACX,CACA,SAASW,EAAeC,EAAMC,EAAMC,EAAMC,GACtC,IAAMC,EAAQ,CAAEC,EAAGL,EAAMM,EAAGL,EAAMM,IAAK,EAAGL,KAAAA,GACpCM,EAAO,WAITJ,EAAMG,MACN,IAAMF,EAAID,EAAMC,EAChBD,EAAMC,EAAI,EACV,IAAI,2BAPSI,EAAI,yBAAJA,EAAI,gBAQb,OAAON,EAAC,cAACE,EAAGD,EAAME,GAAC,OAAKG,GAS5B,CARC,QAEuB,MAAdL,EAAMG,IACRjF,EAAKoF,oBAAoBC,IAAIP,EAAMF,KAAnC5E,CAAyC+E,EAAGD,EAAME,GAGlDF,EAAMC,EAAIA,CAElB,CACJ,EAEA,OADAG,EAAKI,SAAWR,EACTI,CACX,CACA,SAASK,EAAiBb,EAAMC,EAAMa,GAClCxF,EACKyF,6HAA6Hf,EAAMC,EAAMhD,EAAc6D,GAChK,CACA,SAASE,EAAoBlE,EAAKC,GAC9B,OAAON,IAAkBO,SAASF,EAAM,EAAGA,EAAM,EAAIC,EACzD,CACA,SAASkE,EAAkBzD,EAAKQ,GAC5B,IAAMlB,EAAMkB,EAAoB,EAAbR,EAAIzB,QAGvB,OAFAU,IAAkBmB,IAAIJ,EAAKV,EAAM,GACjCK,EAAkBK,EAAIzB,OACfe,CACX,CACA,SAASoE,EAAaC,EAAUC,GAC5B,KAAMD,aAAoBC,GACtB,MAAM,IAAIxB,MAAM,wBAAD,OAAyBwB,EAAMpC,OAElD,OAAOmC,EAASrE,GACpB,CAOO,SAASuE,EAAQC,EAAIC,EAAYC,GACpCN,EAAaI,EAAIG,IACjBP,EAAaK,EAAYG,IACzBR,EAAaM,EAAgBG,IAC7B,IAAI1F,EAAMX,EAAK+F,QAAQC,EAAGxE,IAAKyE,EAAWzE,IAAK0E,EAAe1E,KAC9D,OAAO8E,GAAOC,OAAO5F,EACzB,CAKO,SAAS6F,EAAoCC,GAChD,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwG,oCAAoCE,EAAME,GACzD,OAAOC,GAAqBN,OAAO5F,EACvC,CAKO,SAASmG,EAAsCC,GAClD,IACI,IAAMC,EAAShH,EAAKiH,iCAAiC,IACrDrB,EAAamB,EAAUF,IACvB7G,EAAK8G,sCAAsCE,EAAQD,EAASvF,KAC5D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,CAMO,SAASK,EAA6BC,EAAMC,GAC/C,IAAId,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKsH,6BAA6BZ,EAAME,EAAMY,GACxD,OAAOX,GAAqBN,OAAO5F,EACvC,CAMO,SAAS+G,EAA6BC,EAAWH,GACpD,IACI,IAAMR,EAAShH,EAAKiH,iCAAiC,IACrDrB,EAAa+B,EAAWd,IACxB7G,EAAK0H,6BAA6BV,EAAQW,EAAUnG,IAAKgG,GACzD,IAAIN,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,CACA,IAAIS,EAAwB,KAQ5B,SAASC,EAAqBrG,EAAKC,GAC/B,OAP8B,OAA1BmG,GACAA,EAAsBxG,SAAWpB,EAAKqB,OAAOD,SAC7CwG,EAAwB,IAAIE,YAAY9H,EAAKqB,OAAOD,SAEjDwG,GAGmBlG,SAASF,EAAM,EAAGA,EAAM,EAAIC,EAC1D,CAQO,SAASsG,EAAsBC,EAAUC,EAAMC,EAAOC,GACzD,IACI,IAAMnB,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkBuF,EAAUhI,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPuG,EAAO3F,EAAkBwF,EAAMjI,EAAK2G,kBAAmB3G,EAAKyH,oBAC5DY,EAAOxG,EACPyG,EAAO7F,EAAkByF,EAAOlI,EAAK2G,kBAAmB3G,EAAKyH,oBAC7Dc,EAAO1G,EACP2G,EAAO/F,EAAkB0F,EAAMnI,EAAK2G,kBAAmB3G,EAAKyH,oBAC5DgB,EAAO5G,EACX7B,EAAK+H,sBAAsBf,EAAQN,EAAME,EAAMwB,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,GAC7E,IAAIvB,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,CAMO,SAASuB,EAAsBV,EAAUG,GAC5C,IACI,IAAMnB,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkBuF,EAAUhI,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPuG,EAAO3F,EAAkB0F,EAAMnI,EAAK2G,kBAAmB3G,EAAKyH,oBAC5DY,EAAOxG,EACX7B,EAAK0I,sBAAsB1B,EAAQN,EAAME,EAAMwB,EAAMC,GACrD,IAAInB,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,CAMO,SAASwB,EAA8BC,EAAQC,GAClDjD,EAAagD,EAAQE,IACrBlD,EAAaiD,EAAeE,IAC5B,IAAIrC,EAAOmC,EAAcrH,IACzBqH,EAAcrH,IAAM,EACpB,IAAIb,EAAMX,EAAK2I,8BAA8BC,EAAOpH,IAAKkF,GACzD,OAAOqC,GAAaxC,OAAO5F,EAC/B,CAOO,SAASqI,EAAgCC,EAAcC,EAAMC,GAChEvD,EAAaqD,EAAcG,IAC3BxD,EAAasD,EAAMG,IACnBzD,EAAauD,EAAKG,IAClB,IAAI3I,EAAMX,EAAKgJ,gCAAgCC,EAAazH,IAAK0H,EAAK1H,IAAK2H,EAAI3H,KAC/E,OAAO+H,GAAiBhD,OAAO5F,EACnC,CAOO,SAAS6I,EAA8BP,EAAcC,EAAMC,GAC9DvD,EAAaqD,EAAcG,IAC3BxD,EAAasD,EAAMG,IACnBzD,EAAauD,EAAKM,IAClB,IAAI9I,EAAMX,EAAKwJ,8BAA8BP,EAAazH,IAAK0H,EAAK1H,IAAK2H,EAAI3H,KAC7E,OAAO+H,GAAiBhD,OAAO5F,EACnC,CAMO,SAAS+I,EAAkBT,EAAcU,GAC5C/D,EAAaqD,EAAcG,IAC3BxD,EAAa+D,EAAIC,IACjB,IAAIjJ,EAAMX,EAAK0J,kBAAkBT,EAAazH,IAAKmI,EAAGnI,KACtD,OAAOqI,GAAYtD,OAAO5F,EAC9B,CAKO,SAASmJ,EAAoBC,GAChCnE,EAAamE,EAAgBC,IAC7B,IAAIrJ,EAAMX,EAAK8J,oBAAoBC,EAAevI,KAClD,OAAOyI,GAAkB1D,OAAO5F,EACpC,CAKO,SAASuJ,EAAiBC,GAC7BvE,EAAauE,EAASC,IACtB,IAAIzJ,EAAMX,EAAKkK,iBAAiBC,EAAQ3I,KACxC,OAAO4H,GAAgB7C,OAAO5F,EAClC,CAKO,SAAS0J,EAAiBC,GAC7B1E,EAAa0E,EAAaC,IAC1B,IAAI5J,EAAMX,EAAKqK,iBAAiBC,EAAY9I,KAC5C,OAAOgJ,GAASjE,OAAO5F,EAC3B,CAKO,SAAS8J,EAAgBtC,GAC5B,IACI,IAAMnB,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOf,EAAkBwC,EAAMnI,EAAK2G,mBACpCC,EAAO/E,EACX7B,EAAKyK,gBAAgBzD,EAAQN,EAAME,GACnC,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpC0D,EAAKhF,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBuD,CAIX,CAHC,QAEG1K,EAAKiH,gCAAgC,GACzC,CACJ,CAKO,SAAS0D,EAAgBxC,GAC5B,IACI,IAAMnB,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOf,EAAkBwC,EAAMnI,EAAK2G,mBACpCC,EAAO/E,EACX7B,EAAK2K,gBAAgB3D,EAAQN,EAAME,GACnC,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpC0D,EAAKhF,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBuD,CAIX,CAHC,QAEG1K,EAAKiH,gCAAgC,GACzC,CACJ,CAOO,SAAS2D,EAAiBC,EAAWC,EAAaC,GACrDnF,EAAaiF,EAAWG,IACxBpF,EAAakF,EAAaG,IAC1B,IAAIvE,EAAO,EACNtD,EAAW2H,KACZnF,EAAamF,EAAQjC,IACrBpC,EAAOqE,EAAOvJ,IACduJ,EAAOvJ,IAAM,GAEjB,IAAIb,EAAMX,EAAK4K,iBAAiBC,EAAUrJ,IAAKsJ,EAAYtJ,IAAKkF,GAChE,OAAOwE,GAAe3E,OAAO5F,EACjC,CAOO,SAASwK,EAAmBC,EAAQC,EAAcC,GACrD1F,EAAawF,EAAQhB,IACrBxE,EAAayF,EAAc/E,IAC3BV,EAAa0F,EAAahF,IAC1B,IAAI3F,EAAMX,EAAKmL,mBAAmBC,EAAO5J,IAAK6J,EAAa7J,IAAK8J,EAAY9J,KAC5E,OAAO+J,GAAMhF,OAAO5F,EACxB,CAOO,SAAS6K,EAAYJ,EAAQC,EAAcC,GAC9C1F,EAAawF,EAAQhB,IACrBxE,EAAayF,EAAc/E,IAC3BV,EAAa0F,EAAahF,IAC1B,IAAI3F,EAAMX,EAAKwL,YAAYJ,EAAO5J,IAAK6J,EAAa7J,IAAK8J,EAAY9J,KACrE,OAAO8E,GAAOC,OAAO5F,EACzB,CAMO,SAAS8K,EAAiBC,EAAQC,GACrC/F,EAAa8F,EAAQE,IACrBhG,EAAa+F,EAAqBrF,IAClC,IAAI3F,EAAMX,EAAKyL,iBAAiBC,EAAOlK,IAAKmK,EAAoBnK,KAChE,OAAO8E,GAAOC,OAAO5F,EACzB,CAeO,SAASkL,EAAiCtE,EAAMuE,EAAWtE,GAC9D,IAAId,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPuG,EAAO3F,EAAkBqJ,EAAW9L,EAAK2G,kBAAmB3G,EAAKyH,oBACjEY,EAAOxG,EACPlB,EAAMX,EAAK6L,iCAAiCnF,EAAME,EAAMwB,EAAMC,EAAMb,GACxE,OAAOuE,GAAaxF,OAAO5F,EAC/B,CAMO,SAASqL,EAAgCzE,EAAMC,GAClD,IAAId,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKgM,gCAAgCtF,EAAME,EAAMY,GAC3D,OAAO+C,GAAWhE,OAAO5F,EAC7B,CAMO,SAASsL,GAAgCC,EAAO1E,GACnD,IACI,IAAMR,EAAShH,EAAKiH,iCAAiC,IACrDrB,EAAasG,EAAO3B,IACpBvK,EAAKiM,gCAAgCjF,EAAQkF,EAAM1K,IAAKgG,GACxD,IAAIN,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,CACA,SAASgF,GAAYtH,EAAGM,GACpB,IACI,OAAON,EAAEuH,MAAMC,KAAMlH,EAIzB,CAFA,MAAOmH,GACHtM,EAAKuM,qBAAqB5K,EAAc2K,GAC5C,CACJ,CACA,SAASE,GAAmB9H,EAAMC,EAAMa,EAAMiH,GAC1CzM,EAAK0M,gEAAgEhI,EAAMC,EAAMhD,EAAc6D,GAAO7D,EAAc8K,GACxH,CAEO,IAAME,GAAkBC,OAAOC,OAAO,CACzCC,kBAAmB,EACnB,EAAK,oBACLC,oBAAqB,EACrB,EAAK,sBACLC,gBAAiB,EACjB,EAAK,kBACLC,iBAAkB,EAClB,EAAK,mBACLC,eAAgB,EAChB,EAAK,iBACLC,qBAAsB,EACtB,EAAK,uBACLC,6BAA8B,EAC9B,EAAK,iCAGIC,GAAST,OAAOC,OAAO,CAChCS,SAAU,EACV,EAAK,WACLC,SAAU,EACV,EAAK,aAGIC,GAAUZ,OAAOC,OAAO,CACjCY,WAAY,EACZ,EAAK,aACLC,mBAAoB,EACpB,EAAK,uBAGIC,GAAYf,OAAOC,OAAO,CACnCe,eAAgB,EAChB,EAAK,iBACLC,eAAgB,EAChB,EAAK,iBACLC,cAAe,EACf,EAAK,kBAGIC,GAAmBnB,OAAOC,OAAO,CAC1CmB,aAAc,EACd,EAAK,eACLC,UAAW,EACX,EAAK,YACLC,UAAW,EACX,EAAK,YACLC,WAAY,EACZ,EAAK,aACLC,cAAe,EACf,EAAK,gBACLC,eAAgB,EAChB,EAAK,mBAGIC,GAAgB1B,OAAOC,OAAO,CACvC0B,QAAS,EACT,EAAK,UACLC,QAAS,EACT,EAAK,YAGIC,GAA2B7B,OAAOC,OAAO,CAClD6B,YAAa,EACb,EAAK,cACLC,aAAc,EACd,EAAK,eACLC,IAAK,EACL,EAAK,MACLC,MAAO,EACP,EAAK,QACLC,KAAM,EACN,EAAK,SAGIC,GAAqBnC,OAAOC,OAAO,CAC5CmC,cAAe,EACf,EAAK,gBACLC,iBAAkB,EAClB,EAAK,mBACLC,eAAgB,EAChB,EAAK,mBAGIC,GAAgBvC,OAAOC,OAAO,CACvCuC,IAAK,EACL,EAAK,MACLC,OAAQ,EACR,EAAK,WAGIC,GAAoB1C,OAAOC,OAAO,CAC3C0C,cAAe,EACf,EAAK,gBACLC,cAAe,EACf,EAAK,kBASIC,GAAsB7C,OAAOC,OAAO,CAC7Cd,aAAc,EACd,EAAK,eACL2D,SAAU,EACV,EAAK,WACLC,SAAU,EACV,EAAK,aAKIC,GAAehD,OAAOC,OAAO,CACtCgD,OAAQ,EACR,EAAK,SACLC,KAAM,EACN,EAAK,SAGIC,GAAenD,OAAOC,OAAO,CACtC6C,SAAU,EACV,EAAK,WACLC,SAAU,EACV,EAAK,aAGIK,GAAiBpD,OAAOC,OAAO,CACxCoD,iBAAkB,EAClB,EAAK,mBACLC,IAAK,EACL,EAAK,MACLC,KAAM,EACN,EAAK,OACLC,QAAS,EACT,EAAK,UACLvB,MAAO,EACP,EAAK,UAGIwB,GAAkBzD,OAAOC,OAAO,CACzCyD,MAAO,EACP,EAAK,QACLC,KAAM,EACN,EAAK,OACLC,KAAM,EACN,EAAK,OACLC,OAAQ,EACR,EAAK,WAaIC,GAAoB9D,OAAOC,OAAO,CAc3CoC,iBAAkB,EAClB,EAAK,mBAyBLC,eAAgB,EAChB,EAAK,mBAGIyB,GAAa/D,OAAOC,OAAO,CACpCd,aAAc,EACd,EAAK,eACL6E,eAAgB,EAChB,EAAK,iBACLC,eAAgB,EAChB,EAAK,mBAGIC,GAAYlE,OAAOC,OAAO,CACnCkE,KAAM,EACN,EAAK,OACLC,KAAM,EACN,EAAK,SAGIC,GAAO,wCAuGf,OAvGe,0CAMhB,WACI,IAAMzP,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmR,mBAAmB3P,EAC5B,GACA,qBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKoR,gBAAgBpK,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKqR,oBAAoBhF,KAAK7K,KAE5C,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKsR,iBAAiBtK,EAAQqF,KAAK7K,KACnC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOtD,EAAWmO,GAAU,EAAI9O,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBACvFb,EAAO/E,EACX7B,EAAKwR,kBAAkBxK,EAAQqF,KAAK7K,IAAKkF,EAAME,GAC/C,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,wBAaA,WAEI,OADUnH,EAAKyR,mBAAmBpF,KAAK7K,IAE3C,GACA,sBAGA,WACI,IAAIb,EAAMX,EAAK0R,iBAAiBrF,KAAK7K,KACrC,OAAe,IAARb,OAAYP,EAAYiJ,GAAa9C,OAAO5F,EACvD,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAK2R,kBAAkBtF,KAAK7K,KACtC,OAAe,IAARb,OAAYP,EAAYwR,GAAcrL,OAAO5F,EACxD,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAK6R,mBAAmBxF,KAAK7K,KACvC,OAAe,IAARb,OAAYP,EAAY0R,GAAevL,OAAO5F,EACzD,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAK+R,sBAAsB1F,KAAK7K,KAC1C,OAAe,IAARb,OAAYP,EAAY4R,GAAkBzL,OAAO5F,EAC5D,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAKiS,gBAAgB5F,KAAK7K,KACpC,OAAe,IAARb,OAAYP,EAAY8R,GAAY3L,OAAO5F,EACtD,IAAC,qBAhJD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOlB,EAAQmB,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkBuG,GACd,IAAIzB,EAAOf,EAAkBwC,EAAMnI,EAAK2G,mBACpCC,EAAO/E,EACPlB,EAAMX,EAAKqS,mBAAmB3L,EAAME,GACxC,OAAOqK,EAAQ1K,OAAO5F,EAC1B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKsS,kBAAkB5L,EAAME,GACvC,OAAOqK,EAAQ1K,OAAO5F,EAC1B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKwS,oBAAoB9L,EAAME,GACzC,OAAOqK,EAAQ1K,OAAO5F,EAC1B,KAAC,EAvGe,GAoJP8R,GAAS,wCAoFjB,OApFiB,0CAMlB,WACI,IAAMjR,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK0S,qBAAqBlR,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2S,mBAAmB3L,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4S,kBAAkB5L,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK6S,sBAAsBxG,KAAK7K,KAE9C,GACA,kBAuBA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8S,eAAe9L,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBApGD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOM,EAAUL,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK+S,qBAAqBrM,EAAME,GAC1C,OAAO6L,EAAUlM,OAAO5F,EAC5B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKgT,oBAAoBtM,EAAME,GACzC,OAAO6L,EAAUlM,OAAO5F,EAC5B,GACA,iBAIA,SAAW+C,GACP,IAAIgD,EAAOf,EAAkBjC,EAAM1D,EAAK2G,mBACpCC,EAAO/E,EACPlB,EAAMX,EAAKiT,cAAcvM,EAAME,GACnC,OAAO6L,EAAUlM,OAAO5F,EAC5B,KAAC,EApFiB,GAwGTuS,GAAU,wCAiFlB,OAjFkB,0CAMnB,WACI,IAAM1R,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmT,sBAAsB3R,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKoT,oBAAoBpM,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqT,mBAAmBrM,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKsT,uBAAuBjH,KAAK7K,KAE/C,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKyT,eAAepH,KAAK7K,IAAKgS,GACxC,OAAOf,GAAUlM,OAAO5F,EAC5B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMjB,IACnBzS,EAAK2T,eAAetH,KAAK7K,IAAKkS,EAAKlS,IACvC,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOe,EAAWd,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4T,sBAAsBlN,EAAME,GAC3C,OAAOsM,EAAW3M,OAAO5F,EAC7B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK6T,qBAAqBnN,EAAME,GAC1C,OAAOsM,EAAW3M,OAAO5F,EAC7B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK8T,iBACf,OAAOZ,EAAW3M,OAAO5F,EAC7B,KAAC,EAjFkB,GA0GVoT,GAAM,wCAiFd,OAjFc,0CAMf,WACI,IAAMvS,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgU,kBAAkBxS,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiU,gBAAgBjN,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkU,eAAelN,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKmU,mBAAmB9H,KAAK7K,KAE3C,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKsJ,IAClB7M,EAAawO,EAAO9N,IACpB,IAAI3F,EAAMX,EAAKqU,cAAchI,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KACtD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKsJ,IAClB,IAAI9R,EAAMX,EAAKsU,WAAWjI,KAAK7K,IAAK2H,EAAI3H,KACxC,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKuU,YAAYlI,KAAK7K,KAChC,OAAO0R,GAAW3M,OAAO5F,EAC7B,IAAC,qBAlHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO4B,EAAO3B,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwU,kBAAkB9N,EAAME,GACvC,OAAOmN,EAAOxN,OAAO5F,EACzB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKyU,iBAAiB/N,EAAME,GACtC,OAAOmN,EAAOxN,OAAO5F,EACzB,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK0U,aACf,OAAOX,EAAOxN,OAAO5F,EACzB,KAAC,EAjFc,GAsHNqJ,GAAa,wCAiFrB,OAjFqB,0CAMtB,WACI,IAAMxI,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2U,yBAAyBnT,EAClC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4U,uBAAuB5N,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6U,sBAAsB7N,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK8U,0BAA0BzI,KAAK7K,KAElD,GACA,sBAoBA,WACI,IAAIb,EAAMX,EAAK+U,uBAAuB1I,KAAK7K,KAC3C,OAAe,IAARb,OAAYP,EAAY4U,GAA2BzO,OAAO5F,EACrE,GACA,0BAGA,SAAaoG,GACTnB,EAAamB,EAAUiO,IACvBhV,EAAKiV,2BAA2B5I,KAAK7K,IAAKuF,EAASvF,IACvD,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAKkV,6BAA6B7I,KAAK7K,KACjD,OAAe,IAARb,OAAYP,EAAY+U,GAAc5O,OAAO5F,EACxD,GACA,gCAGA,SAAmByU,GACfxP,EAAawP,EAAgBD,IAC7BnV,EAAKqV,iCAAiChJ,KAAK7K,IAAK4T,EAAe5T,IACnE,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAKsV,6BAA6BjJ,KAAK7K,KACjD,OAAe,IAARb,OAAYP,EAAYmV,GAAchP,OAAO5F,EACxD,GACA,gCAGA,SAAmB6U,GACf5P,EAAa4P,EAAgBD,IAC7BvV,EAAKyV,iCAAiCpJ,KAAK7K,IAAKgU,EAAehU,IACnE,GACA,mCAGA,SAAsBgU,GAClB5P,EAAa4P,EAAgBD,IAC7BvV,EAAK0V,oCAAoCrJ,KAAK7K,IAAKgU,EAAehU,IACtE,IAAC,qBAjID,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOnI,EAAcoI,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK2V,yBAAyBjP,EAAME,GAC9C,OAAOoD,EAAczD,OAAO5F,EAChC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK4V,wBAAwBlP,EAAME,GAC7C,OAAOoD,EAAczD,OAAO5F,EAChC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK6V,oBACf,OAAO7L,EAAczD,OAAO5F,EAChC,KAAC,EAjFqB,GAqIbsJ,GAAiB,wCAgGzB,OAhGyB,0CAM1B,WACI,IAAMzI,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8V,6BAA6BtU,EACtC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOlI,EAAkBmI,WAE5C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkW,6BAA6BxP,EAAME,GAClD,OAAOqD,EAAkB1D,OAAO5F,EACpC,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKmW,8BAA8BzP,EAAME,GACnD,OAAOqD,EAAkB1D,OAAO5F,EACpC,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKqW,2BAA2B3P,EAAME,GAChD,OAAOqD,EAAkB1D,OAAO5F,EACpC,KAAC,EAhGyB,GAmGjB2V,GAAgB,wCAqBxB,OArBwB,0CAMzB,WACI,IAAM9U,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKuW,4BAA4B/U,EACrC,GACA,iBAUA,WAEI,OADUxB,EAAKwW,qBAAqBnK,KAAK7K,OAC1B,CACnB,GACA,oBAKA,SAAOiV,EAAUtO,GACbvC,EAAa6Q,EAAUnQ,IACvBV,EAAauC,EAAM6B,IACnB,IAAIrJ,EAAMX,EAAK0W,wBAAwBrK,KAAK7K,IAAKiV,EAASjV,IAAK2G,EAAK3G,KACpE,OAAe,IAARb,OAAYP,EAAY4J,GAAczD,OAAO5F,EACxD,GACA,iBAIA,SAAI8V,GACA7Q,EAAa6Q,EAAUnQ,IACvB,IAAI3F,EAAMX,EAAK2W,qBAAqBtK,KAAK7K,IAAKiV,EAASjV,KACvD,OAAe,IAARb,OAAYP,EAAY4J,GAAczD,OAAO5F,EACxD,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAK4W,yBAAyBvK,KAAK7K,KAC7C,OAAOqV,GAAmBtQ,OAAO5F,EACrC,IAAC,qBAtDD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOmE,EAAiBlE,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK8W,uBACf,OAAOR,EAAiB/P,OAAO5F,EACnC,KAAC,EArBwB,GA0DhBuR,GAAW,wCAwDnB,OAxDmB,0CAMpB,WACI,IAAM1Q,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+W,uBAAuBvV,EAChC,GACA,0BAeA,WACI,IAAIb,EAAMX,EAAKgX,yBAAyB3K,KAAK7K,KAC7C,OAAOyV,GAAgB1Q,OAAO5F,EAClC,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKkX,uBAAuB7K,KAAK7K,KAC3C,OAAOyV,GAAgB1Q,OAAO5F,EAClC,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKmX,uBAAuB9K,KAAK7K,KAC3C,OAAOyP,GAAQ1K,OAAO5F,EAC1B,IACA,qBA/CA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOD,EAAYE,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAgBD,SAAWwV,EAASC,EAASC,GACzB1R,EAAayR,EAASJ,IACtBrR,EAAa0R,EAAOL,IACpB,IAAItW,EAAMX,EAAKuX,gBAAgBH,EAASC,EAAQ7V,IAAK8V,EAAM9V,KAC3D,OAAO0Q,EAAY3L,OAAO5F,EAC9B,GAAC,0BA0BD,SAAoBuI,GAChBtD,EAAasD,EAAM+H,IACnB,IAAItQ,EAAMX,EAAKiS,gBAAgB/I,EAAK1H,KACpC,OAAe,IAARb,OAAYP,EAAY8R,EAAY3L,OAAO5F,EACtD,KAAC,EAxDmB,GA2DX6W,GAAM,wCAiEd,OAjEc,0CAMf,WACI,IAAMhW,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKyX,kBAAkBjW,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0X,gBAAgB1Q,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,oBAaA,WACI,IAAItG,EAAMX,EAAK2X,cAActL,KAAK7K,KAClC,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAK4X,cAAcvL,KAAK7K,KAClC,OAAe,IAARb,OAAYP,EAAYwO,GAAIrI,OAAO5F,EAC9C,GACA,oBAaA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6X,cAAc7Q,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IAAC,qBAhFD,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOqF,EAAOpF,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8X,kBAAkBpR,EAAME,GACvC,OAAO4Q,EAAOjR,OAAO5F,EACzB,GAAC,sBAmBD,SAAgBoX,GACZ,IAAIrR,EAAOjE,EAAkBsV,EAAM/X,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKgY,gBAAgBtR,EAAME,GACrC,OAAO4Q,EAAOjR,OAAO5F,EACzB,KAAC,EAjEc,GAoFN2F,GAAM,wCA0Ed,OA1Ec,0CAMf,WACI,IAAM9E,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKiY,kBAAkBzW,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkY,gBAAgBlR,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,oBAuBA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKmY,cAAcnR,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,qBAUA,WAEI,OAAe,IADLnH,EAAKoY,eAAe/L,KAAK7K,IAEvC,GACA,yBAIA,SAAY6W,GACRzS,EAAayS,EAAO/R,GACpB,IAAI3F,EAAMX,EAAKsY,mBAAmBjM,KAAK7K,IAAK6W,EAAM7W,KAClD,OAAO8E,EAAOC,OAAO5F,EACzB,GACA,yBAIA,SAAY0X,GACRzS,EAAayS,EAAO/R,GACpB,IAAI3F,EAAMX,EAAKuY,mBAAmBlM,KAAK7K,IAAK6W,EAAM7W,KAClD,OAAO8E,EAAOC,OAAO5F,EACzB,GACA,yBAIA,SAAY0X,GACRzS,EAAayS,EAAO/R,GACpB,IAAI3F,EAAMX,EAAKwY,mBAAmBnM,KAAK7K,IAAK6W,EAAM7W,KAClD,OAAO8E,EAAOC,OAAO5F,EACzB,GACA,yBAIA,SAAY0X,GACRzS,EAAayS,EAAO/R,GACpB,IAAI3F,EAAMX,EAAKyY,mBAAmBpM,KAAK7K,IAAK6W,EAAM7W,KAClD,OAAO8E,EAAOC,OAAO5F,EACzB,GACA,8BAIA,SAAiB0X,GACbzS,EAAayS,EAAO/R,GACpB,IAAI3F,EAAMX,EAAK0Y,wBAAwBrM,KAAK7K,IAAK6W,EAAM7W,KACvD,OAAO8E,EAAOC,OAAO5F,EACzB,GACA,yBAKA,SAAY0X,GACRzS,EAAayS,EAAO/R,GACpB,IAAI3F,EAAMX,EAAK2Y,mBAAmBtM,KAAK7K,IAAK6W,EAAM7W,KAClD,OAAO8E,EAAOC,OAAO5F,EACzB,GACA,qBAIA,SAAQiY,GAGJ,OAFAhT,EAAagT,EAAWtS,GACdtG,EAAK6Y,eAAexM,KAAK7K,IAAKoX,EAAUpX,IAEtD,IAAC,qBAhJD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO7L,EAAO8L,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8Y,kBAAkBpS,EAAME,GACvC,OAAON,EAAOC,OAAO5F,EACzB,GACA,sBAIA,SAAgBoY,GACZ,IAAIrS,EAAOjE,EAAkBsW,EAAQ/Y,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACPlB,EAAMX,EAAKgZ,gBAAgBtS,EAAME,GACrC,OAAON,EAAOC,OAAO5F,EACzB,GAAC,kBAoBD,WACI,IAAIA,EAAMX,EAAKiZ,cACf,OAAO3S,EAAOC,OAAO5F,EACzB,KAAC,EA1Ec,GAoJN8I,GAAe,wCAmKvB,OAnKuB,0CAMxB,WACI,IAAMjI,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKkZ,2BAA2B1X,EACpC,GACA,oBAsBA,SAAOgS,GACH,IAAI7S,EAAMX,EAAKmZ,uBAAuB9M,KAAK7K,IAAKgS,GAChD,OAAO/J,EAAgBlD,OAAO5F,EAClC,GACA,yBAsBA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKoZ,4BAA4BpS,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,wBAUA,WACI,IAAItG,EAAMX,EAAKqZ,2BAA2BhN,KAAK7K,KAC/C,OAAOoI,GAAWrD,OAAO5F,EAC7B,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAKsZ,0BAA0BjN,KAAK7K,KAC9C,OAAO+X,GAAehT,OAAO5F,EACjC,GACA,sBAaA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwZ,yBAAyBxS,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKyZ,0BAA0BzS,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,uBAgBA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0Z,0BAA0B1S,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAnLD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO1I,EAAgB2I,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,2BAgDD,SAAqB6E,GACjB,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK2Z,8BAA8BjT,EAAME,GACnD,OAAO6C,EAAgBlD,OAAO5F,EAClC,GAAC,oCAsBD,WACI,IAAIA,EAAMX,EAAK4Z,yCACf,OAAOnQ,EAAgBlD,OAAO5F,EAClC,GAAC,wBAmBD,SAAkB8F,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK6Z,2BAA2BnT,EAAME,GAChD,OAAO6C,EAAgBlD,OAAO5F,EAClC,GAAC,yBAsBD,SAAmBmZ,GACf,IAAIpT,EAAOjE,EAAkBqX,EAAY9Z,EAAK2G,kBAAmB3G,EAAKyH,oBAClEb,EAAO/E,EACPlB,EAAMX,EAAK+Z,4BAA4BrT,EAAME,GACjD,OAAO6C,EAAgBlD,OAAO5F,EAClC,GAAC,gCAsBD,SAA0BqZ,EAAShS,GAC/B,IAAItB,EAAOf,EAAkBqU,EAASha,EAAK2G,mBACvCC,EAAO/E,EACPuG,EAAOzC,EAAkBqC,EAAUhI,EAAK2G,mBACxC0B,EAAOxG,EACPlB,EAAMX,EAAKia,mCAAmCvT,EAAME,EAAMwB,EAAMC,GACpE,OAAOoB,EAAgBlD,OAAO5F,EAClC,KAAC,EAnKuB,GAuLf4Y,GAAc,wCAyFtB,OAzFsB,0CAMvB,WACI,IAAM/X,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKka,0BAA0B1Y,EACnC,GACA,oBA2BA,SAAOgS,GACH,IAAI7S,EAAMX,EAAKma,sBAAsB9N,KAAK7K,IAAKgS,GAC/C,OAAO+F,EAAehT,OAAO5F,EACjC,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKoa,0BAA0B/N,KAAK7K,KAC9C,OAAO6Y,GAAU9T,OAAO5F,EAC5B,GACA,sBAaA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKsa,wBAAwBtT,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKua,yBAAyBvT,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,uBAGA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwa,yBAAyBxT,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAzHD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOoH,EAAenH,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAoDD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKya,0BAA0B/T,EAAME,GAC/C,OAAO2S,EAAehT,OAAO5F,EACjC,GAAC,yBAsBD,SAAmBmZ,GACf,IAAIpT,EAAOjE,EAAkBqX,EAAY9Z,EAAK2G,kBAAmB3G,EAAKyH,oBAClEb,EAAO/E,EACPlB,EAAMX,EAAK0a,2BAA2BhU,EAAME,GAChD,OAAO2S,EAAehT,OAAO5F,EACjC,KAAC,EAzFsB,GA6Hdga,GAAK,wCA8Hb,OA9Ha,0CAMd,WACI,IAAMnZ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4a,iBAAiBpZ,EAC1B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6a,eAAe7T,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8a,cAAc9T,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+a,kBAAkB1O,KAAK7K,KAE1C,GACA,oBAaA,WACI,IAAIb,EAAMX,EAAKgb,aAAa3O,KAAK7K,KACjC,OAAOyZ,GAAO1U,OAAO5F,EACzB,GACA,gCAGA,WACI,IAAIA,EAAMX,EAAKkb,yBAAyB7O,KAAK7K,KAC7C,OAAO2Z,GAAkB5U,OAAO5F,EACpC,GACA,sCAGA,WACI,IAAIA,EAAMX,EAAKob,+BAA+B/O,KAAK7K,KACnD,OAAO6Z,GAAuB9U,OAAO5F,EACzC,GACA,gCAGA,WACI,IAAIA,EAAMX,EAAKsb,yBAAyBjP,KAAK7K,KAC7C,OAAO8U,GAAiB/P,OAAO5F,EACnC,GACA,kCAGA,WACI,IAAIA,EAAMX,EAAKub,2BAA2BlP,KAAK7K,KAC/C,OAAOqV,GAAmBtQ,OAAO5F,EACrC,IACA,qBA7GA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOwI,EAAMvI,WAEhC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwb,iBAAiB9U,EAAME,GACtC,OAAO+T,EAAMpU,OAAO5F,EACxB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKyb,gBAAgB/U,EAAME,GACrC,OAAO+T,EAAMpU,OAAO5F,EACxB,GAAC,iBA4CD,SAAW+a,EAAQC,EAAoBC,EAA0BC,EAAoBC,GACjFlW,EAAa8V,EAAQT,IACrBrV,EAAa+V,EAAoBR,IACjCvV,EAAagW,EAA0BP,IACvCzV,EAAaiW,EAAoBvF,IACjC1Q,EAAakW,EAAsBjF,IACnC,IAAIlW,EAAMX,EAAK+b,UAAUL,EAAOla,IAAKma,EAAmBna,IAAKoa,EAAyBpa,IAAKqa,EAAmBra,IAAKsa,EAAqBta,KACxI,OAAOmZ,EAAMpU,OAAO5F,EACxB,KAAC,EA9Ha,GAiILqb,GAAS,wCAgGjB,OAhGiB,0CAMlB,WACI,IAAMxa,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKic,qBAAqBza,EAC9B,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO6J,EAAU5J,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkc,qBAAqBxV,EAAME,GAC1C,OAAOoV,EAAUzV,OAAO5F,EAC5B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKmc,sBAAsBzV,EAAME,GAC3C,OAAOoV,EAAUzV,OAAO5F,EAC5B,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKoc,mBAAmB1V,EAAME,GACxC,OAAOoV,EAAUzV,OAAO5F,EAC5B,KAAC,EAhGiB,GAmGT0b,GAAU,wCA2BlB,OA3BkB,0CAMnB,WACI,IAAM7a,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKsc,sBAAsB9a,EAC/B,GACA,iBAgBA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuc,eAAevV,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,wBAGA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwc,sBAAsBxV,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IAAC,qBA1DD,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOkK,EAAWjK,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAeD,SAAW6a,EAAKC,GACZ,IAAIhW,EAAOjE,EAAkBga,EAAKzc,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPuG,EAAO3F,EAAkBia,EAAY1c,EAAK2G,kBAAmB3G,EAAKyH,oBAClEY,EAAOxG,EACPlB,EAAMX,EAAK2c,eAAejW,EAAME,EAAMwB,EAAMC,GAChD,OAAOgU,EAAW9V,OAAO5F,EAC7B,KAAC,EA3BkB,GA8DV4I,GAAgB,wCA2IxB,OA3IwB,0CAMzB,WACI,IAAM/H,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4c,4BAA4Bpb,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6c,0BAA0B7V,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8c,yBAAyB9V,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+c,6BAA6B1Q,KAAK7K,KAErD,GACA,kBAaA,WACI,IAAIb,EAAMX,EAAKgd,sBAAsB3Q,KAAK7K,KAC1C,OAAOyb,GAAK1W,OAAO5F,EACvB,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAKkd,2BAA2B7Q,KAAK7K,KAC/C,OAAO2b,GAAiB5W,OAAO5F,EACnC,GACA,wBAGA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKod,4BAA4BpW,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,wBAGA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqd,4BAA4BrW,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IACA,qBA1HA,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO5I,EAAiB6I,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKsd,4BAA4B5W,EAAME,GACjD,OAAO2C,EAAiBhD,OAAO5F,EACnC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKud,2BAA2B7W,EAAME,GAChD,OAAO2C,EAAiBhD,OAAO5F,EACnC,GAAC,iBAwDD,SAAW6c,EAAMC,EAAWC,EAAYC,GACpC/X,EAAa4X,EAAMP,IACnBrX,EAAa6X,EAAWN,IACxB,IAAIzW,EAAOf,EAAkB+X,EAAY1d,EAAK2G,mBAC1CC,EAAO/E,EACPuG,EAAOzC,EAAkBgY,EAAY3d,EAAK2G,mBAC1C0B,EAAOxG,EACPlB,EAAMX,EAAK4d,qBAAqBJ,EAAKhc,IAAKic,EAAUjc,IAAKkF,EAAME,EAAMwB,EAAMC,GAC/E,OAAOkB,EAAiBhD,OAAO5F,EACnC,KAAC,EA3IwB,GA8IhBkd,GAAkB,wCAqB1B,OArB0B,0CAM3B,WACI,IAAMrc,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8d,8BAA8Btc,EACvC,GACA,iBAUA,WAEI,OADUxB,EAAK+d,uBAAuB1R,KAAK7K,OAC5B,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKge,uBAAuB3R,KAAK7K,IAAKgS,GAChD,OAAOjK,GAAiBhD,OAAO5F,EACnC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMnK,IACnBvJ,EAAKie,uBAAuB5R,KAAK7K,IAAKkS,EAAKlS,IAC/C,IAAC,qBA1CD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0L,EAAmBzL,WAE7C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAKke,yBACf,OAAOL,EAAmBtX,OAAO5F,EACrC,KAAC,EArB0B,GA8ClB0I,GAAY,wCAwIpB,OAxIoB,0CAMrB,WACI,IAAM7H,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKme,wBAAwB3c,EACjC,GACA,uBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKoe,uBAAuBpX,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,sBAGA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqe,sBAAsBrX,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kCAeA,WAEI,OADUjH,EAAKse,kCAAkCjS,KAAK7K,OACvC,CACnB,GACA,wBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKue,wBAAwBvX,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,wBAGA,WAEI,OADUjH,EAAKwe,wBAAwBnS,KAAK7K,IAEhD,GACA,wBAiCA,WACI,IAAIb,EAAMX,EAAKye,wBAAwBpS,KAAK7K,KAC5C,OAAOyP,GAAQ1K,OAAO5F,EAC1B,IACA,qBA/HA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO9I,EAAa+I,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+CD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK0e,wBAAwBhY,EAAME,GAC7C,OAAOyC,EAAa9C,OAAO5F,EAC/B,GAAC,yBAsCD,SAAmBge,GACf,IAAIjY,EAAOjE,EAAkBkc,EAAG3e,EAAK2G,kBAAmB3G,EAAKyH,oBACzDb,EAAO/E,EACPlB,EAAMX,EAAK4e,yBAAyBlY,EAAME,GAC9C,OAAOyC,EAAa9C,OAAO5F,EAC/B,GACA,6BAKA,SAAuBwI,EAAK0V,GACxBjZ,EAAauD,EAAKoQ,IAClB,IAAI5Y,EAAMX,EAAK8e,6BAA6B3V,EAAI3H,IAAKqd,GACrD,OAAOxV,EAAa9C,OAAO5F,EAC/B,GACA,sBAIA,SAAgBge,GACZ,IAAIjY,EAAOjE,EAAkBkc,EAAG3e,EAAK2G,kBAAmB3G,EAAKyH,oBACzDb,EAAO/E,EAEX,OAAe,IADL7B,EAAK+e,sBAAsBrY,EAAME,EAE/C,GAAC,0BAYD,SAAoBsC,GAChBtD,EAAasD,EAAM+H,IACnB,IAAItQ,EAAMX,EAAK0R,iBAAiBxI,EAAK1H,KACrC,OAAe,IAARb,OAAYP,EAAYiJ,EAAa9C,OAAO5F,EACvD,KAAC,EAxIoB,GA2IZqe,GAAW,wCAyInB,OAzImB,0CAMpB,WACI,IAAMxd,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKif,uBAAuBzd,EAChC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkf,qBAAqBlY,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKmf,oBAAoBnY,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKof,wBAAwB/S,KAAK7K,KAEhD,GACA,kBA4EA,WAEI,OADUxB,EAAKqf,iBAAiBhT,KAAK7K,OACtB,CACnB,GACA,mCAGA,WACI,IAAIb,EAAMX,EAAKsf,kCAAkCjT,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAY0M,GAAkBvG,OAAO5F,EAC5D,GACA,qCAGA,WACI,IAAIA,EAAMX,EAAKuf,oCAAoClT,KAAK7K,KACxD,OAAe,IAARb,OAAYP,EAAY2M,GAAoBxG,OAAO5F,EAC9D,GACA,iCAGA,WACI,IAAIA,EAAMX,EAAKwf,gCAAgCnT,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAY4M,GAAgBzG,OAAO5F,EAC1D,GACA,kCAGA,WACI,IAAIA,EAAMX,EAAKyf,iCAAiCpT,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAY6M,GAAiB1G,OAAO5F,EAC3D,GACA,gCAGA,WACI,IAAIA,EAAMX,EAAK0f,+BAA+BrT,KAAK7K,KACnD,OAAe,IAARb,OAAYP,EAAY8M,GAAe3G,OAAO5F,EACzD,GACA,uCAGA,WACI,IAAIA,EAAMX,EAAK2f,sCAAsCtT,KAAK7K,KAC1D,OAAe,IAARb,OAAYP,EAAY+M,GAAqB5G,OAAO5F,EAC/D,GACA,gDAGA,WACI,IAAIA,EAAMX,EAAK4f,+CAA+CvT,KAAK7K,KACnE,OAAe,IAARb,OAAYP,EAAYgN,GAA6B7G,OAAO5F,EACvE,IAAC,qBAhMD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO6M,EAAY5M,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK6f,uBAAuBnZ,EAAME,GAC5C,OAAOoY,EAAYzY,OAAO5F,EAC9B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK8f,sBAAsBpZ,EAAME,GAC3C,OAAOoY,EAAYzY,OAAO5F,EAC9B,GACA,oCAIA,SAA8Bof,GAC1Bna,EAAama,EAAoBjT,IACjC,IAAInM,EAAMX,EAAKggB,mCAAmCD,EAAmBve,KACrE,OAAOwd,EAAYzY,OAAO5F,EAC9B,GACA,sCAIA,SAAgCsf,GAC5Bra,EAAaqa,EAAsBlT,IACnC,IAAIpM,EAAMX,EAAKkgB,qCAAqCD,EAAqBze,KACzE,OAAOwd,EAAYzY,OAAO5F,EAC9B,GACA,kCAIA,SAA4Bwf,GACxBva,EAAaua,EAAkBnT,IAC/B,IAAIrM,EAAMX,EAAKogB,iCAAiCD,EAAiB3e,KACjE,OAAOwd,EAAYzY,OAAO5F,EAC9B,GACA,mCAIA,SAA6B0f,GACzBza,EAAaya,EAAmBpT,IAChC,IAAItM,EAAMX,EAAKsgB,kCAAkCD,EAAkB7e,KACnE,OAAOwd,EAAYzY,OAAO5F,EAC9B,GACA,iCAIA,SAA2B4f,GACvB3a,EAAa2a,EAAiBrT,IAC9B,IAAIvM,EAAMX,EAAKwgB,gCAAgCD,EAAgB/e,KAC/D,OAAOwd,EAAYzY,OAAO5F,EAC9B,GACA,wCAIA,SAAkC8f,GAC9B7a,EAAa6a,EAAwBtT,IACrC,IAAIxM,EAAMX,EAAK0gB,uCAAuCD,EAAuBjf,KAC7E,OAAOwd,EAAYzY,OAAO5F,EAC9B,GACA,iDAIA,SAA2CggB,GACvC/a,EAAa+a,EAAiCvT,IAC9C,IAAIzM,EAAMX,EAAK4gB,gDAAgDD,EAAgCnf,KAC/F,OAAOwd,EAAYzY,OAAO5F,EAC9B,KAAC,EAzImB,GAoMXkgB,GAAY,wCAiFpB,OAjFoB,0CAMrB,WACI,IAAMrf,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8gB,wBAAwBtf,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+gB,sBAAsB/Z,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKghB,qBAAqBha,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKihB,yBAAyB5U,KAAK7K,KAEjD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKkhB,iBAAiB7U,KAAK7K,IAAKgS,GAC1C,OAAOwL,GAAYzY,OAAO5F,EAC9B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMsL,IACnBhf,EAAKmhB,iBAAiB9U,KAAK7K,IAAKkS,EAAKlS,IACzC,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0O,EAAazO,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKohB,wBAAwB1a,EAAME,GAC7C,OAAOia,EAAata,OAAO5F,EAC/B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKqhB,uBAAuB3a,EAAME,GAC5C,OAAOia,EAAata,OAAO5F,EAC/B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKshB,mBACf,OAAOT,EAAata,OAAO5F,EAC/B,KAAC,EAjFoB,GA0GZsP,GAAgB,wCAkExB,OAlEwB,0CAMzB,WACI,IAAMzO,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKuhB,4BAA4B/f,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwhB,0BAA0Bxa,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,yBAaA,WACI,IAAItG,EAAMX,EAAKyhB,6BAA6BpV,KAAK7K,KACjD,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK0hB,sBAAsBrV,KAAK7K,KAC1C,OAAOsH,GAAWvC,OAAO5F,EAC7B,IACA,qBAvDA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOlC,EAAiBmC,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK2hB,4BAA4Bjb,EAAME,GACjD,OAAOqJ,EAAiB1J,OAAO5F,EACnC,GAAC,iBAoBD,SAAWihB,EAAazZ,GACpBvC,EAAagc,EAAatb,IAC1BV,EAAauC,EAAMW,IACnB,IAAInI,EAAMX,EAAK6hB,qBAAqBD,EAAYpgB,IAAK2G,EAAK3G,KAC1D,OAAOyO,EAAiB1J,OAAO5F,EACnC,KAAC,EAlEwB,GAqEhBmhB,GAAS,wCAuDjB,OAvDiB,0CAMlB,WACI,IAAMtgB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+hB,qBAAqBvgB,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgiB,mBAAmBhb,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBA6BA,SAAIgb,EAAWC,GACXtc,EAAasc,EAAMtT,IACnB,IAAIjO,EAAMX,EAAKmiB,cAAc9V,KAAK7K,IAAKygB,EAAWC,EAAK1gB,KACvD,OAAOoN,GAAIrI,OAAO5F,EACtB,GACA,iBAIA,SAAIshB,GACA,IAAIthB,EAAMX,EAAKoiB,cAAc/V,KAAK7K,IAAKygB,GACvC,OAAOrT,GAAIrI,OAAO5F,EACtB,GACA,iBAGA,WAEI,OADUX,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,IAAC,qBA/ED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO2P,EAAU1P,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKsiB,qBAAqB5b,EAAME,GAC1C,OAAOkb,EAAUvb,OAAO5F,EAC5B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKuiB,gBACf,OAAOT,EAAUvb,OAAO5F,EAC5B,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAKwiB,0BACf,OAAOV,EAAUvb,OAAO5F,EAC5B,KAAC,EAvDiB,GAmFTsK,GAAQ,wCAgDhB,OAhDgB,0CAMjB,WACI,IAAMzJ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKyiB,oBAAoBjhB,EAC7B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0iB,kBAAkB1b,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKwZ,IAClB/c,EAAawO,EAAO0N,IACpB,IAAInhB,EAAMX,EAAK4iB,gBAAgBvW,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KACxD,OAAe,IAARb,OAAYP,EAAY0hB,GAAUvb,OAAO5F,EACpD,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKwZ,IAClB,IAAIhiB,EAAMX,EAAK6iB,aAAaxW,KAAK7K,IAAK2H,EAAI3H,KAC1C,OAAe,IAARb,OAAYP,EAAY0hB,GAAUvb,OAAO5F,EACpD,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK8iB,cAAczW,KAAK7K,KAClC,OAAOuhB,GAAUxc,OAAO5F,EAC5B,IAAC,qBAjFD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOlH,EAASmH,WAEnC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKgjB,oBAAoBtc,EAAME,GACzC,OAAOqE,EAAS1E,OAAO5F,EAC3B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKijB,eACf,OAAOhY,EAAS1E,OAAO5F,EAC3B,KAAC,EAhDgB,GAqFRuiB,GAAgB,wCAmDxB,OAnDwB,0CAMzB,WACI,IAAM1hB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmjB,4BAA4B3hB,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKojB,0BAA0Bpc,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,oBAuBA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqjB,wBAAwBrc,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IAAC,qBAlED,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO+Q,EAAiB9Q,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKsjB,4BAA4B5c,EAAME,GACjD,OAAOsc,EAAiB3c,OAAO5F,EACnC,GACA,iBAIA,SAAW4iB,GACP,IAAI7c,EAAOjE,EAAkB8gB,EAAUvjB,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKwjB,qBAAqB9c,EAAME,GAC1C,OAAOsc,EAAiB3c,OAAO5F,EACnC,KAAC,EAnDwB,GAsEhB8iB,GAAY,wCAmDpB,OAnDoB,0CAMrB,WACI,IAAMjiB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK0jB,wBAAwBliB,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2jB,sBAAsB3c,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,oBAuBA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqjB,wBAAwBrc,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IAAC,qBAlED,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOsR,EAAarR,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4jB,wBAAwBld,EAAME,GAC7C,OAAO6c,EAAald,OAAO5F,EAC/B,GACA,iBAIA,SAAW4iB,GACP,IAAI7c,EAAOjE,EAAkB8gB,EAAUvjB,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAK6jB,iBAAiBnd,EAAME,GACtC,OAAO6c,EAAald,OAAO5F,EAC/B,KAAC,EAnDoB,GAsEZqQ,GAAI,wCAmFZ,OAnFY,0CAMb,WACI,IAAMxP,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8jB,gBAAgBtiB,EACzB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+jB,cAAc/c,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgkB,aAAahd,EAAQqF,KAAK7K,KAC/B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKikB,iBAAiB5X,KAAK7K,KAEzC,GACA,iBAsBA,WACI,IAAIb,EAAMX,EAAKkkB,SAAS7X,KAAK7K,KAC7B,OAAO+I,GAAWhE,OAAO5F,EAC7B,IAAC,qBAzFD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOnB,EAAKoB,WAE/B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKmkB,gBAAgBzd,EAAME,GACrC,OAAOoK,EAAKzK,OAAO5F,EACvB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKokB,eAAe1d,EAAME,GACpC,OAAOoK,EAAKzK,OAAO5F,EACvB,GACA,iBAIA,SAAW2J,GACP1E,EAAa0E,EAAaC,IAC1B,IAAI5J,EAAMX,EAAKqkB,SAAS/Z,EAAY9I,KACpC,OAAOwP,EAAKzK,OAAO5F,EACvB,KAAC,EAnFY,GA6FJ6J,GAAQ,wCAgGhB,OAhGgB,0CAMjB,WACI,IAAMhJ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKskB,oBAAoB9iB,EAC7B,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO3H,EAAS4H,WAEnC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKukB,oBAAoB7d,EAAME,GACzC,OAAO4D,EAASjE,OAAO5F,EAC3B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKwkB,qBAAqB9d,EAAME,GAC1C,OAAO4D,EAASjE,OAAO5F,EAC3B,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKykB,kBAAkB/d,EAAME,GACvC,OAAO4D,EAASjE,OAAO5F,EAC3B,KAAC,EAhGgB,GAmGR+jB,GAAK,wCA4Fb,OA5Fa,0CAMd,WACI,IAAMljB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2kB,iBAAiBnjB,EAC1B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4kB,eAAe5d,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6kB,cAAc7d,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK8kB,kBAAkBzY,KAAK7K,KAE1C,GACA,kBA+BA,WAEI,OADUxB,EAAK+kB,WAAW1Y,KAAK7K,OAChB,CACnB,GACA,0BAGA,WACI,IAAIb,EAAMX,EAAKglB,mBAAmB3Y,KAAK7K,KACvC,OAAe,IAARb,OAAYP,EAAYoK,GAASjE,OAAO5F,EACnD,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAKilB,cAAc5Y,KAAK7K,KAClC,OAAe,IAARb,OAAYP,EAAY4Q,GAAKzK,OAAO5F,EAC/C,IAAC,qBAhHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOuS,EAAMtS,WAEhC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKklB,iBAAiBxe,EAAME,GACtC,OAAO8d,EAAMne,OAAO5F,EACxB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKmlB,gBAAgBze,EAAME,GACrC,OAAO8d,EAAMne,OAAO5F,EACxB,GACA,2BAIA,SAAqBykB,GACjBxf,EAAawf,EAAW5a,IACxB,IAAI7J,EAAMX,EAAKqlB,oBAAoBD,EAAU5jB,KAC7C,OAAOkjB,EAAMne,OAAO5F,EACxB,GACA,sBAIA,SAAgBwH,GACZvC,EAAauC,EAAM6I,IACnB,IAAIrQ,EAAMX,EAAKslB,eAAend,EAAK3G,KACnC,OAAOkjB,EAAMne,OAAO5F,EACxB,KAAC,EA5Fa,GAoHL4kB,GAAc,wCAgGtB,OAhGsB,0CAMvB,WACI,IAAM/jB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKwlB,0BAA0BhkB,EACnC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKylB,wBAAwBze,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAK0lB,yBAAyB1e,EAAQqF,KAAK7K,IAAKkF,EAAME,GACtD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2lB,sBAAsB3e,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOoT,EAAenT,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4lB,0BAA0Blf,EAAME,GAC/C,OAAO2e,EAAehf,OAAO5F,EACjC,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAK6lB,2BAA2Bnf,EAAME,GAChD,OAAO2e,EAAehf,OAAO5F,EACjC,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAK8lB,wBAAwBpf,EAAME,GAC7C,OAAO2e,EAAehf,OAAO5F,EACjC,KAAC,EAhGsB,GAmGdolB,GAAgB,wCAiFxB,OAjFwB,0CAMzB,WACI,IAAMvkB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgmB,4BAA4BxkB,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKimB,0BAA0Bjf,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkmB,yBAAyBlf,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKmmB,6BAA6B9Z,KAAK7K,KAErD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKomB,qBAAqB/Z,KAAK7K,IAAKgS,GAC9C,OAAO+R,GAAehf,OAAO5F,EACjC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM6R,IACnBvlB,EAAKqmB,qBAAqBha,KAAK7K,IAAKkS,EAAKlS,IAC7C,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO4T,EAAiB3T,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKsmB,4BAA4B5f,EAAME,GACjD,OAAOmf,EAAiBxf,OAAO5F,EACnC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKumB,2BAA2B7f,EAAME,GAChD,OAAOmf,EAAiBxf,OAAO5F,EACnC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKwmB,uBACf,OAAOT,EAAiBxf,OAAO5F,EACnC,KAAC,EAjFwB,GA0GhBwc,GAAgB,wCA6FxB,OA7FwB,0CAMzB,WACI,IAAM3b,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKymB,4BAA4BjlB,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0mB,0BAA0B1f,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAGA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2mB,2BAA2B3f,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAGA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4mB,wBAAwB5f,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBA/DA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOgL,EAAiB/K,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,yBA+DD,SAAmBkY,GACf,IAAIpT,EAAOjE,EAAkBqX,EAAY9Z,EAAK2G,kBAAmB3G,EAAKyH,oBAClEb,EAAO/E,EACPlB,EAAMX,EAAK6mB,6BAA6BngB,EAAME,GAClD,OAAOuW,EAAiB5W,OAAO5F,EACnC,GACA,sBAIA,SAAgBmmB,GACZ,IAAIpgB,EAAOjE,EAAkBqkB,EAAO9mB,EAAK2G,kBAAmB3G,EAAKyH,oBAC7Db,EAAO/E,EACPlB,EAAMX,EAAK+mB,0BAA0BrgB,EAAME,GAC/C,OAAOuW,EAAiB5W,OAAO5F,EACnC,GACA,wBAIA,SAAkB8F,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKgnB,4BAA4BtgB,EAAME,GACjD,OAAOuW,EAAiB5W,OAAO5F,EACnC,KAAC,EA7FwB,GAgGhBqR,GAAiB,wCA+CzB,OA/CyB,0CAM1B,WACI,IAAMxQ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKinB,6BAA6BzlB,EACtC,GACA,0BAaA,WACI,IAAIb,EAAMX,EAAKgX,yBAAyB3K,KAAK7K,KAC7C,OAAOyV,GAAgB1Q,OAAO5F,EAClC,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKknB,6BAA6B7a,KAAK7K,KACjD,OAAOyP,GAAQ1K,OAAO5F,EAC1B,IACA,qBAtCA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOH,EAAkBI,WAE5C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAeD,SAAWwV,EAASC,GAChBzR,EAAayR,EAASJ,IACtB,IAAItW,EAAMX,EAAKmnB,sBAAsB/P,EAASC,EAAQ7V,KACtD,OAAOwQ,EAAkBzL,OAAO5F,EACpC,GAAC,0BAmBD,SAAoBuI,GAChBtD,EAAasD,EAAM+H,IACnB,IAAItQ,EAAMX,EAAK+R,sBAAsB7I,EAAK1H,KAC1C,OAAe,IAARb,OAAYP,EAAY4R,EAAkBzL,OAAO5F,EAC5D,KAAC,EA/CyB,GAkDjB0F,GAAY,wCA2EpB,OA3EoB,0CAMrB,WACI,IAAM7E,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKonB,wBAAwB5lB,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqnB,sBAAsBrgB,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAaA,WACI,IAAItG,EAAMX,EAAKsnB,uBAAuBjb,KAAK7K,KAC3C,OAAO+lB,GAAahhB,OAAO5F,EAC/B,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKwnB,wBAAwBnb,KAAK7K,KAC5C,OAAO+lB,GAAahhB,OAAO5F,EAC/B,IACA,qBAvDA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO9L,EAAa+L,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKynB,wBAAwB/gB,EAAME,GAC7C,OAAOP,EAAaE,OAAO5F,EAC/B,GAAC,iBAoBD,SAAW+mB,EAAWC,GAClB/hB,EAAa8hB,EAAWH,IACxB3hB,EAAa+hB,EAAYJ,IACzB,IAAI5mB,EAAMX,EAAK4nB,iBAAiBF,EAAUlmB,IAAKmmB,EAAWnmB,KAC1D,OAAO6E,EAAaE,OAAO5F,EAC/B,GACA,wBAKA,SAAkB+mB,EAAWC,GACzB,IAAIhnB,EAAMX,EAAK6nB,wBAAwBH,EAAWC,GAClD,OAAOthB,EAAaE,OAAO5F,EAC/B,KAAC,EA3EoB,GA8EZmnB,GAAO,wCAkEf,OAlEe,0CAMhB,WACI,IAAMtmB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+nB,mBAAmBvmB,EAC5B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgoB,iBAAiBhhB,EAAQqF,KAAK7K,KACnC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAaA,WACI,IAAItG,EAAMX,EAAKyhB,6BAA6BpV,KAAK7K,KACjD,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAKioB,cAAc5b,KAAK7K,KAClC,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBAvDA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO2V,EAAQ1V,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkoB,mBAAmBxhB,EAAME,GACxC,OAAOkhB,EAAQvhB,OAAO5F,EAC1B,GAAC,iBAoBD,SAAWiC,EAAKulB,GACZviB,EAAahD,EAAK0D,IAClBV,EAAauiB,EAAO7hB,IACpB,IAAI3F,EAAMX,EAAKooB,YAAYxlB,EAAIpB,IAAK2mB,EAAM3mB,KAC1C,OAAOsmB,EAAQvhB,OAAO5F,EAC1B,KAAC,EAlEe,GAqEPqU,GAA0B,wCAiFlC,OAjFkC,0CAMnC,WACI,IAAMxT,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKqoB,sCAAsC7mB,EAC/C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKsoB,oCAAoCthB,EAAQqF,KAAK7K,KACtD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuoB,mCAAmCvhB,EAAQqF,KAAK7K,KACrD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKwoB,uCAAuCnc,KAAK7K,KAE/D,GACA,iBAoBA,WAEI,OADUxB,EAAKyoB,+BAA+Bpc,KAAK7K,OACpC,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAK7C,IAClBV,EAAawO,EAAOvN,IACpB,IAAIlG,EAAMX,EAAK0oB,kCAAkCrc,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KAC1E,OAAe,IAARb,OAAYP,EAAYyG,GAAqBN,OAAO5F,EAC/D,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAK7C,IAClB,IAAI3F,EAAMX,EAAK2oB,+BAA+Btc,KAAK7K,IAAK2H,EAAI3H,KAC5D,OAAe,IAARb,OAAYP,EAAYyG,GAAqBN,OAAO5F,EAC/D,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK4oB,gCAAgCvc,KAAK7K,KACpD,OAAOqnB,GAA2BtiB,OAAO5F,EAC7C,IAAC,qBAlHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO6C,EAA2B5C,WAErD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8oB,sCAAsCpiB,EAAME,GAC3D,OAAOoO,EAA2BzO,OAAO5F,EAC7C,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+oB,qCAAqCriB,EAAME,GAC1D,OAAOoO,EAA2BzO,OAAO5F,EAC7C,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKgpB,iCACf,OAAOhU,EAA2BzO,OAAO5F,EAC7C,KAAC,EAjFkC,GAsH1BsoB,GAAmB,wCAgG3B,OAhG2B,0CAM5B,WACI,IAAMznB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKkpB,+BAA+B1nB,EACxC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKylB,wBAAwBze,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAK0lB,yBAAyB1e,EAAQqF,KAAK7K,IAAKkF,EAAME,GACtD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2lB,sBAAsB3e,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8W,EAAoB7W,WAE9C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKmpB,+BAA+BziB,EAAME,GACpD,OAAOqiB,EAAoB1iB,OAAO5F,EACtC,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKopB,gCAAgC1iB,EAAME,GACrD,OAAOqiB,EAAoB1iB,OAAO5F,EACtC,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKqpB,6BAA6B3iB,EAAME,GAClD,OAAOqiB,EAAoB1iB,OAAO5F,EACtC,KAAC,EAhG2B,GAmGnB2oB,GAAW,wCAgGnB,OAhGmB,0CAMpB,WACI,IAAM9nB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKupB,uBAAuB/nB,EAChC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKylB,wBAAwBze,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAK0lB,yBAAyB1e,EAAQqF,KAAK7K,IAAKkF,EAAME,GACtD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2lB,sBAAsB3e,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOmX,EAAYlX,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwpB,uBAAuB9iB,EAAME,GAC5C,OAAO0iB,EAAY/iB,OAAO5F,EAC9B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKypB,wBAAwB/iB,EAAME,GAC7C,OAAO0iB,EAAY/iB,OAAO5F,EAC9B,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAK0pB,qBAAqBhjB,EAAME,GAC1C,OAAO0iB,EAAY/iB,OAAO5F,EAC9B,KAAC,EAhGmB,GAmGXgpB,GAAa,wCAiFrB,OAjFqB,0CAMtB,WACI,IAAMnoB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4pB,yBAAyBpoB,EAClC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6pB,uBAAuB7iB,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8pB,sBAAsB9iB,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+pB,0BAA0B1d,KAAK7K,KAElD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKgqB,kBAAkB3d,KAAK7K,IAAKgS,GAC3C,OAAO8V,GAAY/iB,OAAO5F,EAC9B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM4V,IACnBtpB,EAAKiqB,kBAAkB5d,KAAK7K,IAAKkS,EAAKlS,IAC1C,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOwX,EAAcvX,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkqB,yBAAyBxjB,EAAME,GAC9C,OAAO+iB,EAAcpjB,OAAO5F,EAChC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKmqB,wBAAwBzjB,EAAME,GAC7C,OAAO+iB,EAAcpjB,OAAO5F,EAChC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKwmB,uBACf,OAAOmD,EAAcpjB,OAAO5F,EAChC,KAAC,EAjFqB,GA0GbwM,GAAoB,wCA4G5B,OA5G4B,0CAM7B,WACI,IAAM3L,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKoqB,gCAAgC5oB,EACzC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqqB,8BAA8BrjB,EAAQqF,KAAK7K,KAChD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKsqB,6BAA6BtjB,EAAQqF,KAAK7K,KAC/C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKuqB,iCAAiCle,KAAK7K,KAEzD,GACA,yBAaA,WACI,IAAIb,EAAMX,EAAKwqB,iCAAiCne,KAAK7K,KACrD,OAAO8nB,GAAY/iB,OAAO5F,EAC9B,GACA,mCAGA,WACI,IAAIA,EAAMX,EAAKyqB,2CAA2Cpe,KAAK7K,KAC/D,OAAOynB,GAAoB1iB,OAAO5F,EACtC,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAK0qB,iCAAiCre,KAAK7K,KACrD,OAAOmpB,GAAWpkB,OAAO5F,EAC7B,IACA,qBA/FA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOhF,EAAqBiF,WAE/C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4qB,gCAAgClkB,EAAME,GACrD,OAAOuG,EAAqB5G,OAAO5F,EACvC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK6qB,+BAA+BnkB,EAAME,GACpD,OAAOuG,EAAqB5G,OAAO5F,EACvC,GAAC,iBA4BD,SAAWmqB,EAAaC,EAAuBC,GAC3CplB,EAAaklB,EAAaxB,IAC1B1jB,EAAamlB,EAAuB9B,IACpCrjB,EAAaolB,EAAaL,IAC1B,IAAIhqB,EAAMX,EAAKirB,yBAAyBH,EAAYtpB,IAAKupB,EAAsBvpB,IAAKwpB,EAAYxpB,KAChG,OAAO2L,EAAqB5G,OAAO5F,EACvC,KAAC,EA5G4B,GA+GpBsa,GAAM,wCAmGd,OAnGc,0CAMf,WACI,IAAMzZ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKkrB,kBAAkB1pB,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKmrB,gBAAgBnkB,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKorB,eAAepkB,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKqrB,mBAAmBhf,KAAK7K,KAE3C,GACA,yBAaA,WACI,IAAIb,EAAMX,EAAKsrB,mBAAmBjf,KAAK7K,KACvC,OAAO+pB,GAAWhlB,OAAO5F,EAC7B,GACA,4BAGA,WACI,IAAIA,EAAMX,EAAKwrB,sBAAsBnf,KAAK7K,KAC1C,OAAOiqB,GAAallB,OAAO5F,EAC/B,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8I,EAAO7I,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK0rB,kBAAkBhlB,EAAME,GACvC,OAAOqU,EAAO1U,OAAO5F,EACzB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK2rB,iBAAiBjlB,EAAME,GACtC,OAAOqU,EAAO1U,OAAO5F,EACzB,GAAC,iBAoBD,SAAWirB,EAAaC,GACpBjmB,EAAagmB,EAAaL,IAC1B3lB,EAAaimB,EAAgBJ,IAC7B,IAAI9qB,EAAMX,EAAK8rB,WAAWF,EAAYpqB,IAAKqqB,EAAerqB,KAC1D,OAAOyZ,EAAO1U,OAAO5F,EACzB,KAAC,EAnGc,GAsGN4qB,GAAU,wCAuLlB,OAvLkB,0CAMnB,WACI,IAAM/pB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+rB,sBAAsBvqB,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgsB,oBAAoBhlB,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKisB,mBAAmBjlB,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKksB,uBAAuB7f,KAAK7K,KAE/C,GACA,0BAaA,WAEI,OADUxB,EAAKmsB,wBAAwB9f,KAAK7K,OAC7B,CACnB,GACA,kBAGA,WACI,IAAIb,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAKqsB,qBAAqBhgB,KAAK7K,KACzC,OAAe,IAARb,OAAYP,EAAY4b,GAAUzV,OAAO5F,EACpD,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKssB,uBAAuBjgB,KAAK7K,KAC3C,OAAOyb,GAAK1W,OAAO5F,EACvB,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAKusB,oBAAoBlgB,KAAK7K,KACxC,OAAOgrB,GAAQjmB,OAAO5F,EAC1B,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAKysB,qBAAqBpgB,KAAK7K,KACzC,OAAOkrB,GAAQnmB,OAAO5F,EAC1B,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAK2sB,sBAAsBtgB,KAAK7K,KAC1C,OAAOkrB,GAAQnmB,OAAO5F,EAC1B,GACA,6BAGA,WAEI,OADUX,EAAK4sB,2BAA2BvgB,KAAK7K,OAChC,CACnB,GACA,6BAGA,WACI,IAAIb,EAAMX,EAAK6sB,2BAA2BxgB,KAAK7K,KAC/C,OAAOwa,GAAUzV,OAAO5F,EAC5B,GACA,8BAGA,WACI,IAAIA,EAAMX,EAAK8sB,4BAA4BzgB,KAAK7K,KAChD,OAAOurB,GAAgBxmB,OAAO5F,EAClC,GACA,8BAGA,WACI,IAAIA,EAAMX,EAAKgtB,4BAA4B3gB,KAAK7K,KAChD,OAAOyrB,GAAgB1mB,OAAO5F,EAClC,IACA,qBAvJA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOoZ,EAAWnZ,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKktB,sBAAsBxmB,EAAME,GAC3C,OAAO2kB,EAAWhlB,OAAO5F,EAC7B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKmtB,qBAAqBzmB,EAAME,GAC1C,OAAO2kB,EAAWhlB,OAAO5F,EAC7B,GAAC,iBA4FD,SAAWysB,EAAcC,EAAMC,EAAWC,EAAaC,EAAUC,EAAWC,EAAYC,EAAiBC,EAAiBC,EAAkBC,GACxIloB,EAAaynB,EAAM/mB,IACnB,IAAII,EAAO,EACNtD,EAAWkqB,KACZ1nB,EAAa0nB,EAAWtR,IACxBtV,EAAO4mB,EAAU9rB,IACjB8rB,EAAU9rB,IAAM,GAEpBoE,EAAa2nB,EAAatQ,IAC1BrX,EAAa4nB,EAAUhB,IACvB5mB,EAAa6nB,EAAWf,IACxB9mB,EAAa8nB,EAAYhB,IACzB9mB,EAAagoB,EAAiB5R,IAC9BpW,EAAaioB,EAAkBd,IAC/BnnB,EAAakoB,EAAkBb,IAC/B,IAAItsB,EAAMX,EAAK+tB,eAAeX,EAAcC,EAAK7rB,IAAKkF,EAAM6mB,EAAY/rB,IAAKgsB,EAAShsB,IAAKisB,EAAUjsB,IAAKksB,EAAWlsB,IAAKmsB,EAAiBC,EAAgBpsB,IAAKqsB,EAAiBrsB,IAAKssB,EAAiBtsB,KACvM,OAAO+pB,EAAWhlB,OAAO5F,EAC7B,KAAC,EAvLkB,GA0LViO,GAAG,wCA4KX,OA5KW,0CAMZ,WACI,IAAMpN,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKguB,eAAexsB,EACxB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiuB,aAAajnB,EAAQqF,KAAK7K,KAC/B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,yBAuCA,WAEI,OAAe,IADLjH,EAAKkuB,gBAAgB7hB,KAAK7K,IAExC,GACA,yBASA,WACI,IAAIb,EAAMX,EAAKmuB,gBAAgB9hB,KAAK7K,KACpC,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,yBASA,WACI,IAAIA,EAAMX,EAAKouB,gBAAgB/hB,KAAK7K,KACpC,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,oBAMA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKquB,WAAWrnB,EAAQqF,KAAK7K,KAC7B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,CAIlC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,+BAKA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKquB,WAAWrnB,EAAQqF,KAAK7K,KAC7B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,CAIlC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,4BAKA,WAEI,OADUjH,EAAKsuB,mBAAmBjiB,KAAK7K,IAE3C,GACA,oBAKA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuuB,WAAWvnB,EAAQqF,KAAK7K,KAC7B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAlKA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOvD,EAAIwD,WAE9B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwuB,eAAe9nB,EAAME,GACpC,OAAOgI,EAAIrI,OAAO5F,EACtB,GACA,iBAIA,SAAW0C,GACPuC,EAAavC,EAAGiD,IAChB,IAAI3F,EAAMX,EAAKyuB,QAAQprB,EAAE7B,KACzB,OAAOoN,EAAIrI,OAAO5F,EACtB,GACA,0BAIA,SAAoB0C,GAChBuC,EAAavC,EAAGiD,IAChB,IAAI3F,EAAMX,EAAK0uB,iBAAiBrrB,EAAE7B,KAClC,OAAOoN,EAAIrI,OAAO5F,EACtB,GACA,qBAIA,SAAe0C,GACX,IAAI1C,EAAMX,EAAK2uB,YAAYtrB,GAC3B,OAAOuL,EAAIrI,OAAO5F,EACtB,GAAC,sBAoGD,SAAgBoY,GACZ,IAAIrS,EAAOjE,EAAkBsW,EAAQ/Y,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACPlB,EAAMX,EAAK4uB,aAAaloB,EAAME,GAClC,OAAOgI,EAAIrI,OAAO5F,EACtB,KAAC,EA5KW,GA+KHkuB,GAAI,wCAoFZ,OApFY,0CAMb,WACI,IAAMrtB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8uB,gBAAgBttB,EACzB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+uB,cAAc/nB,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgvB,aAAahoB,EAAQqF,KAAK7K,KAC/B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKivB,iBAAiB5iB,KAAK7K,KAEzC,GACA,gBAuBA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkvB,QAAQloB,EAAQqF,KAAK7K,KAC1B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBApGD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0c,EAAKzc,WAE/B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKmvB,gBAAgBzoB,EAAME,GACrC,OAAOioB,EAAKtoB,OAAO5F,EACvB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKovB,eAAe1oB,EAAME,GACpC,OAAOioB,EAAKtoB,OAAO5F,EACvB,GACA,iBAIA,SAAWwH,GACP,IAAIzB,EAAOf,EAAkBwC,EAAMnI,EAAK2G,mBACpCC,EAAO/E,EACPlB,EAAMX,EAAKqvB,SAAS3oB,EAAME,GAC9B,OAAOioB,EAAKtoB,OAAO5F,EACvB,KAAC,EApFY,GAwGJ2uB,GAAI,wCAoFZ,OApFY,0CAMb,WACI,IAAM9tB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKuvB,gBAAgB/tB,EACzB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwvB,cAAcxoB,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKyvB,aAAazoB,EAAQqF,KAAK7K,KAC/B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK0vB,iBAAiBrjB,KAAK7K,KAEzC,GACA,gBAuBA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2vB,QAAQ3oB,EAAQqF,KAAK7K,KAC1B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBApGD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOmd,EAAKld,WAE/B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4vB,gBAAgBlpB,EAAME,GACrC,OAAO0oB,EAAK/oB,OAAO5F,EACvB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK6vB,eAAenpB,EAAME,GACpC,OAAO0oB,EAAK/oB,OAAO5F,EACvB,GACA,iBAIA,SAAWwH,GACP,IAAIzB,EAAOf,EAAkBwC,EAAMnI,EAAK2G,mBACpCC,EAAO/E,EACPlB,EAAMX,EAAK8vB,SAASppB,EAAME,GAC9B,OAAO0oB,EAAK/oB,OAAO5F,EACvB,KAAC,EApFY,GAwGJ8qB,GAAY,wCAyCpB,OAzCoB,0CAMrB,WACI,IAAMjqB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+vB,wBAAwBvuB,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKod,4BAA4BpW,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IACA,qBA/BA,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOsZ,EAAarZ,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKgwB,wBAAwBtpB,EAAME,GAC7C,OAAO6kB,EAAallB,OAAO5F,EAC/B,KAAC,EAzCoB,GA4CZsvB,GAAO,wCAgGf,OAhGe,0CAMhB,WACI,IAAMzuB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKkwB,mBAAmB1uB,EAC5B,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8d,EAAQ7d,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKmwB,mBAAmBzpB,EAAME,GACxC,OAAOqpB,EAAQ1pB,OAAO5F,EAC1B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKowB,oBAAoB1pB,EAAME,GACzC,OAAOqpB,EAAQ1pB,OAAO5F,EAC1B,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKqwB,iBAAiB3pB,EAAME,GACtC,OAAOqpB,EAAQ1pB,OAAO5F,EAC1B,KAAC,EAhGe,GAmGPgiB,GAAQ,wCAuDhB,OAvDgB,0CAMjB,WACI,IAAMnhB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKswB,oBAAoB9uB,EAC7B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuwB,kBAAkBvpB,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBA2BA,WAEI,OADUjH,EAAKwwB,cAAcnkB,KAAK7K,OACnB,CACnB,IAAC,qBA7DD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOwQ,EAASvQ,WAEnC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKywB,oBAAoB/pB,EAAME,GACzC,OAAO+b,EAASpc,OAAO5F,EAC3B,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAK0wB,yBACf,OAAO/N,EAASpc,OAAO5F,EAC3B,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAK2wB,yBACf,OAAOhO,EAASpc,OAAO5F,EAC3B,KAAC,EAvDgB,GAiERoiB,GAAS,wCAqBjB,OArBiB,0CAMlB,WACI,IAAMvhB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4wB,qBAAqBpvB,EAC9B,GACA,iBAUA,WAEI,OADUxB,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK6wB,cAAcxkB,KAAK7K,IAAKgS,GACvC,OAAOmP,GAASpc,OAAO5F,EAC3B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMiP,IACnB,IAAIjc,EAAOgN,EAAKlS,IAChBkS,EAAKlS,IAAM,EACXxB,EAAK8wB,cAAczkB,KAAK7K,IAAKkF,EACjC,IAAC,qBA5CD,SAAclF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO4Q,EAAU3Q,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK+wB,gBACf,OAAOhO,EAAUxc,OAAO5F,EAC5B,KAAC,EArBiB,GAgDT2I,GAAwB,wCAwBhC,OAxBgC,0CAMjC,WACI,IAAM9H,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgxB,oCAAoCxvB,EAC7C,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKixB,kCAAkCjqB,EAAQqF,KAAK7K,KACpD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAGA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkxB,mCAAmClqB,EAAQqF,KAAK7K,KACrD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAzDD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO7I,EAAyB8I,WAEnD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKmxB,oCAAoCzqB,EAAME,GACzD,OAAO0C,EAAyB/C,OAAO5F,EAC3C,KAAC,EAxBgC,GA6DxByF,GAAS,wCAuCjB,OAvCiB,0CAMlB,WACI,IAAM5E,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKoxB,qBAAqB5vB,EAC9B,GACA,sBAGA,WACI,IAAIb,EAAMX,EAAKqxB,mBAAmBhlB,KAAK7K,KACvC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKsxB,sBAAsBjlB,KAAK7K,KAC1C,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBA5BA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO/L,EAAUgM,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBA6BD,SAAW2vB,EAAaC,GACpB5rB,EAAa2rB,EAAajrB,IAC1BV,EAAa4rB,EAAUlrB,IACvB,IAAI3F,EAAMX,EAAKyxB,cAAcF,EAAY/vB,IAAKgwB,EAAShwB,KACvD,OAAO4E,EAAUG,OAAO5F,EAC5B,KAAC,EAvCiB,GA0CT+wB,GAAqB,wCAiF7B,OAjF6B,0CAM9B,WACI,IAAMlwB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2xB,iCAAiCnwB,EAC1C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4xB,+BAA+B5qB,EAAQqF,KAAK7K,KACjD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6xB,8BAA8B7qB,EAAQqF,KAAK7K,KAChD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK8xB,kCAAkCzlB,KAAK7K,KAE1D,GACA,iBAoBA,WAEI,OADUxB,EAAKwW,qBAAqBnK,KAAK7K,OAC1B,CACnB,GACA,oBAKA,SAAOuwB,EAAMC,GACTpsB,EAAamsB,EAAM9a,IACnBrR,EAAaosB,EAAOpjB,IACpB,IAAIjO,EAAMX,EAAKiyB,6BAA6B5lB,KAAK7K,IAAKuwB,EAAKvwB,IAAKwwB,EAAMxwB,KACtE,OAAe,IAARb,OAAYP,EAAYwO,GAAIrI,OAAO5F,EAC9C,GACA,iBAIA,SAAIoxB,GACAnsB,EAAamsB,EAAM9a,IACnB,IAAItW,EAAMX,EAAKkyB,0BAA0B7lB,KAAK7K,IAAKuwB,EAAKvwB,KACxD,OAAe,IAARb,OAAYP,EAAYwO,GAAIrI,OAAO5F,EAC9C,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKmyB,2BAA2B9lB,KAAK7K,KAC/C,OAAO4wB,GAAiB7rB,OAAO5F,EACnC,IAAC,qBAlHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOuf,EAAsBtf,WAEhD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKqyB,iCAAiC3rB,EAAME,GACtD,OAAO8qB,EAAsBnrB,OAAO5F,EACxC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKsyB,gCAAgC5rB,EAAME,GACrD,OAAO8qB,EAAsBnrB,OAAO5F,EACxC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK8W,uBACf,OAAO4a,EAAsBnrB,OAAO5F,EACxC,KAAC,EAjF6B,GAsHrBgO,GAAY,wCAgDpB,OAhDoB,0CAMrB,WACI,IAAMnN,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKuyB,wBAAwB/wB,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwyB,sBAAsBxrB,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKyyB,iBAAiBpmB,KAAK7K,OACtB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK0yB,iBAAiBrmB,KAAK7K,IAAKgS,GAC1C,OAAO3M,GAAqBN,OAAO5F,EACvC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM7M,IACnB7G,EAAK2yB,iBAAiBtmB,KAAK7K,IAAKkS,EAAKlS,IACzC,IAAC,qBArED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOxD,EAAayD,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4yB,wBAAwBlsB,EAAME,GAC7C,OAAO+H,EAAapI,OAAO5F,EAC/B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK6yB,mBACf,OAAOlkB,EAAapI,OAAO5F,EAC/B,KAAC,EAhDoB,GAyEZ+N,GAAW,wCAgDnB,OAhDmB,0CAMpB,WACI,IAAMlN,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8yB,uBAAuBtxB,EAChC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+yB,qBAAqB/rB,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKyoB,+BAA+Bpc,KAAK7K,OACpC,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKtC,IAClBjB,EAAawO,EAAOvN,IACpB,IAAIlG,EAAMX,EAAKgzB,mBAAmB3mB,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KAC3D,OAAe,IAARb,OAAYP,EAAYyG,GAAqBN,OAAO5F,EAC/D,GACA,wBAKA,SAAWwI,EAAKiL,GACZ,IAAI1N,EAAOjE,EAAkB0G,EAAKnJ,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACX+D,EAAawO,EAAOvN,IACpB,IAAIlG,EAAMX,EAAKizB,uBAAuB5mB,KAAK7K,IAAKkF,EAAME,EAAMwN,EAAM5S,KAClE,OAAe,IAARb,OAAYP,EAAYyG,GAAqBN,OAAO5F,EAC/D,GACA,wBAKA,SAAWwI,EAAKiL,GACZxO,EAAawO,EAAOvN,IACpB,IAAIlG,EAAMX,EAAKkzB,uBAAuB7mB,KAAK7K,IAAK2H,EAAKiL,EAAM5S,KAC3D,OAAe,IAARb,OAAYP,EAAYyG,GAAqBN,OAAO5F,EAC/D,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKtC,IAClB,IAAIlG,EAAMX,EAAKmzB,gBAAgB9mB,KAAK7K,IAAK2H,EAAI3H,KAC7C,OAAOqF,GAAqBN,OAAO5F,EACvC,GACA,qBAIA,SAAQwI,GACJ,IAAIzC,EAAOjE,EAAkB0G,EAAKnJ,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKozB,oBAAoB/mB,KAAK7K,IAAKkF,EAAME,GACnD,OAAOC,GAAqBN,OAAO5F,EACvC,GACA,qBAIA,SAAQwI,GACJ,IAAIxI,EAAMX,EAAKqzB,oBAAoBhnB,KAAK7K,IAAK2H,GAC7C,OAAOtC,GAAqBN,OAAO5F,EACvC,GACA,iBAIA,SAAIwI,GAGA,OAFAvD,EAAauD,EAAKtC,IAEH,IADL7G,EAAKszB,gBAAgBjnB,KAAK7K,IAAK2H,EAAI3H,IAEjD,GACA,kBAGA,WACI,IAAIb,EAAMX,EAAKuzB,iBAAiBlnB,KAAK7K,KACrC,OAAOmN,GAAapI,OAAO5F,EAC/B,IAAC,qBAlID,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOzD,EAAY0D,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwzB,uBAAuB9sB,EAAME,GAC5C,OAAO8H,EAAYnI,OAAO5F,EAC9B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKgpB,iCACf,OAAOta,EAAYnI,OAAO5F,EAC9B,KAAC,EAhDmB,GAsIX4P,GAAI,wCA4FZ,OA5FY,0CAMb,WACI,IAAM/O,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKyzB,gBAAgBjyB,EACzB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0zB,cAAc1sB,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2zB,aAAa3sB,EAAQqF,KAAK7K,KAC/B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK4zB,iBAAiBvnB,KAAK7K,KAEzC,GACA,iBA+BA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAK0qB,IAClBjuB,EAAawO,EAAO0f,IACpB,IAAInzB,EAAMX,EAAK+zB,YAAY1nB,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KACpD,OAAe,IAARb,OAAYP,EAAY0zB,GAAWvtB,OAAO5F,EACrD,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAK0qB,IAClB,IAAIlzB,EAAMX,EAAKg0B,SAAS3nB,KAAK7K,IAAK2H,EAAI3H,KACtC,OAAe,IAARb,OAAYP,EAAY0zB,GAAWvtB,OAAO5F,EACrD,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKi0B,UAAU5nB,KAAK7K,KAC9B,OAAO0yB,GAAa3tB,OAAO5F,EAC/B,GACA,oCAIA,WACI,IAAIA,EAAMX,EAAKm0B,4BAA4B9nB,KAAK7K,KAChD,OAAO4yB,GAAW7tB,OAAO5F,EAC7B,GACA,oCAIA,WACI,IAAIA,EAAMX,EAAKq0B,4BAA4BhoB,KAAK7K,KAChD,OAAO4yB,GAAW7tB,OAAO5F,EAC7B,IAAC,qBA7ID,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO5B,EAAK6B,WAE/B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKs0B,gBAAgB5tB,EAAME,GACrC,OAAO2J,EAAKhK,OAAO5F,EACvB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKu0B,eAAe7tB,EAAME,GACpC,OAAO2J,EAAKhK,OAAO5F,EACvB,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK0U,aACf,OAAOnE,EAAKhK,OAAO5F,EACvB,GACA,4BAKA,SAAsBwI,EAAKiL,GACvBxO,EAAauD,EAAK0qB,IAClBjuB,EAAawO,EAAO0f,IACpB,IAAInzB,EAAMX,EAAKw0B,oBAAoBrrB,EAAI3H,IAAK4S,EAAM5S,KAClD,OAAO+O,EAAKhK,OAAO5F,EACvB,KAAC,EA5FY,GAiJJmzB,GAAU,wCAkClB,OAlCkB,0CAMnB,WACI,IAAMtyB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKy0B,sBAAsBjzB,EAC/B,GACA,iBAuBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKsJ,IAClB7M,EAAawO,EAAOxF,IACpB,IAAIlI,EAAO0N,EAAM5S,IACjB4S,EAAM5S,IAAM,EACZ,IAAIb,EAAMX,EAAK00B,kBAAkBroB,KAAK7K,IAAK2H,EAAI3H,IAAKkF,GACpD,OAAe,IAAR/F,OAAYP,EAAYwO,GAAIrI,OAAO5F,EAC9C,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKsJ,IAClB,IAAI9R,EAAMX,EAAK20B,eAAetoB,KAAK7K,IAAK2H,EAAI3H,KAC5C,OAAe,IAARb,OAAYP,EAAYwO,GAAIrI,OAAO5F,EAC9C,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK40B,gBAAgBvoB,KAAK7K,KACpC,OAAO0R,GAAW3M,OAAO5F,EAC7B,IAAC,qBArED,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO2hB,EAAW1hB,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK0U,aACf,OAAOof,EAAWvtB,OAAO5F,EAC7B,GACA,4BAKA,SAAsBwI,EAAKiL,GACvBxO,EAAauD,EAAKsJ,IAClB7M,EAAawO,EAAOxF,IACpB,IAAIlI,EAAO0N,EAAM5S,IACjB4S,EAAM5S,IAAM,EACZ,IAAIb,EAAMX,EAAK60B,0BAA0B1rB,EAAI3H,IAAKkF,GAClD,OAAOotB,EAAWvtB,OAAO5F,EAC7B,KAAC,EAlCkB,GAyEVm0B,GAAuB,wCA8F/B,OA9F+B,0CAMhC,WACI,IAAMtzB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+0B,mCAAmCvzB,EAC5C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKg1B,iCAAiChuB,EAAQqF,KAAK7K,KACnD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKi1B,gCAAgCjuB,EAAQqF,KAAK7K,KAClD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKk1B,oCAAoC7oB,KAAK7K,KAE5D,GACA,iBAiCA,WAEI,OADUxB,EAAKm1B,4BAA4B9oB,KAAK7K,OACjC,CACnB,GACA,kBAGA,WAEI,OADUxB,EAAKo1B,6BAA6B/oB,KAAK7K,OAClC,CACnB,GACA,6BAGA,WACI,IAAIb,EAAMX,EAAKq1B,wCAAwChpB,KAAK7K,KAC5D,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,+BAGA,WACI,IAAIA,EAAMX,EAAKs1B,0CAA0CjpB,KAAK7K,KAC9D,OAAe,IAARb,OAAYP,EAAYsxB,GAAsBnrB,OAAO5F,EAChE,IAAC,qBAzHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO2iB,EAAwB1iB,WAElD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKu1B,mCAAmC7uB,EAAME,GACxD,OAAOkuB,EAAwBvuB,OAAO5F,EAC1C,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKw1B,kCAAkC9uB,EAAME,GACvD,OAAOkuB,EAAwBvuB,OAAO5F,EAC1C,GACA,8BAKA,SAAwB80B,EAAKC,GACzB9vB,EAAa8vB,EAAQpvB,IACrB,IAAI3F,EAAMX,EAAK21B,yCAAyCF,EAAKC,EAAOl0B,KACpE,OAAOszB,EAAwBvuB,OAAO5F,EAC1C,GACA,gCAKA,SAA0B80B,EAAKG,GAC3BhwB,EAAagwB,EAASlE,IACtB,IAAI/wB,EAAMX,EAAK61B,2CAA2CJ,EAAKG,EAAQp0B,KACvE,OAAOszB,EAAwBvuB,OAAO5F,EAC1C,KAAC,EA9F+B,GA6HvByM,GAA4B,wCA0FpC,OA1FoC,0CAMrC,WACI,IAAM5L,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK81B,wCAAwCt0B,EACjD,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+1B,sCAAsC/uB,EAAQqF,KAAK7K,KACxD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKg2B,qCAAqChvB,EAAQqF,KAAK7K,KACvD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKi2B,yCAAyC5pB,KAAK7K,KAEjE,GACA,uCAaA,WACI,IAAIb,EAAMX,EAAKk2B,uDAAuD7pB,KAAK7K,KAC3E,OAAOszB,GAAwBvuB,OAAO5F,EAC1C,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO/E,EAA6BgF,WAEvD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKm2B,wCAAwCzvB,EAAME,GAC7D,OAAOwG,EAA6B7G,OAAO5F,EAC/C,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKo2B,uCAAuC1vB,EAAME,GAC5D,OAAOwG,EAA6B7G,OAAO5F,EAC/C,GAAC,iBAYD,SAAW01B,GACPzwB,EAAaywB,EAA2BvB,IACxC,IAAIn0B,EAAMX,EAAKs2B,iCAAiCD,EAA0B70B,KAC1E,OAAO4L,EAA6B7G,OAAO5F,EAC/C,KAAC,EA1FoC,GA6F5ByzB,GAAU,wCAiFlB,OAjFkB,0CAMnB,WACI,IAAM5yB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKu2B,sBAAsB/0B,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKw2B,oBAAoBxvB,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKy2B,mBAAmBzvB,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK02B,uBAAuBrqB,KAAK7K,KAE/C,GACA,iBAqBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,oBAMA,SAAOm1B,EAAWC,GACdhxB,EAAa+wB,EAAW9C,IACxBjuB,EAAagxB,EAAQ7iB,IACrB,IAAIpT,EAAMX,EAAK62B,kBAAkBxqB,KAAK7K,IAAKm1B,EAAUn1B,IAAKo1B,EAAOp1B,KACjE,OAAe,IAARb,OAAYP,EAAY2T,GAAOxN,OAAO5F,EACjD,GACA,iBAKA,SAAIg2B,GACA/wB,EAAa+wB,EAAW9C,IACxB,IAAIlzB,EAAMX,EAAK82B,eAAezqB,KAAK7K,IAAKm1B,EAAUn1B,KAClD,OAAe,IAARb,OAAYP,EAAY2T,GAAOxN,OAAO5F,EACjD,GACA,uBAQA,SAAUg2B,EAAWI,EAAY3iB,GAC7BxO,EAAa+wB,EAAW9C,IACxBjuB,EAAamxB,EAAYtkB,IACzB7M,EAAawO,EAAO9N,IACpB,IAAII,EAAO0N,EAAM5S,IACjB4S,EAAM5S,IAAM,EACZ,IAAIb,EAAMX,EAAKg3B,qBAAqB3qB,KAAK7K,IAAKm1B,EAAUn1B,IAAKu1B,EAAWv1B,IAAKkF,GAC7E,OAAe,IAAR/F,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,uBAOA,SAAUg2B,EAAWI,GACjBnxB,EAAa+wB,EAAW9C,IACxBjuB,EAAamxB,EAAYtkB,IACzB,IAAI9R,EAAMX,EAAKi3B,qBAAqB5qB,KAAK7K,IAAKm1B,EAAUn1B,IAAKu1B,EAAWv1B,KACxE,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,kBAIA,WACI,IAAIA,EAAMX,EAAKk3B,gBAAgB7qB,KAAK7K,KACpC,OAAO0yB,GAAa3tB,OAAO5F,EAC/B,GACA,iBAMA,SAAIw2B,GACAvxB,EAAauxB,EAAQ/C,GACrB,IAAIzzB,EAAMX,EAAKo3B,eAAe/qB,KAAK7K,IAAK21B,EAAO31B,KAC/C,OAAO4yB,EAAW7tB,OAAO5F,EAC7B,IAAC,qBA/JD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOiiB,EAAWhiB,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKq3B,sBAAsB3wB,EAAME,GAC3C,OAAOwtB,EAAW7tB,OAAO5F,EAC7B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKs3B,qBAAqB5wB,EAAME,GAC1C,OAAOwtB,EAAW7tB,OAAO5F,EAC7B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK0U,aACf,OAAO0f,EAAW7tB,OAAO5F,EAC7B,KAAC,EAjFkB,GAmKVmN,GAAa,wCA0FrB,OA1FqB,0CAMtB,WACI,IAAMtM,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKu3B,yBAAyB/1B,EAClC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKw3B,uBAAuBxwB,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKy3B,sBAAsBzwB,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK03B,0BAA0BrrB,KAAK7K,KAElD,GACA,sBAaA,WACI,IAAIb,EAAMX,EAAK23B,uBAAuBtrB,KAAK7K,KAC3C,OAAOiiB,GAAald,OAAO5F,EAC/B,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOrE,EAAcsE,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK43B,yBAAyBlxB,EAAME,GAC9C,OAAOkH,EAAcvH,OAAO5F,EAChC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK63B,wBAAwBnxB,EAAME,GAC7C,OAAOkH,EAAcvH,OAAO5F,EAChC,GAAC,iBAYD,SAAW4iB,GACP3d,EAAa2d,EAAUE,IACvB,IAAI9iB,EAAMX,EAAK83B,kBAAkBvU,EAAS/hB,KAC1C,OAAOsM,EAAcvH,OAAO5F,EAChC,KAAC,EA1FqB,GA6FboL,GAAY,wCAwIpB,OAxIoB,0CAMrB,WACI,IAAMvK,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+3B,wBAAwBv2B,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKg4B,sBAAsBhxB,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKi4B,qBAAqBjxB,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKk4B,yBAAyB7rB,KAAK7K,KAEjD,GACA,kBAcA,SAAK22B,GACD,IAAIx3B,EAAMX,EAAKo4B,kBAAkB/rB,KAAK7K,IAAK22B,GAC3C,OAAOtE,GAAWttB,OAAO5F,EAC7B,GACA,kBAyDA,WAEI,OADUX,EAAKq4B,kBAAkBhsB,KAAK7K,OACvB,CACnB,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAKs4B,8BAA8BjsB,KAAK7K,KAClD,OAAe,IAARb,OAAYP,EAAY4N,GAAazH,OAAO5F,EACvD,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAKu4B,2BAA2BlsB,KAAK7K,KAC/C,OAAe,IAARb,OAAYP,EAAY6N,GAAU1H,OAAO5F,EACpD,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAKw4B,2BAA2BnsB,KAAK7K,KAC/C,OAAe,IAARb,OAAYP,EAAY8N,GAAU3H,OAAO5F,EACpD,GACA,8BAGA,WACI,IAAIA,EAAMX,EAAKy4B,8BAA8BpsB,KAAK7K,KAClD,OAAe,IAARb,OAAYP,EAAY+N,GAAW5H,OAAO5F,EACrD,GACA,+BAGA,WACI,IAAIA,EAAMX,EAAK04B,+BAA+BrsB,KAAK7K,KACnD,OAAe,IAARb,OAAYP,EAAYgO,GAAc7H,OAAO5F,EACxD,GACA,gCAGA,WACI,IAAIA,EAAMX,EAAK24B,gCAAgCtsB,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAYiO,GAAe9H,OAAO5F,EACzD,GACA,kCAMA,WACI,IAAIA,EAAMX,EAAK44B,kCAAkCvsB,KAAK7K,KACtD,OAAOukB,GAAiBxf,OAAO5F,EACnC,GACA,oBAMA,SAAOk4B,EAAaC,EAAaC,GAC7B,IAAIryB,EAAO,EACNtD,EAAWy1B,KACZjzB,EAAaizB,EAAavyB,IAC1BI,EAAOmyB,EAAYr3B,IACnBq3B,EAAYr3B,IAAM,GAEtB,IAAI4G,EAAO,EAQX,OAPKhF,EAAW01B,KACZlzB,EAAakzB,EAAaxyB,IAC1B8B,EAAO0wB,EAAYt3B,IACnBs3B,EAAYt3B,IAAM,GAEtBoE,EAAamzB,EAAYhT,IAEV,IADL/lB,EAAKg5B,oBAAoB3sB,KAAK7K,IAAKkF,EAAM0B,EAAM2wB,EAAWv3B,IAExE,IAAC,qBAzND,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOpG,EAAaqG,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKi5B,wBAAwBvyB,EAAME,GAC7C,OAAOmF,EAAaxF,OAAO5F,EAC/B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKk5B,uBAAuBxyB,EAAME,GAC5C,OAAOmF,EAAaxF,OAAO5F,EAC/B,GAAC,+BAaD,SAAyBw4B,GACrBvzB,EAAauzB,EAAenrB,IAC5B,IAAIrN,EAAMX,EAAKo5B,+BAA+BD,EAAc33B,KAC5D,OAAOuK,EAAaxF,OAAO5F,EAC/B,GACA,4BAIA,SAAsB04B,GAClBzzB,EAAayzB,EAAYprB,IACzB,IAAItN,EAAMX,EAAKs5B,4BAA4BD,EAAW73B,KACtD,OAAOuK,EAAaxF,OAAO5F,EAC/B,GACA,4BAIA,SAAsB44B,GAClB3zB,EAAa2zB,EAAYrrB,IACzB,IAAIvN,EAAMX,EAAKw5B,4BAA4BD,EAAW/3B,KACtD,OAAOuK,EAAaxF,OAAO5F,EAC/B,GACA,+BAIA,SAAyB84B,GACrB7zB,EAAa6zB,EAAetrB,IAC5B,IAAIxN,EAAMX,EAAK05B,+BAA+BD,EAAcj4B,KAC5D,OAAOuK,EAAaxF,OAAO5F,EAC/B,GACA,gCAIA,SAA0Bg5B,GACtB/zB,EAAa+zB,EAAgBvrB,IAC7B,IAAIzN,EAAMX,EAAK45B,gCAAgCD,EAAen4B,KAC9D,OAAOuK,EAAaxF,OAAO5F,EAC/B,GACA,iCAIA,SAA2Bk5B,GACvBj0B,EAAai0B,EAAiBxrB,IAC9B,IAAI1N,EAAMX,EAAK85B,iCAAiCD,EAAgBr4B,KAChE,OAAOuK,EAAaxF,OAAO5F,EAC/B,KAAC,EAxIoB,GA6NZwU,GAAa,wCAqBrB,OArBqB,0CAMtB,WACI,IAAM3T,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+5B,yBAAyBv4B,EAClC,GACA,iBAUA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKg6B,kBAAkB3tB,KAAK7K,IAAKgS,GAC3C,OAAOzH,GAAaxF,OAAO5F,EAC/B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM3H,IACnB/L,EAAKi6B,kBAAkB5tB,KAAK7K,IAAKkS,EAAKlS,IAC1C,IAAC,qBA1CD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOgD,EAAc/C,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAKshB,mBACf,OAAOnM,EAAc5O,OAAO5F,EAChC,KAAC,EArBqB,GA8Cbu5B,GAAS,wCAwFjB,OAxFiB,0CAMlB,WACI,IAAM14B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKm6B,qBAAqB34B,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKo6B,mBAAmBpzB,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKq6B,kBAAkBrzB,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKs6B,sBAAsBjuB,KAAK7K,KAE9C,GACA,kBA2BA,WAEI,OADUxB,EAAKu6B,eAAeluB,KAAK7K,OACpB,CACnB,IAAC,qBA9FD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO+nB,EAAU9nB,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKw6B,qBAAqB9zB,EAAME,GAC1C,OAAOszB,EAAU3zB,OAAO5F,EAC5B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKy6B,oBAAoB/zB,EAAME,GACzC,OAAOszB,EAAU3zB,OAAO5F,EAC5B,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAK06B,oBACf,OAAOR,EAAU3zB,OAAO5F,EAC5B,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAK26B,oBACf,OAAOT,EAAU3zB,OAAO5F,EAC5B,KAAC,EAxFiB,GAkGTi6B,GAAW,wCAmDnB,OAnDmB,0CAMpB,WACI,IAAMp5B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK66B,uBAAuBr5B,EAChC,GACA,wBAYA,WAEI,OADUxB,EAAK86B,uBAAuBzuB,KAAK7K,IAE/C,GACA,4BAGA,WAEI,OADUxB,EAAK+6B,2BAA2B1uB,KAAK7K,OAChC,CACnB,IACA,qBArCA,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOyoB,EAAYxoB,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAeD,SAAWo5B,EAAYnc,GACnB,IAAIle,EAAMX,EAAKi7B,gBAAgBD,EAAYnc,GAC3C,OAAO+b,EAAYr0B,OAAO5F,EAC9B,GAAC,qBAkBD,WACI,IAAIA,EAAMX,EAAKk7B,sBACf,OAAON,EAAYr0B,OAAO5F,EAC9B,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAKm7B,sBACf,OAAOP,EAAYr0B,OAAO5F,EAC9B,KAAC,EAnDmB,GAsDXy6B,GAAK,wCA0Db,OA1Da,0CAMd,WACI,IAAM55B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKq7B,iBAAiB75B,EAC1B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKs7B,eAAet0B,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,sBA8BA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKu7B,eAAev0B,EAAQqF,KAAK7K,KACjC,IAEI4F,EAFAF,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GAMxC,OAJW,IAAPE,IACAE,EAAK1B,EAAoBwB,EAAIC,GAAInE,QACjChD,EAAKqH,gBAAgBH,EAAS,EAALC,IAEtBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBA7ED,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOipB,EAAMhpB,WAEhC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKw7B,iBAAiB90B,EAAME,GACtC,OAAOw0B,EAAM70B,OAAO5F,EACxB,GACA,0BAGA,WACI,IAAIA,EAAMX,EAAKy7B,qBACf,OAAOL,EAAM70B,OAAO5F,EACxB,GACA,2BAIA,SAAqB+6B,GACjB,IAAIh1B,EAAOf,EAAkB+1B,EAAM17B,EAAK2G,mBACpCC,EAAO/E,EACPlB,EAAMX,EAAK27B,oBAAoBj1B,EAAME,GACzC,OAAOw0B,EAAM70B,OAAO5F,EACxB,KAAC,EA1Da,GAiFLosB,GAAe,wCAmHvB,OAnHuB,0CAMxB,WACI,IAAMvrB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK47B,2BAA2Bp6B,EACpC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK67B,yBAAyB70B,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK87B,wBAAwB90B,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+7B,4BAA4B1vB,KAAK7K,KAEpD,GACA,sBAaA,WACI,IAAIb,EAAMX,EAAKg8B,yBAAyB3vB,KAAK7K,KAC7C,OAAOyuB,GAAQ1pB,OAAO5F,EAC1B,GACA,6BAGA,WAEI,OADUX,EAAKi8B,gCAAgC5vB,KAAK7K,OACrC,CACnB,GACA,wBAGA,WAEI,OADUxB,EAAKk8B,2BAA2B7vB,KAAK7K,OAChC,CACnB,GACA,mBAGA,WACI,IAAIb,EAAMX,EAAKm8B,sBAAsB9vB,KAAK7K,KAC1C,OAAO2b,GAAiB5W,OAAO5F,EACnC,IACA,qBAtGA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO4a,EAAgB3a,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKo8B,2BAA2B11B,EAAME,GAChD,OAAOmmB,EAAgBxmB,OAAO5F,EAClC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKq8B,0BAA0B31B,EAAME,GAC/C,OAAOmmB,EAAgBxmB,OAAO5F,EAClC,GAAC,iBAoCD,SAAW27B,EAAUC,EAAiBC,EAAYC,GAC9C72B,EAAa02B,EAAUrM,IACvBrqB,EAAa62B,EAAOtf,IACpB,IAAIxc,EAAMX,EAAK08B,oBAAoBJ,EAAS96B,IAAK+6B,EAAiBC,EAAYC,EAAMj7B,KACpF,OAAOurB,EAAgBxmB,OAAO5F,EAClC,KAAC,EAnHuB,GAsHf4J,GAAU,wCAuFlB,OAvFkB,0CAMnB,WACI,IAAM/I,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK28B,sBAAsBn7B,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK48B,oBAAoB51B,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBA2DA,WAEI,OADUjH,EAAK68B,gBAAgBxwB,KAAK7K,OACrB,CACnB,GACA,mCAGA,WACI,IAAIb,EAAMX,EAAK88B,iCAAiCzwB,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAY6P,GAAiB1J,OAAO5F,EAC3D,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAK+8B,kBAAkB1wB,KAAK7K,KACtC,OAAe,IAARb,OAAYP,EAAY48B,GAAUz2B,OAAO5F,EACpD,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAKi9B,mBAAmB5wB,KAAK7K,KACvC,OAAe,IAARb,OAAYP,EAAY0I,GAAWvC,OAAO5F,EACrD,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKk9B,sBAAsB7wB,KAAK7K,KAC1C,OAAe,IAARb,OAAYP,EAAYoX,GAAOjR,OAAO5F,EACjD,GACA,sBAGA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKm9B,oBAAoBn2B,EAAQqF,KAAK7K,KACtC,IAEI4F,EAFAF,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GAMxC,OAJW,IAAPE,IACAE,EAAK1B,EAAoBwB,EAAIC,GAAInE,QACjChD,EAAKqH,gBAAgBH,EAAS,EAALC,IAEtBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBA7ID,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO5H,EAAW6H,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKo9B,sBAAsB12B,EAAME,GAC3C,OAAO2D,EAAWhE,OAAO5F,EAC7B,GACA,oCAIA,SAA8B08B,GAC1Bz3B,EAAay3B,EAAoBptB,IACjC,IAAItP,EAAMX,EAAKs9B,kCAAkCD,EAAmB77B,KACpE,OAAO+I,EAAWhE,OAAO5F,EAC7B,GACA,qBAIA,SAAe48B,GACX33B,EAAa23B,EAAKP,IAClB,IAAIr8B,EAAMX,EAAKw9B,mBAAmBD,EAAI/7B,KACtC,OAAO+I,EAAWhE,OAAO5F,EAC7B,GACA,sBAIA,SAAgB88B,GACZ73B,EAAa63B,EAAM30B,IACnB,IAAInI,EAAMX,EAAK09B,oBAAoBD,EAAKj8B,KACxC,OAAO+I,EAAWhE,OAAO5F,EAC7B,GACA,yBAIA,SAAmBg9B,GACf/3B,EAAa+3B,EAASnmB,IACtB,IAAI7W,EAAMX,EAAK49B,uBAAuBD,EAAQn8B,KAC9C,OAAO+I,EAAWhE,OAAO5F,EAC7B,GACA,uBAIA,SAAiB8F,GACb,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK69B,qBAAqBn3B,EAAME,GAC1C,OAAO2D,EAAWhE,OAAO5F,EAC7B,KAAC,EAvFkB,GAiJVmI,GAAU,wCAgDlB,OAhDkB,0CAMnB,WACI,IAAMtH,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK89B,sBAAsBt8B,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+9B,oBAAoB/2B,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKg+B,eAAe3xB,KAAK7K,IAAKgS,GACxC,OAAOjJ,GAAWhE,OAAO5F,EAC7B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMnJ,IACnBvK,EAAKi+B,eAAe5xB,KAAK7K,IAAKkS,EAAKlS,IACvC,IAAC,qBArED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOrJ,EAAWsJ,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKk+B,sBAAsBx3B,EAAME,GAC3C,OAAOkC,EAAWvC,OAAO5F,EAC7B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKm+B,iBACf,OAAOr1B,EAAWvC,OAAO5F,EAC7B,KAAC,EAhDkB,GAyEVq8B,GAAS,wCAgDjB,OAhDiB,0CAMlB,WACI,IAAMx7B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKo+B,qBAAqB58B,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKq+B,mBAAmBr3B,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKoB,IAClB3E,EAAawO,EAAO7J,IACpB,IAAI5J,EAAMX,EAAKs+B,iBAAiBjyB,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KACzD,OAAe,IAARb,OAAYP,EAAYmK,GAAWhE,OAAO5F,EACrD,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKoB,IAClB,IAAI5J,EAAMX,EAAKu+B,cAAclyB,KAAK7K,IAAK2H,EAAI3H,KAC3C,OAAe,IAARb,OAAYP,EAAYmK,GAAWhE,OAAO5F,EACrD,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKw+B,eAAenyB,KAAK7K,KACnC,OAAOsH,GAAWvC,OAAO5F,EAC7B,IAAC,qBAjFD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO6qB,EAAU5qB,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKy+B,qBAAqB/3B,EAAME,GAC1C,OAAOo2B,EAAUz2B,OAAO5F,EAC5B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK0+B,gBACf,OAAO1B,EAAUz2B,OAAO5F,EAC5B,KAAC,EAhDiB,GAqFToI,GAAY,wCA+DpB,OA/DoB,0CAMrB,WACI,IAAMvH,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2+B,wBAAwBn9B,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4+B,sBAAsB53B,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBAcA,SAAKkxB,GACD,IAAIx3B,EAAMX,EAAK6+B,kBAAkBxyB,KAAK7K,IAAK22B,GAC3C,OAAOtE,GAAWttB,OAAO5F,EAC7B,GACA,mBAoBA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8+B,mBAAmB93B,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAlFD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOpJ,EAAaqJ,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK++B,wBAAwBr4B,EAAME,GAC7C,OAAOmC,EAAaxC,OAAO5F,EAC/B,GAAC,iBAiBD,SAAW8F,GACP,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKg/B,iBAAiBt4B,EAAME,GACtC,OAAOmC,EAAaxC,OAAO5F,EAC/B,KAAC,EA/DoB,GAsFZ4U,GAAa,wCAgDrB,OAhDqB,0CAMtB,WACI,IAAM/T,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKi/B,yBAAyBz9B,EAClC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKk/B,uBAAuBl4B,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKm/B,kBAAkB9yB,KAAK7K,IAAKgS,GAC3C,OAAOzK,GAAaxC,OAAO5F,EAC/B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM3K,IACnB/I,EAAKo/B,kBAAkB/yB,KAAK7K,IAAKkS,EAAKlS,IAC1C,IAAC,qBArED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOoD,EAAcnD,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKq/B,yBAAyB34B,EAAME,GAC9C,OAAO2O,EAAchP,OAAO5F,EAChC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKs/B,oBACf,OAAO/pB,EAAchP,OAAO5F,EAChC,KAAC,EAhDqB,GAyEb6O,GAAa,wCA6DrB,OA7DqB,0CAMtB,WACI,IAAMhO,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKu/B,yBAAyB/9B,EAClC,GACA,yBAkDA,WACI,IAAIb,EAAMX,EAAKw/B,0BAA0BnzB,KAAK7K,KAC9C,OAAe,IAARb,OAAYP,EAAYmK,GAAWhE,OAAO5F,EACrD,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAKy/B,uBAAuBpzB,KAAK7K,KAC3C,OAAO+I,GAAWhE,OAAO5F,EAC7B,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAK0/B,qBAAqBrzB,KAAK7K,KACzC,OAAe,IAARb,OAAYP,EAAY2I,GAAaxC,OAAO5F,EACvD,GACA,qBAGA,WAEI,OADUX,EAAK2/B,sBAAsBtzB,KAAK7K,OAC3B,CACnB,IAAC,qBAxFD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO3C,EAAc4C,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAiBD,SAAWg+B,EAAUt1B,EAAau1B,GAC9Bj6B,EAAag6B,EAAUr1B,IACvB,IAAI7D,EAAO,EACNtD,EAAWkH,KACZ1E,EAAa0E,EAAaC,IAC1B7D,EAAO4D,EAAY9I,IACnB8I,EAAY9I,IAAM,GAEtB,IAAI4G,EAAO,EACNhF,EAAWy8B,KACZj6B,EAAai6B,EAAQ92B,IACrBX,EAAOy3B,EAAOr+B,IACdq+B,EAAOr+B,IAAM,GAEjB,IAAIb,EAAMX,EAAK8/B,kBAAkBF,EAASp+B,IAAKkF,EAAM0B,GACrD,OAAOoH,EAAcjJ,OAAO5F,EAChC,GACA,2BAMA,SAAqBi/B,EAAUt1B,EAAau1B,GACxCj6B,EAAag6B,EAAUr1B,IACvB,IAAI7D,EAAO,EACNtD,EAAWkH,KACZ1E,EAAa0E,EAAaC,IAC1B7D,EAAO4D,EAAY9I,IACnB8I,EAAY9I,IAAM,GAEtB,IAAI4G,EAAO,EACNhF,EAAWy8B,KACZj6B,EAAai6B,EAAQ92B,IACrBX,EAAOy3B,EAAOr+B,IACdq+B,EAAOr+B,IAAM,GAEjB,IAAIb,EAAMX,EAAK+/B,4BAA4BH,EAASp+B,IAAKkF,EAAM0B,GAC/D,OAAOoH,EAAcjJ,OAAO5F,EAChC,KAAC,EA7DqB,GA4Fbq/B,GAAO,wCA2Bf,OA3Be,0CAMhB,WACI,IAAMx+B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKigC,mBAAmBz+B,EAC5B,GACA,kBAgBA,WACI,IAAIb,EAAMX,EAAKkgC,aAAa7zB,KAAK7K,KACjC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAKmgC,iBAAiB9zB,KAAK7K,KACrC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKogC,mBAAmB/zB,KAAK7K,KACvC,OAAO8E,GAAOC,OAAO5F,EACzB,IAAC,qBA/CD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO6tB,EAAQ5tB,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAgBD,SAAWyrB,EAAM5W,EAAU4pB,GACvBz6B,EAAaynB,EAAM/mB,IACnBV,EAAa6Q,EAAUnQ,IACvBV,EAAay6B,EAAY/5B,IACzB,IAAI3F,EAAMX,EAAKsgC,YAAYjT,EAAK7rB,IAAKiV,EAASjV,IAAK6+B,EAAW7+B,KAC9D,OAAOw+B,EAAQz5B,OAAO5F,EAC1B,KAAC,EA3Be,GAmDPmR,GAAc,wCAwDtB,OAxDsB,0CAMvB,WACI,IAAMtQ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKugC,0BAA0B/+B,EACnC,GACA,0BAeA,WACI,IAAIb,EAAMX,EAAKwgC,4BAA4Bn0B,KAAK7K,KAChD,OAAOyV,GAAgB1Q,OAAO5F,EAClC,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAKygC,6BAA6Bp0B,KAAK7K,KACjD,OAAOw+B,GAAQz5B,OAAO5F,EAC1B,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAK0gC,0BAA0Br0B,KAAK7K,KAC9C,OAAOyP,GAAQ1K,OAAO5F,EAC1B,IACA,qBA/CA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOL,EAAeM,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAgBD,SAAWwV,EAASC,EAASC,GACzB1R,EAAayR,EAASJ,IACtBrR,EAAa0R,EAAO0oB,IACpB,IAAIr/B,EAAMX,EAAK2gC,mBAAmBvpB,EAASC,EAAQ7V,IAAK8V,EAAM9V,KAC9D,OAAOsQ,EAAevL,OAAO5F,EACjC,GAAC,0BA0BD,SAAoBuI,GAChBtD,EAAasD,EAAM+H,IACnB,IAAItQ,EAAMX,EAAK6R,mBAAmB3I,EAAK1H,KACvC,OAAe,IAARb,OAAYP,EAAY0R,EAAevL,OAAO5F,EACzD,KAAC,EAxDsB,GA2DdigC,GAAY,wCAmGpB,OAnGoB,0CAMrB,WACI,IAAMp/B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK6gC,wBAAwBr/B,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8gC,sBAAsB95B,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+gC,qBAAqB/5B,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKghC,yBAAyB30B,KAAK7K,KAEjD,GACA,iBAaA,WACI,IAAIb,EAAMX,EAAK23B,uBAAuBtrB,KAAK7K,KAC3C,OAAOy/B,GAAI16B,OAAO5F,EACtB,GACA,gCAGA,WACI,IAAIA,EAAMX,EAAKkhC,gCAAgC70B,KAAK7K,KACpD,OAAO2/B,GAAiB56B,OAAO5F,EACnC,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOyuB,EAAaxuB,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKohC,wBAAwB16B,EAAME,GAC7C,OAAOg6B,EAAar6B,OAAO5F,EAC/B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKqhC,uBAAuB36B,EAAME,GAC5C,OAAOg6B,EAAar6B,OAAO5F,EAC/B,GAAC,iBAoBD,SAAW8b,EAAK6kB,GACZ17B,EAAa6W,EAAKwkB,IAClBr7B,EAAa07B,EAAoBH,IACjC,IAAIxgC,EAAMX,EAAKuhC,iBAAiB9kB,EAAIjb,IAAK8/B,EAAmB9/B,KAC5D,OAAOo/B,EAAar6B,OAAO5F,EAC/B,KAAC,EAnGoB,GAsGZwgC,GAAgB,wCAgGxB,OAhGwB,0CAMzB,WACI,IAAM3/B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKwhC,4BAA4BhgC,EACrC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOgvB,EAAiB/uB,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKyhC,4BAA4B/6B,EAAME,GACjD,OAAOu6B,EAAiB56B,OAAO5F,EACnC,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAK0hC,6BAA6Bh7B,EAAME,GAClD,OAAOu6B,EAAiB56B,OAAO5F,EACnC,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAK2hC,0BAA0Bj7B,EAAME,GAC/C,OAAOu6B,EAAiB56B,OAAO5F,EACnC,KAAC,EAhGwB,GAmGhBihC,GAAU,wCAuKlB,OAvKkB,0CAMnB,WACI,IAAMpgC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK6hC,sBAAsBrgC,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8hC,oBAAoB96B,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+hC,mBAAmB/6B,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKgiC,uBAAuB31B,KAAK7K,KAE/C,GACA,sBAaA,WACI,IAAIb,EAAMX,EAAKiiC,oBAAoB51B,KAAK7K,KACxC,OAAO+jB,GAAehf,OAAO5F,EACjC,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKkiC,uBAAuB71B,KAAK7K,KAC3C,OAAOmpB,GAAWpkB,OAAO5F,EAC7B,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKmiC,gBAAgB91B,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAKoiC,kBAAkB/1B,KAAK7K,KACtC,OAAO+lB,GAAahhB,OAAO5F,EAC/B,GACA,4BAGA,WACI,IAAIA,EAAMX,EAAKqiC,0BAA0Bh2B,KAAK7K,KAC9C,OAAOoQ,GAAcrL,OAAO5F,EAChC,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKsiC,uBAAuBj2B,KAAK7K,KAC3C,OAAOukB,GAAiBxf,OAAO5F,EACnC,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAKuiC,kBAAkBl2B,KAAK7K,KACtC,OAAOghC,GAAOj8B,OAAO5F,EACzB,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAKyiC,yBAAyBp2B,KAAK7K,KAC7C,OAAe,IAARb,OAAYP,EAAYwgC,GAAar6B,OAAO5F,EACvD,IACA,qBAzIA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOyvB,EAAWxvB,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK0iC,sBAAsBh8B,EAAME,GAC3C,OAAOg7B,EAAWr7B,OAAO5F,EAC7B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK2iC,qBAAqBj8B,EAAME,GAC1C,OAAOg7B,EAAWr7B,OAAO5F,EAC7B,GAAC,iBA4ED,SAAWiiC,EAAU5X,EAAa6X,EAAQ3gB,EAAM4gB,EAAQC,EAAgBC,EAAaC,EAAQC,GACzFt9B,EAAag9B,EAAUrd,IACvB3f,EAAaolB,EAAaL,IAC1B/kB,EAAai9B,EAAQv8B,IACrBV,EAAasc,EAAM5b,IACnBV,EAAak9B,EAAQvb,IACrB3hB,EAAam9B,EAAgBnxB,IAC7BhM,EAAao9B,EAAajd,IAC1BngB,EAAaq9B,EAAQT,IACrB,IAAI97B,EAAO,EACNtD,EAAW8/B,KACZt9B,EAAas9B,EAAetC,IAC5Bl6B,EAAOw8B,EAAc1hC,IACrB0hC,EAAc1hC,IAAM,GAExB,IAAIb,EAAMX,EAAKmjC,eAAeP,EAASphC,IAAKwpB,EAAYxpB,IAAKqhC,EAAOrhC,IAAK0gB,EAAK1gB,IAAKshC,EAAOthC,IAAKuhC,EAAevhC,IAAKwhC,EAAYxhC,IAAKyhC,EAAOzhC,IAAKkF,GAChJ,OAAOk7B,EAAWr7B,OAAO5F,EAC7B,KAAC,EAvKkB,GA0KVsM,GAAgB,wCA0FxB,OA1FwB,0CAMzB,WACI,IAAMzL,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKojC,4BAA4B5hC,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqjC,0BAA0Br8B,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKsjC,yBAAyBt8B,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKujC,6BAA6Bl3B,KAAK7K,KAErD,GACA,yBAaA,WACI,IAAIb,EAAMX,EAAKwjC,6BAA6Bn3B,KAAK7K,KACjD,OAAOogC,GAAWr7B,OAAO5F,EAC7B,GACA,2BAYA,SAAc8iC,GACVzjC,EAAK0jC,+BAA+Br3B,KAAK7K,IAAKiiC,EAClD,IAAC,qBA/FD,SAAcjiC,GACV,IAAMI,EAAMgL,OAAOuF,OAAOlF,EAAiBmF,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK2jC,4BAA4Bj9B,EAAME,GACjD,OAAOqG,EAAiB1G,OAAO5F,EACnC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK4jC,2BAA2Bl9B,EAAME,GAChD,OAAOqG,EAAiB1G,OAAO5F,EACnC,GAAC,iBAYD,SAAWkjC,GACPj+B,EAAai+B,EAAajC,IAC1B,IAAIjhC,EAAMX,EAAK8jC,qBAAqBD,EAAYriC,KAChD,OAAOyL,EAAiB1G,OAAO5F,EACnC,KAAC,EA1FwB,GAmGhBuM,GAAc,wCAkGtB,OAlGsB,0CAMvB,WACI,IAAM1L,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+jC,0BAA0BviC,EACnC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgkC,wBAAwBh9B,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKikC,uBAAuBj9B,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKkkC,2BAA2B73B,KAAK7K,KAEnD,GACA,0BAaA,WACI,IAAIb,EAAMX,EAAKmkC,4BAA4B93B,KAAK7K,KAChD,OAAO+jB,GAAehf,OAAO5F,EACjC,GACA,mBAGA,WAEI,OADUX,EAAKi8B,gCAAgC5vB,KAAK7K,OACrC,CACnB,IACA,qBAxFA,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOjF,EAAekF,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKokC,0BAA0B19B,EAAME,GAC/C,OAAOsG,EAAe3G,OAAO5F,EACjC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKqkC,yBAAyB39B,EAAME,GAC9C,OAAOsG,EAAe3G,OAAO5F,EACjC,GAAC,iBAoBD,SAAW2jC,EAAcC,GACrB3+B,EAAa0+B,EAAc/e,IAC3B,IAAI5kB,EAAMX,EAAKwkC,mBAAmBF,EAAa9iC,IAAK+iC,GACpD,OAAOr3B,EAAe3G,OAAO5F,EACjC,KAAC,EAlGsB,GAqGdiJ,GAAU,wCA8HlB,OA9HkB,0CAMnB,WACI,IAAMpI,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKykC,sBAAsBjjC,EAC/B,GACA,uBAGA,WACI,IAAIb,EAAMX,EAAK0kC,qBAAqBr4B,KAAK7K,KACzC,OAAO6Y,GAAU9T,OAAO5F,EAC5B,GACA,uBAmCA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2kC,qBAAqB39B,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,sBAGA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4kC,oBAAoB59B,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBAwBA,SAAK1C,GACD,IAAImC,EAAOf,EAAkBpB,EAASvE,EAAK2G,mBACvCC,EAAO/E,EACPlB,EAAMX,EAAK6kC,gBAAgBx4B,KAAK7K,IAAKkF,EAAME,GAC/C,OAAOuW,GAAiB5W,OAAO5F,EACnC,GACA,sBAaA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8kC,oBAAoB99B,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBA9ID,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOvI,EAAWwI,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,8BAoBD,WACI,IAAIjB,EAAMX,EAAK+kC,8BACf,OAAOn7B,EAAWrD,OAAO5F,EAC7B,GACA,sCAGA,WACI,IAAIA,EAAMX,EAAKglC,sCACf,OAAOp7B,EAAWrD,OAAO5F,EAC7B,GACA,yBAYA,SAAmBmZ,GACf,IAAIpT,EAAOjE,EAAkBqX,EAAY9Z,EAAK2G,kBAAmB3G,EAAKyH,oBAClEb,EAAO/E,EACPlB,EAAMX,EAAKilC,uBAAuBv+B,EAAME,GAC5C,OAAOgD,EAAWrD,OAAO5F,EAC7B,GAAC,iCAsCD,SAA2B8F,GACvB,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKklC,+BAA+Bx+B,EAAME,GACpD,OAAOgD,EAAWrD,OAAO5F,EAC7B,GACA,+BAIA,SAAyB8F,GACrB,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKmlC,6BAA6Bz+B,EAAME,GAClD,OAAOgD,EAAWrD,OAAO5F,EAC7B,GAAC,wBAeD,SAAkB8F,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKolC,sBAAsB1+B,EAAME,GAC3C,OAAOgD,EAAWrD,OAAO5F,EAC7B,KAAC,EA9HkB,GAkJV0kC,GAAgC,wCAiFxC,OAjFwC,0CAMzC,WACI,IAAM7jC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKslC,4CAA4C9jC,EACrD,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKulC,0CAA0Cv+B,EAAQqF,KAAK7K,KAC5D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwlC,yCAAyCx+B,EAAQqF,KAAK7K,KAC3D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKylC,6CAA6Cp5B,KAAK7K,KAErE,GACA,iBAoBA,WAEI,OADUxB,EAAKwW,qBAAqBnK,KAAK7K,OAC1B,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKmgB,IAClB1jB,EAAawO,EAAOsxB,IACpB,IAAI/kC,EAAMX,EAAK2lC,wCAAwCt5B,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KAChF,OAAe,IAARb,OAAYP,EAAYslC,GAAoBn/B,OAAO5F,EAC9D,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKmgB,IAClB,IAAI3oB,EAAMX,EAAK4lC,qCAAqCv5B,KAAK7K,IAAK2H,EAAI3H,KAClE,OAAe,IAARb,OAAYP,EAAYslC,GAAoBn/B,OAAO5F,EAC9D,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK6lC,sCAAsCx5B,KAAK7K,KAC1D,OAAOmoB,GAAcpjB,OAAO5F,EAChC,IAAC,qBAlHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOkzB,EAAiCjzB,WAE3D,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8lC,4CAA4Cp/B,EAAME,GACjE,OAAOy+B,EAAiC9+B,OAAO5F,EACnD,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+lC,2CAA2Cr/B,EAAME,GAChE,OAAOy+B,EAAiC9+B,OAAO5F,EACnD,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK8W,uBACf,OAAOuuB,EAAiC9+B,OAAO5F,EACnD,KAAC,EAjFwC,GAsHhC+kC,GAAmB,wCAyd3B,OAzd2B,0CAM5B,WACI,IAAMlkC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgmC,+BAA+BxkC,EACxC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKimC,6BAA6Bj/B,EAAQqF,KAAK7K,KAC/C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKkmC,4BAA4Bl/B,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKmmC,gCAAgC95B,KAAK7K,KAExD,GACA,0BAaA,SAAa4kC,GACTxgC,EAAawgC,EAAU9/B,IACvBtG,EAAKqmC,iCAAiCh6B,KAAK7K,IAAK4kC,EAAS5kC,IAC7D,GACA,sBAGA,WACI,IAAIb,EAAMX,EAAKsmC,6BAA6Bj6B,KAAK7K,KACjD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,0BAGA,SAAa4lC,GACT3gC,EAAa2gC,EAAUjgC,IACvBtG,EAAKwmC,iCAAiCn6B,KAAK7K,IAAK+kC,EAAS/kC,IAC7D,GACA,sBAGA,WACI,IAAIb,EAAMX,EAAKymC,6BAA6Bp6B,KAAK7K,KACjD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,qCAGA,SAAwB+lC,GACpB1mC,EAAK2mC,4CAA4Ct6B,KAAK7K,IAAKklC,EAC/D,GACA,iCAGA,WACI,IACI,IAAM1/B,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4mC,wCAAwC5/B,EAAQqF,KAAK7K,KAC1D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,6BAGA,SAAgB4/B,GACZ7mC,EAAK8mC,oCAAoCz6B,KAAK7K,IAAKqlC,EACvD,GACA,yBAGA,WACI,IACI,IAAM7/B,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+mC,gCAAgC//B,EAAQqF,KAAK7K,KAClD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uCAGA,SAA0B+/B,GACtBhnC,EAAKinC,8CAA8C56B,KAAK7K,IAAKwlC,EACjE,GACA,mCAGA,WACI,IACI,IAAMhgC,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKknC,0CAA0ClgC,EAAQqF,KAAK7K,KAC5D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,6BAGA,SAAgBqE,GACZ1F,EAAa0F,EAAahF,IAC1BtG,EAAKmnC,oCAAoC96B,KAAK7K,IAAK8J,EAAY9J,IACnE,GACA,yBAGA,WACI,IAAIb,EAAMX,EAAKonC,gCAAgC/6B,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,8BAGA,SAAiB0K,GACbzF,EAAayF,EAAc/E,IAC3BtG,EAAKqnC,qCAAqCh7B,KAAK7K,IAAK6J,EAAa7J,IACrE,GACA,0BAGA,WACI,IAAIb,EAAMX,EAAKsnC,iCAAiCj7B,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,2BAGA,SAAc4mC,GACVvnC,EAAKwnC,kCAAkCn7B,KAAK7K,IAAK+lC,EACrD,GACA,uBAGA,WACI,IACI,IAAMvgC,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKynC,8BAA8BzgC,EAAQqF,KAAK7K,KAChD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAGA,SAAUygC,GACN1nC,EAAK2nC,8BAA8Bt7B,KAAK7K,IAAKkmC,EACjD,GACA,mBAGA,WACI,IACI,IAAM1gC,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4nC,0BAA0B5gC,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uCAGA,SAA0B4gC,GACtBjiC,EAAaiiC,EAAuBtgB,IACpCvnB,EAAK8nC,8CAA8Cz7B,KAAK7K,IAAKqmC,EAAsBrmC,IACvF,GACA,mCAGA,WACI,IAAIb,EAAMX,EAAK+nC,0CAA0C17B,KAAK7K,KAC9D,OAAe,IAARb,OAAYP,EAAYmnB,GAAahhB,OAAO5F,EACvD,GACA,gCAGA,SAAmBqnC,GACfpiC,EAAaoiC,EAAgBzgB,IAC7BvnB,EAAKioC,uCAAuC57B,KAAK7K,IAAKwmC,EAAexmC,IACzE,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAKkoC,mCAAmC77B,KAAK7K,KACvD,OAAe,IAARb,OAAYP,EAAYmnB,GAAahhB,OAAO5F,EACvD,GACA,sCAGA,SAAyBwnC,GACrBviC,EAAauiC,EAAsB5gB,IACnCvnB,EAAKooC,6CAA6C/7B,KAAK7K,IAAK2mC,EAAqB3mC,IACrF,GACA,kCAGA,WACI,IAAIb,EAAMX,EAAKqoC,yCAAyCh8B,KAAK7K,KAC7D,OAAe,IAARb,OAAYP,EAAYmnB,GAAahhB,OAAO5F,EACvD,GACA,mBAGA,SAAM2nC,GACF1iC,EAAa0iC,EAAG/gB,IAChBvnB,EAAKuoC,0BAA0Bl8B,KAAK7K,IAAK8mC,EAAE9mC,IAC/C,GACA,eAGA,WACI,IAAIb,EAAMX,EAAKwoC,sBAAsBn8B,KAAK7K,KAC1C,OAAe,IAARb,OAAYP,EAAYmnB,GAAahhB,OAAO5F,EACvD,GACA,+BAGA,SAAkB8nC,GACd7iC,EAAa6iC,EAAerN,IAC5Bp7B,EAAK0oC,sCAAsCr8B,KAAK7K,IAAKinC,EAAcjnC,IACvE,GACA,2BAGA,WACI,IAAIb,EAAMX,EAAK2oC,kCAAkCt8B,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAYg7B,GAAM70B,OAAO5F,EAChD,GACA,kCAGA,SAAqBmtB,GACjBloB,EAAakoB,EAAkBb,IAC/BjtB,EAAK4oC,yCAAyCv8B,KAAK7K,IAAKssB,EAAiBtsB,IAC7E,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAK6oC,qCAAqCx8B,KAAK7K,KACzD,OAAe,IAARb,OAAYP,EAAY6sB,GAAgB1mB,OAAO5F,EAC1D,GACA,+BAGA,SAAkBmoC,GACdljC,EAAakjC,EAAexiC,IAC5BtG,EAAK+oC,sCAAsC18B,KAAK7K,IAAKsnC,EAActnC,IACvE,GACA,2BAGA,WACI,IAAIb,EAAMX,EAAKgpC,kCAAkC38B,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,mCAGA,SAAsBsoC,GAClBrjC,EAAaqjC,EAAmB3iC,IAChCtG,EAAKkpC,0CAA0C78B,KAAK7K,IAAKynC,EAAkBznC,IAC/E,GACA,+BAGA,WACI,IAAIb,EAAMX,EAAKmpC,sCAAsC98B,KAAK7K,KAC1D,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,6BAGA,SAAgBmK,GACZlF,EAAakF,EAAaG,IAC1BjL,EAAKopC,oCAAoC/8B,KAAK7K,IAAKsJ,EAAYtJ,IACnE,GACA,yBAGA,WACI,IAAIb,EAAMX,EAAKqpC,gCAAgCh9B,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAY6K,GAAS1E,OAAO5F,EACnD,GACA,iCAGA,SAAoB2oC,GAChB1jC,EAAa0jC,EAAiBjjC,IAC9BrG,EAAKupC,wCAAwCl9B,KAAK7K,IAAK8nC,EAAgB9nC,IAC3E,GACA,6BAGA,WACI,IAAIb,EAAMX,EAAKwpC,oCAAoCn9B,KAAK7K,KACxD,OAAe,IAARb,OAAYP,EAAYiG,GAAaE,OAAO5F,EACvD,GACA,iCAGA,SAAoB8oC,GAChB7jC,EAAa6jC,EAAiB3hB,IAC9B9nB,EAAK0pC,wCAAwCr9B,KAAK7K,IAAKioC,EAAgBjoC,IAC3E,GACA,6BAGA,WACI,IAAIb,EAAMX,EAAK2pC,oCAAoCt9B,KAAK7K,KACxD,OAAe,IAARb,OAAYP,EAAY0nB,GAAQvhB,OAAO5F,EAClD,GACA,oCAGA,SAAuBipC,GACnBhkC,EAAagkC,EAAoB9hB,IACjC9nB,EAAK6pC,2CAA2Cx9B,KAAK7K,IAAKooC,EAAmBpoC,IACjF,GACA,gCAGA,WACI,IAAIb,EAAMX,EAAK8pC,uCAAuCz9B,KAAK7K,KAC3D,OAAe,IAARb,OAAYP,EAAY0nB,GAAQvhB,OAAO5F,EAClD,GACA,gCAGA,SAAmBopC,GACf/pC,EAAKgqC,uCAAuC39B,KAAK7K,IAAKuoC,EAC1D,GACA,4BAGA,WACI,IACI,IAAM/iC,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiqC,mCAAmCjjC,EAAQqF,KAAK7K,KACrD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uCAGA,SAA0BijC,GACtBlqC,EAAKmqC,8CAA8C99B,KAAK7K,IAAK0oC,EACjE,GACA,mCAGA,WACI,IACI,IAAMljC,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKoqC,0CAA0CpjC,EAAQqF,KAAK7K,KAC5D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uCAGA,SAA0BojC,GACtBrqC,EAAKsqC,8CAA8Cj+B,KAAK7K,IAAK6oC,EACjE,GACA,mCAGA,WACI,IACI,IAAMrjC,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuqC,0CAA0CvjC,EAAQqF,KAAK7K,KAC5D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAc,IAAPE,OAAW9G,EAAY+G,IAAO,CAIzC,CAHC,QAEGnH,EAAKiH,gCAAgC,GACzC,CACJ,IACA,qBAldA,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOuzB,EAAoBtzB,WAE9C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwqC,+BAA+B9jC,EAAME,GACpD,OAAO8+B,EAAoBn/B,OAAO5F,EACtC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKyqC,8BAA8B/jC,EAAME,GACnD,OAAO8+B,EAAoBn/B,OAAO5F,EACtC,GAAC,iBA4YD,WACI,IAAIA,EAAMX,EAAK0qC,0BACf,OAAOhF,EAAoBn/B,OAAO5F,EACtC,KAAC,EAzd2B,GA4dnBssB,GAAe,wCAiGvB,OAjGuB,0CAMxB,WACI,IAAMzrB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2qC,2BAA2BnpC,EACpC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4qC,yBAAyB5jC,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6qC,wBAAwB7jC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK8qC,4BAA4Bz+B,KAAK7K,KAEpD,GACA,mBAaA,WAEI,OADUxB,EAAKi8B,gCAAgC5vB,KAAK7K,OACrC,CACnB,GACA,mBAGA,WAEI,OADUxB,EAAKk8B,2BAA2B7vB,KAAK7K,OAChC,CACnB,IACA,qBAxFA,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8a,EAAgB7a,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK+qC,2BAA2BrkC,EAAME,GAChD,OAAOqmB,EAAgB1mB,OAAO5F,EAClC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKgrC,0BAA0BtkC,EAAME,GAC/C,OAAOqmB,EAAgB1mB,OAAO5F,EAClC,GAAC,iBAoBD,SAAWsqC,EAAOC,GACd,IAAIvqC,EAAMX,EAAKmrC,oBAAoBF,EAAOC,GAC1C,OAAOje,EAAgB1mB,OAAO5F,EAClC,KAAC,EAjGuB,GAsGf0Z,GAAS,wCAwEjB,OAxEiB,0CAMlB,WACI,IAAM7Y,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKorC,qBAAqB5pC,EAC9B,GACA,uBAkBA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqrC,oBAAoBrkC,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,sBAGA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,oBAeA,SAAOkB,EAAMsV,GACT,IAAI/W,EAAOf,EAAkBwC,EAAMnI,EAAK2G,mBACpCC,EAAO/E,EAGX,OAFA+D,EAAa6X,EAAWN,IAET,IADLnd,EAAKsrC,iBAAiBj/B,KAAK7K,IAAKkF,EAAME,EAAM6W,EAAUjc,IAEpE,GACA,kBAGA,WACI,IAAIb,EAAMX,EAAKurC,eAAel/B,KAAK7K,KACnC,OAAO+jB,GAAehf,OAAO5F,EACjC,IAAC,qBA1FD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOkI,EAAUjI,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,yBAmBD,SAAmBkY,GACf,IAAIpT,EAAOjE,EAAkBqX,EAAY9Z,EAAK2G,kBAAmB3G,EAAKyH,oBAClEb,EAAO/E,EACPlB,EAAMX,EAAKwrC,sBAAsB9kC,EAAME,GAC3C,OAAOyT,EAAU9T,OAAO5F,EAC5B,GAAC,wBAsCD,SAAkB8F,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKyrC,qBAAqB/kC,EAAME,GAC1C,OAAOyT,EAAU9T,OAAO5F,EAC5B,KAAC,EAxEiB,GA8FT+qC,GAAU,WAgBnB,cAAc,eACV,IAAI/qC,EAAMX,EAAK2rC,iBACf,OAAOD,EAAWnlC,OAAO5F,EAC7B,CAdC,OAeD,0CAdA,WACI,IAAMa,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4rC,sBAAsBpqC,EAC/B,GAAC,kBASD,WAEI,OADUxB,EAAK+d,uBAAuB1R,KAAK7K,OAC5B,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK6rC,eAAex/B,KAAK7K,IAAKgS,GACxC,OAAO6G,GAAU9T,OAAO5F,EAC5B,GACA,iBAGA,SAAIwI,GACAvD,EAAauD,EAAKkR,IAClBra,EAAK8rC,eAAez/B,KAAK7K,IAAK2H,EAAI3H,IACtC,IAAC,qBAxCD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOu5B,EAAWt5B,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,KAAC,EALkB,GA4CVmqC,GAAQ,wCAoFhB,OApFgB,0CAMjB,WACI,IAAMvqC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgsC,oBAAoBxqC,EAC7B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKisC,kBAAkBjlC,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAaA,WACI,IAAItG,EAAMX,EAAKksC,aAAa7/B,KAAK7K,KACjC,OAAO2qC,GAAY5lC,OAAO5F,EAC9B,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAKyhB,6BAA6BpV,KAAK7K,KACjD,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKosC,cAAc//B,KAAK7K,KAClC,OAAO+I,GAAWhE,OAAO5F,EAC7B,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAKqsC,kBAAkBhgC,KAAK7K,KACtC,OAAOsmB,GAAQvhB,OAAO5F,EAC1B,IACA,qBArEA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO45B,EAAS35B,WAEnC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKssC,oBAAoB5lC,EAAME,GACzC,OAAOmlC,EAASxlC,OAAO5F,EAC3B,GAAC,iBAoCD,SAAW4rC,EAAK/4B,EAAOrL,EAAMqkC,GACzB5mC,EAAa2mC,EAAKJ,IAClBvmC,EAAa4N,EAAOlN,IACpBV,EAAauC,EAAMoC,IACnB3E,EAAa4mC,EAAU1kB,IACvB,IAAInnB,EAAMX,EAAKysC,aAAaF,EAAI/qC,IAAKgS,EAAMhS,IAAK2G,EAAK3G,IAAKgrC,EAAShrC,KACnE,OAAOuqC,EAASxlC,OAAO5F,EAC3B,KAAC,EApFgB,GAuFRwrC,GAAW,wCAqEnB,OArEmB,0CAMpB,WACI,IAAM3qC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK0sC,uBAAuBlrC,EAChC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2sC,qBAAqB3lC,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBAyCA,WAEI,OADUjH,EAAK4sC,iBAAiBvgC,KAAK7K,OACtB,CACnB,IAAC,qBA3ED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOg6B,EAAY/5B,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK6sC,uBAAuBnmC,EAAME,GAC5C,OAAOulC,EAAY5lC,OAAO5F,EAC9B,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAK8sC,wBACf,OAAOX,EAAY5lC,OAAO5F,EAC9B,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAK+sC,uBACf,OAAOZ,EAAY5lC,OAAO5F,EAC9B,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAKgtC,uBACf,OAAOb,EAAY5lC,OAAO5F,EAC9B,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKitC,yBACf,OAAOd,EAAY5lC,OAAO5F,EAC9B,KAAC,EArEmB,GA+EXusC,GAAkB,wCAuC1B,OAvC0B,0CAM3B,WACI,IAAM1rC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmtC,8BAA8B3rC,EACvC,GACA,iBAGA,WACI,IAAIb,EAAMX,EAAKotC,uBAAuB/gC,KAAK7K,KAC3C,OAAO2qC,GAAY5lC,OAAO5F,EAC9B,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAKkgC,aAAa7zB,KAAK7K,KACjC,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBA5BA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO+6B,EAAmB96B,WAE7C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBA6BD,SAAW2qC,EAAK/4B,GACZ5N,EAAa2mC,EAAKJ,IAClBvmC,EAAa4N,EAAOlN,IACpB,IAAI3F,EAAMX,EAAKqtC,uBAAuBd,EAAI/qC,IAAKgS,EAAMhS,KACrD,OAAO0rC,EAAmB3mC,OAAO5F,EACrC,KAAC,EAvC0B,GA0ClBqK,GAAS,wCAgDjB,OAhDiB,0CAMlB,WACI,IAAMxJ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKstC,qBAAqB9rC,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKutC,mBAAmBvmC,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKwtC,cAAcnhC,KAAK7K,IAAKgS,GACvC,OAAOu4B,GAASxlC,OAAO5F,EAC3B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMq4B,IACnB/rC,EAAKytC,cAAcphC,KAAK7K,IAAKkS,EAAKlS,IACtC,IAAC,qBArED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOnH,EAAUoH,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK0tC,qBAAqBhnC,EAAME,GAC1C,OAAOoE,EAAUzE,OAAO5F,EAC5B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK0+B,gBACf,OAAO1zB,EAAUzE,OAAO5F,EAC5B,KAAC,EAhDiB,GAyETgtC,GAAK,wCAqGb,OArGa,0CAMd,WACI,IAAMnsC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4tC,iBAAiBpsC,EAC1B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6tC,eAAe7mC,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8tC,cAAc9mC,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+tC,kBAAkB1hC,KAAK7K,KAE1C,GACA,kBAwCA,WAEI,OADUxB,EAAKguC,WAAW3hC,KAAK7K,OAChB,CACnB,GACA,iCAGA,WACI,IAAIb,EAAMX,EAAKiuC,0BAA0B5hC,KAAK7K,KAC9C,OAAe,IAARb,OAAYP,EAAYwN,GAAerH,OAAO5F,EACzD,GACA,iCAGA,WACI,IAAIA,EAAMX,EAAKkuC,0BAA0B7hC,KAAK7K,KAC9C,OAAe,IAARb,OAAYP,EAAYyN,GAAetH,OAAO5F,EACzD,GACA,gCAGA,WACI,IAAIA,EAAMX,EAAKmuC,yBAAyB9hC,KAAK7K,KAC7C,OAAe,IAARb,OAAYP,EAAY0N,GAAcvH,OAAO5F,EACxD,IAAC,qBAhID,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOw7B,EAAMv7B,WAEhC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKouC,iBAAiB1nC,EAAME,GACtC,OAAO+mC,EAAMpnC,OAAO5F,EACxB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKquC,gBAAgB3nC,EAAME,GACrC,OAAO+mC,EAAMpnC,OAAO5F,EACxB,GACA,kCAIA,SAA4B2tC,GACxB1oC,EAAa0oC,EAAkB1gC,IAC/B,IAAIjN,EAAMX,EAAKuuC,2BAA2BD,EAAiB9sC,KAC3D,OAAOmsC,EAAMpnC,OAAO5F,EACxB,GACA,kCAIA,SAA4B6tC,GACxB5oC,EAAa4oC,EAAkB3gC,IAC/B,IAAIlN,EAAMX,EAAKyuC,2BAA2BD,EAAiBhtC,KAC3D,OAAOmsC,EAAMpnC,OAAO5F,EACxB,GACA,iCAIA,SAA2B+tC,GACvB9oC,EAAa8oC,EAAiB5gC,IAC9B,IAAInN,EAAMX,EAAK2uC,0BAA0BD,EAAgBltC,KACzD,OAAOmsC,EAAMpnC,OAAO5F,EACxB,KAAC,EArGa,GAoIL6hC,GAAM,wCAiFd,OAjFc,0CAMf,WACI,IAAMhhC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4uC,kBAAkBptC,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6uC,gBAAgB7nC,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8uC,eAAe9nC,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+uC,mBAAmB1iC,KAAK7K,KAE3C,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKgvC,WAAW3iC,KAAK7K,IAAKgS,GACpC,OAAOm6B,GAAMpnC,OAAO5F,EACxB,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMi6B,IACnB3tC,EAAKivC,WAAW5iC,KAAK7K,IAAKkS,EAAKlS,IACnC,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOqwB,EAAOpwB,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkvC,kBAAkBxoC,EAAME,GACvC,OAAO47B,EAAOj8B,OAAO5F,EACzB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKmvC,iBAAiBzoC,EAAME,GACtC,OAAO47B,EAAOj8B,OAAO5F,EACzB,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK8T,iBACf,OAAO0uB,EAAOj8B,OAAO5F,EACzB,KAAC,EAjFc,GA0GNyuC,GAAkB,wCAqI1B,OArI0B,0CAM3B,WACI,IAAM5tC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKqvC,8BAA8B7tC,EACvC,GACA,sBAGA,SAASgc,GACL5X,EAAa4X,EAAM3T,IACnB7J,EAAKsvC,4BAA4BjjC,KAAK7K,IAAKgc,EAAKhc,IACpD,GACA,0BAGA,SAAagc,GACT5X,EAAa4X,EAAMP,IACnBjd,EAAKuvC,gCAAgCljC,KAAK7K,IAAKgc,EAAKhc,IACxD,GACA,+BAGA,SAAkBk6B,GACd91B,EAAa81B,EAAMnW,IACnBvlB,EAAKwvC,qCAAqCnjC,KAAK7K,IAAKk6B,EAAKl6B,IAC7D,GACA,2BAGA,SAAciuC,GACV7pC,EAAa6pC,EAAWlmC,IACxBvJ,EAAK0vC,iCAAiCrjC,KAAK7K,IAAKiuC,EAAUjuC,IAC9D,GACA,+BAGA,SAAkBiuC,GACd7pC,EAAa6pC,EAAWxyB,IACxBjd,EAAK2vC,qCAAqCtjC,KAAK7K,IAAKiuC,EAAUjuC,IAClE,GACA,oCAGA,SAAuBk6B,GACnB91B,EAAa81B,EAAMnW,IACnBvlB,EAAK4vC,0CAA0CvjC,KAAK7K,IAAKk6B,EAAKl6B,IAClE,GACA,+BAGA,SAAkBquC,GACdjqC,EAAaiqC,EAAe9jC,IAC5B/L,EAAK8vC,qCAAqCzjC,KAAK7K,IAAKquC,EAAcruC,IACtE,GACA,oCAGA,SAAuBquC,GACnBjqC,EAAaiqC,EAAehc,IAC5B7zB,EAAK+vC,0CAA0C1jC,KAAK7K,IAAKquC,EAAcruC,IAC3E,GACA,+BAGA,SAAkBqH,GACdjD,EAAaiD,EAAeE,IAC5B/I,EAAKgwC,qCAAqC3jC,KAAK7K,IAAKqH,EAAcrH,IACtE,GACA,kCAGA,SAAqBqH,GACjBjD,EAAaiD,EAAeE,IAC5B/I,EAAKiwC,wCAAwC5jC,KAAK7K,IAAKqH,EAAcrH,IACzE,GACA,6BAGA,SAAgBqH,GACZjD,EAAaiD,EAAegrB,IAC5B7zB,EAAKkwC,mCAAmC7jC,KAAK7K,IAAKqH,EAAcrH,IACpE,GACA,8BAGA,SAAiB2uC,GACbvqC,EAAauqC,EAAc5lC,IAC3BvK,EAAKowC,oCAAoC/jC,KAAK7K,IAAK2uC,EAAa3uC,IACpE,GACA,mCAGA,SAAsB2uC,GAClBvqC,EAAauqC,EAAc3lC,IAC3BxK,EAAKqwC,yCAAyChkC,KAAK7K,IAAK2uC,EAAa3uC,IACzE,GACA,0BAGA,SAAao+B,GACTh6B,EAAag6B,EAAUmM,IACvB/rC,EAAKswC,gCAAgCjkC,KAAK7K,IAAKo+B,EAASp+B,IAC5D,GACA,8BAGA,SAAiBo+B,GACbh6B,EAAag6B,EAAUsN,IACvBltC,EAAKuwC,oCAAoClkC,KAAK7K,IAAKo+B,EAASp+B,IAChE,GACA,qBAGA,SAAQgvC,GACJ5qC,EAAa4qC,EAAcpB,GAC3BpvC,EAAKywC,2BAA2BpkC,KAAK7K,IAAKgvC,EAAahvC,IAC3D,IACA,qBA9HA,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOi9B,EAAmBh9B,WAE7C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBA6HD,WACI,IAAIjB,EAAMX,EAAK0wC,yBACf,OAAOtB,EAAmB7oC,OAAO5F,EACrC,KAAC,EArI0B,GAwIlBiR,GAAa,wCA+CrB,OA/CqB,0CAMtB,WACI,IAAMpQ,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2wC,yBAAyBnvC,EAClC,GACA,0BAaA,WACI,IAAIb,EAAMX,EAAKgX,yBAAyB3K,KAAK7K,KAC7C,OAAOyV,GAAgB1Q,OAAO5F,EAClC,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAK4wC,yBAAyBvkC,KAAK7K,KAC7C,OAAOyP,GAAQ1K,OAAO5F,EAC1B,IACA,qBAtCA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOP,EAAcQ,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAeD,SAAWwV,EAASC,GAChBzR,EAAayR,EAASJ,IACtB,IAAItW,EAAMX,EAAKmnB,sBAAsB/P,EAASC,EAAQ7V,KACtD,OAAOoQ,EAAcrL,OAAO5F,EAChC,GAAC,0BAmBD,SAAoBuI,GAChBtD,EAAasD,EAAM+H,IACnB,IAAItQ,EAAMX,EAAK2R,kBAAkBzI,EAAK1H,KACtC,OAAe,IAARb,OAAYP,EAAYwR,EAAcrL,OAAO5F,EACxD,KAAC,EA/CqB,GAkDbkwC,GAAe,wCAiFvB,OAjFuB,0CAMxB,WACI,IAAMrvC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8wC,2BAA2BtvC,EACpC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+wC,yBAAyB/pC,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgxC,wBAAwBhqC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKixC,4BAA4B5kC,KAAK7K,KAEpD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKkxC,oBAAoB7kC,KAAK7K,IAAKgS,GAC7C,OAAO5B,GAAcrL,OAAO5F,EAChC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM9B,IACnB5R,EAAKmxC,oBAAoB9kC,KAAK7K,IAAKkS,EAAKlS,IAC5C,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0+B,EAAgBz+B,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKoxC,2BAA2B1qC,EAAME,GAChD,OAAOiqC,EAAgBtqC,OAAO5F,EAClC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKqxC,0BAA0B3qC,EAAME,GAC/C,OAAOiqC,EAAgBtqC,OAAO5F,EAClC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKwmB,uBACf,OAAOqqB,EAAgBtqC,OAAO5F,EAClC,KAAC,EAjFuB,GA0Gf0O,GAAM,wCAqGd,OArGc,0CAMf,WACI,IAAM7N,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKsxC,kBAAkB9vC,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuxC,gBAAgBvqC,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwxC,eAAexqC,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKyxC,mBAAmBplC,KAAK7K,KAE3C,GACA,kBAwCA,WAEI,OADUxB,EAAK0xC,YAAYrlC,KAAK7K,OACjB,CACnB,GACA,uBAGA,WACI,IAAIb,EAAMX,EAAK2xC,iBAAiBtlC,KAAK7K,KACrC,OAAe,IAARb,OAAYP,EAAY2L,GAAaxF,OAAO5F,EACvD,GACA,0BAGA,WACI,IAAIA,EAAMX,EAAK4xC,oBAAoBvlC,KAAK7K,KACxC,OAAe,IAARb,OAAYP,EAAY2I,GAAaxC,OAAO5F,EACvD,GACA,0BAGA,WACI,IAAIA,EAAMX,EAAK6xC,oBAAoBxlC,KAAK7K,KACxC,OAAe,IAARb,OAAYP,EAAY2I,GAAaxC,OAAO5F,EACvD,IAAC,qBAhID,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO9C,EAAO+C,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8xC,kBAAkBprC,EAAME,GACvC,OAAOyI,EAAO9I,OAAO5F,EACzB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+xC,iBAAiBrrC,EAAME,GACtC,OAAOyI,EAAO9I,OAAO5F,EACzB,GACA,wBAIA,SAAkBkvC,GACdjqC,EAAaiqC,EAAe9jC,IAC5B,IAAIpL,EAAMX,EAAKgyC,kBAAkBnC,EAAcruC,KAC/C,OAAO6N,EAAO9I,OAAO5F,EACzB,GACA,2BAIA,SAAqBkI,GACjBjD,EAAaiD,EAAeE,IAC5B,IAAIpI,EAAMX,EAAKiyC,qBAAqBppC,EAAcrH,KAClD,OAAO6N,EAAO9I,OAAO5F,EACzB,GACA,2BAIA,SAAqBkI,GACjBjD,EAAaiD,EAAeE,IAC5B,IAAIpI,EAAMX,EAAKkyC,qBAAqBrpC,EAAcrH,KAClD,OAAO6N,EAAO9I,OAAO5F,EACzB,KAAC,EArGc,GAoINsN,GAAS,wCA0FjB,OA1FiB,0CAMlB,WACI,IAAMzM,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmyC,qBAAqB3wC,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKoyC,mBAAmBprC,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqyC,kBAAkBrrC,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKsyC,sBAAsBjmC,KAAK7K,KAE9C,GACA,4BAaA,WACI,IAAIb,EAAMX,EAAKuyC,yBAAyBlmC,KAAK7K,KAC7C,OAAO2T,GAAc5O,OAAO5F,EAChC,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOlE,EAAUmE,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwyC,qBAAqB9rC,EAAME,GAC1C,OAAOqH,EAAU1H,OAAO5F,EAC5B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKyyC,oBAAoB/rC,EAAME,GACzC,OAAOqH,EAAU1H,OAAO5F,EAC5B,GAAC,iBAYD,SAAWyU,GACPxP,EAAawP,EAAgBD,IAC7B,IAAIxU,EAAMX,EAAK0yC,cAAct9B,EAAe5T,KAC5C,OAAOyM,EAAU1H,OAAO5F,EAC5B,KAAC,EA1FiB,GA6FTuN,GAAS,wCA0FjB,OA1FiB,0CAMlB,WACI,IAAM1M,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2yC,qBAAqBnxC,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4yC,mBAAmB5rC,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqyC,kBAAkBrrC,EAAQqF,KAAK7K,KACpC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK6yC,sBAAsBxmC,KAAK7K,KAE9C,GACA,4BAaA,WACI,IAAIb,EAAMX,EAAKuyC,yBAAyBlmC,KAAK7K,KAC7C,OAAO2T,GAAc5O,OAAO5F,EAChC,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOjE,EAAUkE,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8yC,qBAAqBpsC,EAAME,GAC1C,OAAOsH,EAAU3H,OAAO5F,EAC5B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+yC,oBAAoBrsC,EAAME,GACzC,OAAOsH,EAAU3H,OAAO5F,EAC5B,GAAC,iBAYD,SAAWyU,GACPxP,EAAawP,EAAgBD,IAC7B,IAAIxU,EAAMX,EAAK0yC,cAAct9B,EAAe5T,KAC5C,OAAO0M,EAAU3H,OAAO5F,EAC5B,KAAC,EA1FiB,GA6FTuK,GAAc,wCAgGtB,OAhGsB,0CAMvB,WACI,IAAM1J,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgzC,0BAA0BxxC,EACnC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOjH,EAAekH,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKizC,0BAA0BvsC,EAAME,GAC/C,OAAOsE,EAAe3E,OAAO5F,EACjC,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKkzC,2BAA2BxsC,EAAME,GAChD,OAAOsE,EAAe3E,OAAO5F,EACjC,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKmzC,wBAAwBzsC,EAAME,GAC7C,OAAOsE,EAAe3E,OAAO5F,EACjC,KAAC,EAhGsB,GAmGdkzB,GAAU,wCAgGlB,OAhGkB,0CAMnB,WACI,IAAMryB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKozC,sBAAsB5xC,EAC/B,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKylB,wBAAwBze,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAK0lB,yBAAyB1e,EAAQqF,KAAK7K,IAAKkF,EAAME,GACtD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2lB,sBAAsB3e,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0hB,EAAWzhB,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKqzC,sBAAsB3sC,EAAME,GAC3C,OAAOitB,EAAWttB,OAAO5F,EAC7B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKszC,uBAAuB5sC,EAAME,GAC5C,OAAOitB,EAAWttB,OAAO5F,EAC7B,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKuzC,oBAAoB7sC,EAAME,GACzC,OAAOitB,EAAWttB,OAAO5F,EAC7B,KAAC,EAhGkB,GAmGVuzB,GAAY,wCAiFpB,OAjFoB,0CAMrB,WACI,IAAM1yB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKwzC,wBAAwBhyC,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKyzC,sBAAsBzsC,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0zC,qBAAqB1sC,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK2zC,yBAAyBtnC,KAAK7K,KAEjD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK4zC,iBAAiBvnC,KAAK7K,IAAKgS,GAC1C,OAAOqgB,GAAWttB,OAAO5F,EAC7B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMmgB,IACnB7zB,EAAK6zC,iBAAiBxnC,KAAK7K,IAAKkS,EAAKlS,IACzC,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO+hB,EAAa9hB,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8zC,wBAAwBptC,EAAME,GAC7C,OAAOstB,EAAa3tB,OAAO5F,EAC/B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+zC,uBAAuBrtC,EAAME,GAC5C,OAAOstB,EAAa3tB,OAAO5F,EAC/B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKwmB,uBACf,OAAO0N,EAAa3tB,OAAO5F,EAC/B,KAAC,EAjFoB,GA0GZwN,GAAU,wCAkGlB,OAlGkB,0CAMnB,WACI,IAAM3M,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKg0C,sBAAsBxyC,EAC/B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKi0C,oBAAoBjtC,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKk0C,mBAAmBltC,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKm0C,uBAAuB9nC,KAAK7K,KAE/C,GACA,eAaA,WAEI,OADUxB,EAAKi8B,gCAAgC5vB,KAAK7K,OACrC,CACnB,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAKo0C,0BAA0B/nC,KAAK7K,KAC9C,OAAO2T,GAAc5O,OAAO5F,EAChC,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOhE,EAAWiE,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKq0C,sBAAsB3tC,EAAME,GAC3C,OAAOuH,EAAW5H,OAAO5F,EAC7B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKs0C,qBAAqB5tC,EAAME,GAC1C,OAAOuH,EAAW5H,OAAO5F,EAC7B,GAAC,iBAoBD,SAAW4zC,EAAGn/B,GACVxP,EAAawP,EAAgBD,IAC7B,IAAIxU,EAAMX,EAAKw0C,eAAeD,EAAGn/B,EAAe5T,KAChD,OAAO2M,EAAW5H,OAAO5F,EAC7B,KAAC,EAlGkB,GAqGVqN,GAAY,wCA0FpB,OA1FoB,0CAMrB,WACI,IAAMxM,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKy0C,wBAAwBjzC,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK00C,sBAAsB1tC,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK20C,qBAAqB3tC,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK40C,yBAAyBvoC,KAAK7K,KAEjD,GACA,0BAaA,WACI,IAAIb,EAAMX,EAAK60C,0BAA0BxoC,KAAK7K,KAC9C,OAAO+jB,GAAehf,OAAO5F,EACjC,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOnE,EAAaoE,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK80C,wBAAwBpuC,EAAME,GAC7C,OAAOoH,EAAazH,OAAO5F,EAC/B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+0C,uBAAuBruC,EAAME,GAC5C,OAAOoH,EAAazH,OAAO5F,EAC/B,GAAC,iBAYD,SAAWq0C,GACPpvC,EAAaovC,EAAczvB,IAC3B,IAAI5kB,EAAMX,EAAKi1C,iBAAiBD,EAAaxzC,KAC7C,OAAOwM,EAAazH,OAAO5F,EAC/B,KAAC,EA1FoB,GA6FZu0C,GAAS,wCAmFjB,OAnFiB,0CAMlB,WACI,IAAM1zC,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKm1C,qBAAqB3zC,EAC9B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKo1C,mBAAmBpuC,EAAQqF,KAAK7K,KACrC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwxC,eAAexqC,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKq1C,sBAAsBhpC,KAAK7K,KAE9C,GACA,iBAsBA,WACI,IAAIb,EAAMX,EAAKs1C,cAAcjpC,KAAK7K,KAClC,OAAO6N,GAAO9I,OAAO5F,EACzB,IAAC,qBAzFD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO+iC,EAAU9iC,WAEpC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKu1C,qBAAqB7uC,EAAME,GAC1C,OAAOsuC,EAAU3uC,OAAO5F,EAC5B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKw1C,oBAAoB9uC,EAAME,GACzC,OAAOsuC,EAAU3uC,OAAO5F,EAC5B,GACA,iBAIA,SAAWk/B,GACPj6B,EAAai6B,EAAQxwB,IACrB,IAAI1O,EAAMX,EAAKy1C,cAAc5V,EAAOr+B,KACpC,OAAO0zC,EAAU3uC,OAAO5F,EAC5B,KAAC,EAnFiB,GA6FT+0C,GAAa,wCAiErB,OAjEqB,0CAMtB,WACI,IAAMl0C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK21C,yBAAyBn0C,EAClC,GACA,qBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK41C,sBAAsB5uC,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK61C,0BAA0BxpC,KAAK7K,KAElD,GACA,kBA+BA,WAEI,OADUxB,EAAK81C,mBAAmBzpC,KAAK7K,OACxB,CACnB,GACA,+BAGA,WACI,IAAIb,EAAMX,EAAK+1C,gCAAgC1pC,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAY2L,GAAaxF,OAAO5F,EACvD,GACA,+BAGA,WACI,IAAIA,EAAMX,EAAKg2C,gCAAgC3pC,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAYoP,GAAcjJ,OAAO5F,EACxD,IAAC,qBArFD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOujC,EAActjC,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,uBAqCD,SAAiB2F,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKi2C,wBAAwBvvC,EAAME,GAC7C,OAAO8uC,EAAcnvC,OAAO5F,EAChC,GACA,gCAIA,SAA0BkvC,GACtBjqC,EAAaiqC,EAAe9jC,IAC5B,IAAIpL,EAAMX,EAAKk2C,iCAAiCrG,EAAcruC,KAC9D,OAAOk0C,EAAcnvC,OAAO5F,EAChC,GACA,gCAIA,SAA0Bw1C,GACtBvwC,EAAauwC,EAAgB3mC,IAC7B,IAAI7O,EAAMX,EAAKo2C,iCAAiCD,EAAe30C,KAC/D,OAAOk0C,EAAcnvC,OAAO5F,EAChC,KAAC,EAjEqB,GAyFbiN,GAAc,wCAqHtB,OArHsB,0CAMvB,WACI,IAAMpM,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKq2C,0BAA0B70C,EACnC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKs2C,wBAAwBtvC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKu2C,uBAAuBvvC,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKw2C,2BAA2BnqC,KAAK7K,KAEnD,GACA,kBAaA,WACI,IAAIb,EAAMX,EAAKy2C,oBAAoBpqC,KAAK7K,KACxC,OAAe,WAARb,OAAmBP,EAAYO,CAC1C,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK02C,oBAAoBrqC,KAAK7K,KACxC,OAAe,IAARb,OAAYP,EAAYyuB,GAAKtoB,OAAO5F,EAC/C,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK22C,oBAAoBtqC,KAAK7K,KACxC,OAAe,IAARb,OAAYP,EAAYkvB,GAAK/oB,OAAO5F,EAC/C,IACA,qBA/FA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOvE,EAAewE,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK42C,0BAA0BlwC,EAAME,GAC/C,OAAOgH,EAAerH,OAAO5F,EACjC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK62C,yBAAyBnwC,EAAME,GAC9C,OAAOgH,EAAerH,OAAO5F,EACjC,GAAC,iBA4BD,SAAWm2C,EAAMC,EAAMC,GACnB,IAAItwC,EAAO,EACNtD,EAAW2zC,KACZnxC,EAAamxC,EAAMloB,IACnBnoB,EAAOqwC,EAAKv1C,IACZu1C,EAAKv1C,IAAM,GAEf,IAAI4G,EAAO,EACNhF,EAAW4zC,KACZpxC,EAAaoxC,EAAM1nB,IACnBlnB,EAAO4uC,EAAKx1C,IACZw1C,EAAKx1C,IAAM,GAEf,IAAIb,EAAMX,EAAKi3C,mBAAmB7zC,EAAW0zC,GAAQ,SAAWA,EAAMpwC,EAAM0B,GAC5E,OAAOwF,EAAerH,OAAO5F,EACjC,KAAC,EArHsB,GAwHdkN,GAAc,wCAkGtB,OAlGsB,0CAMvB,WACI,IAAMrM,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKk3C,0BAA0B11C,EACnC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKm3C,wBAAwBnwC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKo3C,uBAAuBpwC,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKq3C,2BAA2BhrC,KAAK7K,KAEnD,GACA,kBAaA,WACI,IAAIb,EAAMX,EAAKs3C,oBAAoBjrC,KAAK7K,KACxC,OAAe,WAARb,OAAmBP,EAAYO,CAC1C,GACA,sBAGA,WACI,IAAIA,EAAMX,EAAK23B,uBAAuBtrB,KAAK7K,KAC3C,OAAO0hB,GAAiB3c,OAAO5F,EACnC,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOtE,EAAeuE,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKu3C,0BAA0B7wC,EAAME,GAC/C,OAAOiH,EAAetH,OAAO5F,EACjC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKw3C,yBAAyB9wC,EAAME,GAC9C,OAAOiH,EAAetH,OAAO5F,EACjC,GAAC,iBAoBD,SAAWm2C,EAAMvzB,GACb3d,EAAa2d,EAAUL,IACvB,IAAIviB,EAAMX,EAAKy3C,mBAAmBr0C,EAAW0zC,GAAQ,SAAWA,EAAMvzB,EAAS/hB,KAC/E,OAAOqM,EAAetH,OAAO5F,EACjC,KAAC,EAlGsB,GAqGdsW,GAAe,wCAiHvB,OAjHuB,0CAMxB,WACI,IAAMzV,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK03C,2BAA2Bl2C,EACpC,GACA,wBAqBA,WACI,IAAIb,EAAMX,EAAK23C,2BAA2BtrC,KAAK7K,KAC/C,OAAe,IAARb,OAAYP,EAAYmlB,GAAehf,OAAO5F,EACzD,GACA,2BAGA,WACI,IAAIA,EAAMX,EAAK43C,8BAA8BvrC,KAAK7K,KAClD,OAAe,IAARb,OAAYP,EAAYyzB,GAAWttB,OAAO5F,EACrD,GACA,kBAGA,WAEI,OADUX,EAAK63C,qBAAqBxrC,KAAK7K,OAC1B,CACnB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK83C,yBAAyB9wC,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+3C,wBAAwB/wC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKg4C,4BAA4B3rC,KAAK7K,KAEpD,IACA,qBAvGA,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8E,EAAgB7E,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,0BAcD,SAAoB85B,GAChB91B,EAAa81B,EAAMnW,IACnB,IAAI5kB,EAAMX,EAAKi4C,6BAA6Bvc,EAAKl6B,KACjD,OAAOyV,EAAgB1Q,OAAO5F,EAClC,GACA,6BAIA,SAAuB+6B,GACnB91B,EAAa81B,EAAM7H,IACnB,IAAIlzB,EAAMX,EAAKk4C,gCAAgCxc,EAAKl6B,KACpD,OAAOyV,EAAgB1Q,OAAO5F,EAClC,GAAC,wBA2CD,SAAkB8F,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKm4C,2BAA2BzxC,EAAME,GAChD,OAAOqQ,EAAgB1Q,OAAO5F,EAClC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKo4C,0BAA0B1xC,EAAME,GAC/C,OAAOqQ,EAAgB1Q,OAAO5F,EAClC,KAAC,EAjHuB,GAoHfyxB,GAAgB,wCAiFxB,OAjFwB,0CAMzB,WACI,IAAM5wB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKq4C,4BAA4B72C,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKs4C,0BAA0BtxC,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKu4C,yBAAyBvxC,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKw4C,6BAA6BnsC,KAAK7K,KAErD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKy4C,qBAAqBpsC,KAAK7K,IAAKgS,GAC9C,OAAOyD,GAAgB1Q,OAAO5F,EAClC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMuD,IACnBjX,EAAK04C,qBAAqBrsC,KAAK7K,IAAKkS,EAAKlS,IAC7C,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOigB,EAAiBhgB,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK24C,4BAA4BjyC,EAAME,GACjD,OAAOwrB,EAAiB7rB,OAAO5F,EACnC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK44C,2BAA2BlyC,EAAME,GAChD,OAAOwrB,EAAiB7rB,OAAO5F,EACnC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKwmB,uBACf,OAAO4L,EAAiB7rB,OAAO5F,EACnC,KAAC,EAjFwB,GA0GhBqM,GAAe,wCAmGvB,OAnGuB,0CAMxB,WACI,IAAMxL,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK64C,2BAA2Br3C,EACpC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK84C,yBAAyB9xC,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+4C,wBAAwB/xC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKg5C,4BAA4B3sC,KAAK7K,KAEpD,GACA,8BAaA,WACI,IAAIb,EAAMX,EAAKi5C,iCAAiC5sC,KAAK7K,KACrD,OAAOyV,GAAgB1Q,OAAO5F,EAClC,GACA,0BAGA,WACI,IAAIA,EAAMX,EAAKk5C,6BAA6B7sC,KAAK7K,KACjD,OAAO+jB,GAAehf,OAAO5F,EACjC,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOnF,EAAgBoF,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKm5C,2BAA2BzyC,EAAME,GAChD,OAAOoG,EAAgBzG,OAAO5F,EAClC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKo5C,0BAA0B1yC,EAAME,GAC/C,OAAOoG,EAAgBzG,OAAO5F,EAClC,GAAC,iBAoBD,SAAW04C,EAAkB/U,GACzB1+B,EAAayzC,EAAkBpiC,IAC/BrR,EAAa0+B,EAAc/e,IAC3B,IAAI5kB,EAAMX,EAAKs5C,oBAAoBD,EAAiB73C,IAAK8iC,EAAa9iC,KACtE,OAAOwL,EAAgBzG,OAAO5F,EAClC,KAAC,EAnGuB,GAsGfoM,GAAmB,wCA0F3B,OA1F2B,0CAM5B,WACI,IAAMvL,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKu5C,+BAA+B/3C,EACxC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKw5C,6BAA6BxyC,EAAQqF,KAAK7K,KAC/C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKy5C,4BAA4BzyC,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK05C,gCAAgCrtC,KAAK7K,KAExD,GACA,8BAaA,WACI,IAAIb,EAAMX,EAAKi5C,iCAAiC5sC,KAAK7K,KACrD,OAAOyV,GAAgB1Q,OAAO5F,EAClC,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOpF,EAAoBqF,WAE9C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK25C,+BAA+BjzC,EAAME,GACpD,OAAOmG,EAAoBxG,OAAO5F,EACtC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK45C,8BAA8BlzC,EAAME,GACnD,OAAOmG,EAAoBxG,OAAO5F,EACtC,GAAC,iBAYD,SAAW04C,GACPzzC,EAAayzC,EAAkBpiC,IAC/B,IAAItW,EAAMX,EAAK65C,wBAAwBR,EAAiB73C,KACxD,OAAOuL,EAAoBxG,OAAO5F,EACtC,KAAC,EA1F2B,GA6FnBmM,GAAiB,wCA0FzB,OA1FyB,0CAM1B,WACI,IAAMtL,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK85C,6BAA6Bt4C,EACtC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+5C,2BAA2B/yC,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKy5C,4BAA4BzyC,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKg6C,8BAA8B3tC,KAAK7K,KAEtD,GACA,8BAaA,WACI,IAAIb,EAAMX,EAAKi5C,iCAAiC5sC,KAAK7K,KACrD,OAAOyV,GAAgB1Q,OAAO5F,EAClC,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOrF,EAAkBsF,WAE5C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKi6C,6BAA6BvzC,EAAME,GAClD,OAAOkG,EAAkBvG,OAAO5F,EACpC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKk6C,4BAA4BxzC,EAAME,GACjD,OAAOkG,EAAkBvG,OAAO5F,EACpC,GAAC,iBAYD,SAAW04C,GACPzzC,EAAayzC,EAAkBpiC,IAC/B,IAAItW,EAAMX,EAAK65C,wBAAwBR,EAAiB73C,KACxD,OAAOsL,EAAkBvG,OAAO5F,EACpC,KAAC,EA1FyB,GA6FjBw5C,GAAO,wCAqBf,OArBe,0CAMhB,WACI,IAAM34C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKo6C,mBAAmB54C,EAC5B,GACA,iBAUA,WAEI,OADUxB,EAAKqiB,aAAahW,KAAK7K,OAClB,CACnB,GACA,iBAIA,SAAIgS,GACA,IACI,IAAMxM,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKq6C,YAAYrzC,EAAQqF,KAAK7K,IAAKgS,GACnC,IAAItM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,iBAGA,SAAIuM,GACA,IAAIhN,EAAOjE,EAAkBiR,EAAM1T,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACX7B,EAAKs6C,YAAYjuC,KAAK7K,IAAKkF,EAAME,EACrC,IAAC,qBApDD,SAAcpF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOgoC,EAAQ/nC,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAKs/B,oBACf,OAAO6a,EAAQ5zC,OAAO5F,EAC1B,KAAC,EArBe,GAwDP0N,GAAc,wCA0FtB,OA1FsB,0CAMvB,WACI,IAAM7M,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKu6C,0BAA0B/4C,EACnC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKw6C,wBAAwBxzC,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKy6C,uBAAuBzzC,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK06C,2BAA2BruC,KAAK7K,KAEnD,GACA,kBAaA,WACI,IAAIb,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO9D,EAAe+D,WAEzC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK26C,0BAA0Bj0C,EAAME,GAC/C,OAAOyH,EAAe9H,OAAO5F,EACjC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK46C,yBAAyBl0C,EAAME,GAC9C,OAAOyH,EAAe9H,OAAO5F,EACjC,GAAC,iBAYD,SAAW0sB,GACPznB,EAAaynB,EAAM/mB,IACnB,IAAI3F,EAAMX,EAAK66C,mBAAmBxtB,EAAK7rB,KACvC,OAAO6M,EAAe9H,OAAO5F,EACjC,KAAC,EA1FsB,GA6FdyN,GAAa,wCA0FrB,OA1FqB,0CAMtB,WACI,IAAM5M,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK86C,yBAAyBt5C,EAClC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+6C,uBAAuB/zC,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKy6C,uBAAuBzzC,EAAQqF,KAAK7K,KACzC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKg7C,0BAA0B3uC,KAAK7K,KAElD,GACA,kBAaA,WACI,IAAIb,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBAjFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO/D,EAAcgE,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKi7C,yBAAyBv0C,EAAME,GAC9C,OAAOwH,EAAc7H,OAAO5F,EAChC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKk7C,wBAAwBx0C,EAAME,GAC7C,OAAOwH,EAAc7H,OAAO5F,EAChC,GAAC,iBAYD,SAAW0sB,GACPznB,EAAaynB,EAAM/mB,IACnB,IAAI3F,EAAMX,EAAK66C,mBAAmBxtB,EAAK7rB,KACvC,OAAO4M,EAAc7H,OAAO5F,EAChC,KAAC,EA1FqB,GA6FbwF,GAAW,wCA8HnB,OA9HmB,0CAMpB,WACI,IAAM3E,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKm7C,uBAAuB35C,EAChC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKo7C,qBAAqBp0C,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKq7C,oBAAoBr0C,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKs7C,wBAAwBjvC,KAAK7K,KAEhD,GACA,kBAaA,WACI,IAAIb,EAAMX,EAAKu7C,iBAAiBlvC,KAAK7K,KACrC,OAAO4I,GAAgB7D,OAAO5F,EAClC,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKw7C,wBAAwBnvC,KAAK7K,KAC5C,OAAOi6C,GAAsBl1C,OAAO5F,EACxC,GACA,sBAGA,WAEI,OAAe,IADLX,EAAK07C,qBAAqBrvC,KAAK7K,IAE7C,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAK27C,2BAA2BtvC,KAAK7K,KAC/C,OAAe,IAARb,OAAYP,EAAY4J,GAAczD,OAAO5F,EACxD,GACA,0BAGA,SAAai7C,GACT57C,EAAK67C,yBAAyBxvC,KAAK7K,IAAKo6C,EAC5C,IACA,qBA5GA,SAAcp6C,GACV,IAAMI,EAAMgL,OAAOuF,OAAOhM,EAAYiM,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK87C,uBAAuBp1C,EAAME,GAC5C,OAAOT,EAAYI,OAAO5F,EAC9B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK+7C,sBAAsBr1C,EAAME,GAC3C,OAAOT,EAAYI,OAAO5F,EAC9B,GAAC,iBAyCD,SAAWq7C,EAAMC,EAAalyC,GAC1BnE,EAAao2C,EAAM5xC,IACnBxE,EAAaq2C,EAAaR,IAC1B,IAAI/0C,EAAO,EACNtD,EAAW2G,KACZnE,EAAamE,EAAgBC,IAC7BtD,EAAOqD,EAAevI,IACtBuI,EAAevI,IAAM,GAEzB,IAAIb,EAAMX,EAAKk8C,gBAAgBF,EAAKx6C,IAAKy6C,EAAYz6C,IAAKkF,GAC1D,OAAOP,EAAYI,OAAO5F,EAC9B,KAAC,EA9HmB,GAiIXwa,GAAiB,wCAiFzB,OAjFyB,0CAM1B,WACI,IAAM3Z,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKm8C,6BAA6B36C,EACtC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKo8C,2BAA2Bp1C,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKq8C,0BAA0Br1C,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKs8C,8BAA8BjwC,KAAK7K,KAEtD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKu8C,sBAAsBlwC,KAAK7K,IAAKgS,GAC/C,OAAOpJ,GAAgB7D,OAAO5F,EAClC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMtJ,IACnBpK,EAAKw8C,sBAAsBnwC,KAAK7K,IAAKkS,EAAKlS,IAC9C,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOgJ,EAAkB/I,WAE5C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKy8C,6BAA6B/1C,EAAME,GAClD,OAAOuU,EAAkB5U,OAAO5F,EACpC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK08C,4BAA4Bh2C,EAAME,GACjD,OAAOuU,EAAkB5U,OAAO5F,EACpC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKshB,mBACf,OAAOnG,EAAkB5U,OAAO5F,EACpC,KAAC,EAjFyB,GA0GjByJ,GAAe,wCAgTvB,OAhTuB,0CAMxB,WACI,IAAM5I,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK28C,2BAA2Bn7C,EACpC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK48C,yBAAyB51C,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK68C,wBAAwB71C,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK88C,4BAA4BzwC,KAAK7K,KAEpD,GACA,oBAaA,WACI,IAAIb,EAAMX,EAAK+8C,uBAAuB1wC,KAAK7K,KAC3C,OAAOw7C,GAAkBz2C,OAAO5F,EACpC,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAKi9C,wBAAwB5wC,KAAK7K,KAC5C,OAAO07C,GAAmB32C,OAAO5F,EACrC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKm9C,oBAAoB9wC,KAAK7K,KACxC,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,uBAGA,SAAUy8C,GACNx3C,EAAaw3C,EAAOv8B,IACpB7gB,EAAKq9C,0BAA0BhxC,KAAK7K,IAAK47C,EAAM57C,IACnD,GACA,mBAGA,WACI,IAAIb,EAAMX,EAAKs9C,sBAAsBjxC,KAAK7K,KAC1C,OAAe,IAARb,OAAYP,EAAYygB,GAAata,OAAO5F,EACvD,GACA,6BAGA,SAAgB48C,GACZ33C,EAAa23C,EAAaC,IAC1Bx9C,EAAKy9C,gCAAgCpxC,KAAK7K,IAAK+7C,EAAY/7C,IAC/D,GACA,yBAGA,WACI,IAAIb,EAAMX,EAAK09C,4BAA4BrxC,KAAK7K,KAChD,OAAe,IAARb,OAAYP,EAAYo9C,GAAYj3C,OAAO5F,EACtD,GACA,wBAGA,SAAW8iC,GACP79B,EAAa69B,EAAQka,IACrB39C,EAAK49C,2BAA2BvxC,KAAK7K,IAAKiiC,EAAOjiC,IACrD,GACA,oBAGA,WACI,IAAIb,EAAMX,EAAK69C,uBAAuBxxC,KAAK7K,KAC3C,OAAe,IAARb,OAAYP,EAAYu9C,GAAOp3C,OAAO5F,EACjD,GACA,qCAGA,SAAwBm9C,GACpBl4C,EAAak4C,EAAqB7zC,IAClCjK,EAAK+9C,wCAAwC1xC,KAAK7K,IAAKs8C,EAAoBt8C,IAC/E,GACA,iCAGA,WACI,IAAIb,EAAMX,EAAKg+C,oCAAoC3xC,KAAK7K,KACxD,OAAe,IAARb,OAAYP,EAAY6J,GAAkB1D,OAAO5F,EAC5D,GACA,yCAGA,SAA4Bs9C,GACxBr4C,EAAaq4C,EAAyB33C,IACtCtG,EAAKk+C,4CAA4C7xC,KAAK7K,IAAKy8C,EAAwBz8C,IACvF,GACA,qCAGA,WACI,IAAIb,EAAMX,EAAKm+C,wCAAwC9xC,KAAK7K,KAC5D,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,sBAGA,SAASy9C,GACLx4C,EAAaw4C,EAAM7tC,IACnBvQ,EAAKq+C,yBAAyBhyC,KAAK7K,IAAK48C,EAAK58C,IACjD,GACA,kBAGA,WACI,IAAIb,EAAMX,EAAKs+C,qBAAqBjyC,KAAK7K,KACzC,OAAe,IAARb,OAAYP,EAAYmQ,GAAKhK,OAAO5F,EAC/C,GACA,kCAGA,SAAqB49C,GACjB34C,EAAa24C,EAAkBrzC,IAC/BlL,EAAKw+C,qCAAqCnyC,KAAK7K,IAAK+8C,EAAiB/8C,IACzE,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAKy+C,iCAAiCpyC,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAY8K,GAAe3E,OAAO5F,EACzD,GACA,4BAGA,SAAe+9C,GACX94C,EAAa84C,EAAY1B,IACzBh9C,EAAK2+C,+BAA+BtyC,KAAK7K,IAAKk9C,EAAWl9C,IAC7D,GACA,wBAGA,WACI,IAAIb,EAAMX,EAAK4+C,2BAA2BvyC,KAAK7K,KAC/C,OAAe,IAARb,OAAYP,EAAY48C,GAAkBz2C,OAAO5F,EAC5D,GACA,kCAGA,SAAqBk+C,GACjBj5C,EAAai5C,EAAkB94B,IAC/B/lB,EAAK8+C,qCAAqCzyC,KAAK7K,IAAKq9C,EAAiBr9C,IACzE,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAK++C,iCAAiC1yC,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAY2lB,GAAiBxf,OAAO5F,EAC3D,GACA,4BAGA,SAAeq6B,GACXp1B,EAAao1B,EAAYd,IACzBl6B,EAAKg/C,+BAA+B3yC,KAAK7K,IAAKw5B,EAAWx5B,IAC7D,GACA,wBAGA,WACI,IAAIb,EAAMX,EAAKi/C,2BAA2B5yC,KAAK7K,KAC/C,OAAe,IAARb,OAAYP,EAAY85B,GAAU3zB,OAAO5F,EACpD,GACA,mCAGA,SAAsBu+C,GAClBt5C,EAAas5C,EAAmBtzC,IAChC5L,EAAKm/C,sCAAsC9yC,KAAK7K,IAAK09C,EAAkB19C,IAC3E,GACA,+BAGA,WACI,IAAIb,EAAMX,EAAKo/C,kCAAkC/yC,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAYwL,GAAkBrF,OAAO5F,EAC5D,GACA,kCAGA,SAAqB0+C,GACjBz5C,EAAay5C,EAAkB/4C,IAC/BtG,EAAKs/C,qCAAqCjzC,KAAK7K,IAAK69C,EAAiB79C,IACzE,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAKu/C,iCAAiClzC,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,kCAGA,SAAqB6+C,GACjB55C,EAAa45C,EAAkBxC,IAC/Bh9C,EAAKy/C,qCAAqCpzC,KAAK7K,IAAKg+C,EAAiBh+C,IACzE,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAK0/C,iCAAiCrzC,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAY48C,GAAkBz2C,OAAO5F,EAC5D,GACA,iBAuBA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2/C,oBAAoB34C,EAAQqF,KAAK7K,KACtC,IAEI4F,EAFAF,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GAMxC,OAJW,IAAPE,IACAE,EAAK1B,EAAoBwB,EAAIC,GAAInE,QACjChD,EAAKqH,gBAAgBH,EAAS,EAALC,IAEtBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAnUD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAO/H,EAAgBgI,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4/C,2BAA2Bl5C,EAAME,GAChD,OAAOwD,EAAgB7D,OAAO5F,EAClC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK6/C,0BAA0Bn5C,EAAME,GAC/C,OAAOwD,EAAgB7D,OAAO5F,EAClC,GAAC,iBA0ND,SAAWm/C,EAAQC,EAASC,EAAKC,GAC7Br6C,EAAak6C,EAAQ9C,IACrBp3C,EAAam6C,EAAS7C,IACtBt3C,EAAao6C,EAAK15C,IAClB,IAAII,EAAO,EACNtD,EAAW68C,KACZr6C,EAAaq6C,EAAK35C,IAClBI,EAAOu5C,EAAIz+C,IACXy+C,EAAIz+C,IAAM,GAEd,IAAIb,EAAMX,EAAKkgD,oBAAoBJ,EAAOt+C,IAAKu+C,EAAQv+C,IAAKw+C,EAAIx+C,IAAKkF,GACrE,OAAO0D,EAAgB7D,OAAO5F,EAClC,KAAC,EAhTuB,GAuUfw/C,GAAkB,wCAyR1B,OAzR0B,0CAM3B,WACI,IAAM3+C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKogD,8BAA8B5+C,EACvC,GACA,6BAWA,SAAgBs+C,EAAQO,GACpBz6C,EAAak6C,EAAQQ,IACrB16C,EAAay6C,EAAgBpvC,IAC7BjR,EAAKugD,mCAAmCl0C,KAAK7K,IAAKs+C,EAAOt+C,IAAK6+C,EAAe7+C,IACjF,GACA,uBAIA,SAAUg/C,EAAMC,GACZ76C,EAAa46C,EAAME,IACnB,IAAIh6C,EAAO,EACNtD,EAAWq9C,KACZ76C,EAAa66C,EAAgB/K,IAC7BhvC,EAAO+5C,EAAej/C,IACtBi/C,EAAej/C,IAAM,GAEzBxB,EAAK2gD,6BAA6Bt0C,KAAK7K,IAAKg/C,EAAKh/C,IAAKkF,EAC1D,GACA,iCAGA,SAAoB85C,GAChB56C,EAAa46C,EAAME,IACnB1gD,EAAK4gD,uCAAuCv0C,KAAK7K,IAAKg/C,EAAKh/C,IAC/D,GACA,2BAOA,SAAcq/C,EAAS/5B,EAAO4O,GAC1B9vB,EAAai7C,EAAS5vC,IACtBrL,EAAakhB,EAAOg6B,IACpBl7C,EAAa8vB,EAAQnqB,IACrB,IAAI5K,EAAMX,EAAK+gD,iCAAiC10C,KAAK7K,IAAKq/C,EAAQr/C,IAAKslB,EAAMtlB,IAAKk0B,EAAOl0B,KACzF,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,wBAIA,SAAW+K,GACP9F,EAAa8F,EAAQE,IACrB5L,EAAKghD,8BAA8B30C,KAAK7K,IAAKkK,EAAOlK,IACxD,GACA,+BAIA,SAAkBqH,GACdjD,EAAaiD,EAAeE,IAC5B/I,EAAKihD,qCAAqC50C,KAAK7K,IAAKqH,EAAcrH,IACtE,GACA,kCAIA,SAAqBqH,GACjBjD,EAAaiD,EAAeE,IAC5B/I,EAAKkhD,wCAAwC70C,KAAK7K,IAAKqH,EAAcrH,IACzE,GACA,6BAIA,SAAgB8I,GACZ1E,EAAa0E,EAAaC,IAC1BvK,EAAKmhD,mCAAmC90C,KAAK7K,IAAK8I,EAAY9I,IAClE,GACA,+BAIA,SAAkBquC,GACdjqC,EAAaiqC,EAAe9jC,IAC5B/L,EAAKohD,qCAAqC/0C,KAAK7K,IAAKquC,EAAcruC,IACtE,GACA,6BAKA,SAAgB6/C,EAAaZ,GACzB76C,EAAay7C,EAAariC,IAC1B,IAAItY,EAAO,EACNtD,EAAWq9C,KACZ76C,EAAa66C,EAAgB/K,IAC7BhvC,EAAO+5C,EAAej/C,IACtBi/C,EAAej/C,IAAM,GAEzBxB,EAAKshD,mCAAmCj1C,KAAK7K,IAAK6/C,EAAY7/C,IAAKkF,EACvE,GACA,4BAKA,SAAegF,GACX9F,EAAa8F,EAAQE,IACrB,IAAIjL,EAAMX,EAAKuhD,kCAAkCl1C,KAAK7K,IAAKkK,EAAOlK,KAClE,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,qBAGA,SAAQs/C,GACJr6C,EAAaq6C,EAAK35C,IAClBtG,EAAKwhD,2BAA2Bn1C,KAAK7K,IAAKy+C,EAAIz+C,IAClD,GACA,yCAGA,SAA4By8C,GACxBr4C,EAAaq4C,EAAyB33C,IACtCtG,EAAKyhD,+CAA+Cp1C,KAAK7K,IAAKy8C,EAAwBz8C,IAC1F,GACA,4BAKA,SAAekgD,EAAgBC,EAAMlB,GACjC76C,EAAa87C,EAAgB9vC,IAC7BhM,EAAa+7C,EAAMr7C,IACnB,IAAII,EAAO,EACNtD,EAAWq9C,KACZ76C,EAAa66C,EAAgB/K,IAC7BhvC,EAAO+5C,EAAej/C,IACtBi/C,EAAej/C,IAAM,GAEzBxB,EAAK4hD,kCAAkCv1C,KAAK7K,IAAKkgD,EAAelgD,IAAKmgD,EAAKngD,IAAKkF,EACnF,GACA,4BAGA,WACI,IAAI/F,EAAMX,EAAK6hD,kCAAkCx1C,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAY4J,GAAczD,OAAO5F,EACxD,GACA,gCAKA,SAAmBoJ,GACfnE,EAAamE,EAAgBC,IAC7BhK,EAAK8hD,sCAAsCz1C,KAAK7K,IAAKuI,EAAevI,IACxE,GACA,0BAKA,SAAauF,GACTnB,EAAamB,EAAUiO,IACvBhV,EAAK+hD,gCAAgC11C,KAAK7K,IAAKuF,EAASvF,IAC5D,GACA,2BAMA,SAAc2H,EAAK5F,GACfqC,EAAauD,EAAK7C,IAClBV,EAAarC,EAAKsD,IAClB7G,EAAKgiD,iCAAiC31C,KAAK7K,IAAK2H,EAAI3H,IAAK+B,EAAI/B,IACjE,GACA,gCAMA,SAAmB2H,EAAK5F,GACpBqC,EAAauD,EAAK7C,IAClB,IAAII,EAAOjE,EAAkBc,EAAKvD,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACX7B,EAAKiiD,sCAAsC51C,KAAK7K,IAAK2H,EAAI3H,IAAKkF,EAAME,EACxE,GACA,4CAOA,SAA+BuC,EAAK5F,EAAKiE,GACrC5B,EAAauD,EAAK7C,IAClB,IAAII,EAAOjE,EAAkBc,EAAKvD,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACX7B,EAAKkiD,kDAAkD71C,KAAK7K,IAAK2H,EAAI3H,IAAKkF,EAAME,EAAMY,EAC1F,GACA,kBAIA,WACI,IAAI7G,EAAMX,EAAKmiD,wBAAwB91C,KAAK7K,KAC5C,OAAe,IAARb,OAAYP,EAAYmQ,GAAKhK,OAAO5F,EAC/C,GACA,0BAGA,WACI,IAAIA,EAAMX,EAAKoiD,gCAAgC/1C,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAYygB,GAAata,OAAO5F,EACvD,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKqiD,+BAA+Bh2C,KAAK7K,KACnD,OAAe,IAARb,OAAYP,EAAYo9C,GAAYj3C,OAAO5F,EACtD,GACA,4BAIA,WACI,IAAIA,EAAMX,EAAKsiD,kCAAkCj2C,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAY+U,GAAc5O,OAAO5F,EACxD,GACA,sBAUA,SAASg2B,EAAW4rB,EAAa9B,GAC7B76C,EAAa+wB,EAAW9C,IACxBjuB,EAAa28C,EAAazuB,IAC1B,IAAIptB,EAAO,EACNtD,EAAWq9C,KACZ76C,EAAa66C,EAAgB/K,IAC7BhvC,EAAO+5C,EAAej/C,IACtBi/C,EAAej/C,IAAM,GAEzBxB,EAAKwiD,4BAA4Bn2C,KAAK7K,IAAKm1B,EAAUn1B,IAAK+gD,EAAY/gD,IAAKkF,EAC/E,GACA,8BAYA,WACI,IAAI/F,EAAMX,EAAKyiD,oCAAoCp2C,KAAK7K,KACxD,OAAe,IAARb,OAAYP,EAAY8K,GAAe3E,OAAO5F,EACzD,GACA,4BAGA,SAAe6/C,GACX56C,EAAa46C,EAAME,IACnB1gD,EAAK0iD,kCAAkCr2C,KAAK7K,IAAKg/C,EAAKh/C,IAC1D,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAK2iD,kCAAkCt2C,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAY48C,GAAkBz2C,OAAO5F,EAC5D,GACA,iCAGA,SAAoBiiD,GAChBh9C,EAAag9C,EAAiBr9B,IAC9BvlB,EAAK6iD,uCAAuCx2C,KAAK7K,IAAKohD,EAAgBphD,IAC1E,GACA,8BAGA,WACI,IAAIb,EAAMX,EAAK8iD,oCAAoCz2C,KAAK7K,KACxD,OAAe,IAARb,OAAYP,EAAY2lB,GAAiBxf,OAAO5F,EAC3D,GACA,4BAGA,SAAeq6B,GACXp1B,EAAao1B,EAAYd,IACzB,IAAIxzB,EAAOs0B,EAAWx5B,IACtBw5B,EAAWx5B,IAAM,EACjBxB,EAAK+iD,kCAAkC12C,KAAK7K,IAAKkF,EACrD,GACA,wBAGA,WACI,IAAI/F,EAAMX,EAAKgjD,8BAA8B32C,KAAK7K,KAClD,OAAe,IAARb,OAAYP,EAAY85B,GAAU3zB,OAAO5F,EACpD,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAKijD,6BAA6B52C,KAAK7K,KACjD,OAAe,IAARb,OAAYP,EAAY4K,GAAUzE,OAAO5F,EACpD,GACA,gCAIA,WACI,IAAIA,EAAMX,EAAKkjD,sCAAsC72C,KAAK7K,KAC1D,OAAO+J,GAAMhF,OAAO5F,EACxB,GACA,gCAIA,WACI,IAAIA,EAAMX,EAAKmjD,sCAAsC92C,KAAK7K,KAC1D,OAAO+J,GAAMhF,OAAO5F,EACxB,GACA,6BAIA,WACI,IAAIA,EAAMX,EAAKojD,mCAAmC/2C,KAAK7K,KACvD,OAAO+J,GAAMhF,OAAO5F,EACxB,GACA,8BAIA,WACI,IAAIA,EAAMX,EAAKqjD,oCAAoCh3C,KAAK7K,KACxD,OAAO+J,GAAMhF,OAAO5F,EACxB,GACA,iCAIA,WACI,IAAIA,EAAMX,EAAKsjD,uCAAuCj3C,KAAK7K,KAC3D,OAAO+J,GAAMhF,OAAO5F,EACxB,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKujD,+BAA+Bl3C,KAAK7K,KACnD,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,4BAGA,WACI,IAAIA,EAAMX,EAAKwjD,kCAAkCn3C,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,qBAQA,SAAQ0/C,EAAgBn0C,GACpBtG,EAAay6C,EAAgBpvC,IAC7B,IAAIvK,EAAO,EACNtD,EAAW8I,KACZtG,EAAasG,EAAOwY,IACpBhe,EAAOwF,EAAM1K,IACb0K,EAAM1K,IAAM,GAEhBxB,EAAKyjD,2BAA2Bp3C,KAAK7K,IAAK6+C,EAAe7+C,IAAKkF,EAClE,GACA,sBAIA,WACI,IACI,IAAMM,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0jD,4BAA4B18C,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAGA,WAEI,OADUjH,EAAK2jD,6BAA6Bt3C,KAAK7K,OAClC,CACnB,GACA,0BAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4jD,gCAAgC58C,EAAQqF,KAAK7K,KAClD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAKS,EAAqBX,EAAIC,GAAInE,QAEtC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAGA,WACI,IAAItG,EAAMX,EAAK6jD,2BAA2Bx3C,KAAK7K,KAC/C,OAAO07C,GAAmB32C,OAAO5F,EACrC,GACA,uBAiBA,SAAUmjD,EAAkBC,EAA2BC,GACnD,IAAMxiD,EAAM6K,KAAK6E,qBACbxK,EAAO,EACNtD,EAAW0gD,KACZl+C,EAAak+C,EAAkBxD,IAC/B55C,EAAOo9C,EAAiBtiD,IACxBsiD,EAAiBtiD,IAAM,GAE3B,IAAI4G,EAAO,EAOX,OANKhF,EAAW2gD,KACZn+C,EAAam+C,EAA2B9yC,IACxC7I,EAAO27C,EAA0BviD,IACjCuiD,EAA0BviD,IAAM,GAG7Bd,EADGV,EAAKikD,6BAA6BziD,EAAKkF,EAAM0B,EAAMhF,EAAW4gD,GAAe,SAAWA,EAAc,EAAI,GAExH,GACA,sBAMA,WACI,IAAIrjD,EAAMX,EAAKkkD,4BAA4B73C,KAAK7K,KAChD,OAAO2E,GAAYI,OAAO5F,EAC9B,GACA,qBAMA,WACI,IAAIA,EAAMX,EAAKmkD,2BAA2B93C,KAAK7K,KAC/C,OAAO8E,GAAOC,OAAO5F,EACzB,IAAC,qBAjgBD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOguC,EAAmB/tC,WAE7C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAgRD,SAAWwiD,GACPx+C,EAAaw+C,EAAKC,IAClB,IAAI1jD,EAAMX,EAAKskD,uBAAuBF,EAAI5iD,KAC1C,OAAO2+C,EAAmB55C,OAAO5F,EACrC,KAAC,EAzR0B,GAqgBlB0jD,GAAwB,wCAKhC,OALgC,0CAMjC,WACI,IAAM7iD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKukD,oCAAoC/iD,EAC7C,IAAC,qBAbD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOkyC,EAAyBjyC,WAEnD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,KAAC,EALgC,GAiBxB4iD,GAA+B,wCAqBvC,OArBuC,0CAMxC,WACI,IAAMhjD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKykD,2CAA2CjjD,EACpD,GACA,sBAWA,SAASkjD,GACL9+C,EAAa8+C,EAAUt+C,IACvB,IAAIzF,EAAMX,EAAK2kD,yCAAyCt4C,KAAK7K,IAAKkjD,EAASljD,KAC3E,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,iCAIA,SAAoBgL,GAChB/F,EAAa+F,EAAqBrF,IAClC,IAAI3F,EAAMX,EAAK4kD,oDAAoDv4C,KAAK7K,IAAKmK,EAAoBnK,KACjG,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,0BAIA,SAAa0K,GACTzF,EAAayF,EAAc/E,IAC3B,IAAI3F,EAAMX,EAAK6kD,6CAA6Cx4C,KAAK7K,IAAK6J,EAAa7J,KACnF,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,yBAIA,SAAY2K,GACR1F,EAAa0F,EAAahF,IAC1B,IAAI3F,EAAMX,EAAK8kD,4CAA4Cz4C,KAAK7K,IAAK8J,EAAY9J,KACjF,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,4BAIA,SAAeopC,GACX,IAAIppC,EAAMX,EAAK+kD,+CAA+C14C,KAAK7K,IAAKuoC,GACxE,OAAOya,EAAgCj+C,OAAO5F,EAClD,GACA,yBAIA,SAAYkmC,GACR,IAAIlmC,EAAMX,EAAKglD,4CAA4C34C,KAAK7K,IAAKqlC,GACrE,OAAO2d,EAAgCj+C,OAAO5F,EAClD,GACA,4BAIA,SAAeuF,GACXN,EAAaM,EAAgBG,IAC7B,IAAI1F,EAAMX,EAAKilD,+CAA+C54C,KAAK7K,IAAK0E,EAAe1E,KACvF,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,6BAIA,SAAgB8oC,GACZ7jC,EAAa6jC,EAAiB3hB,IAC9B,IAAInnB,EAAMX,EAAKklD,gDAAgD74C,KAAK7K,IAAKioC,EAAgBjoC,KACzF,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,sBAIA,SAASwkD,GACLv/C,EAAau/C,EAAUl6C,IACvB,IAAItK,EAAMX,EAAKolD,yCAAyC/4C,KAAK7K,IAAK2jD,EAAS3jD,KAC3E,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,mCAIA,SAAsBupC,GAClB,IAAIvpC,EAAMX,EAAKqlD,sDAAsDh5C,KAAK7K,IAAK0oC,GAC/E,OAAOsa,EAAgCj+C,OAAO5F,EAClD,GACA,mCAIA,SAAsB0pC,GAClB,IAAI1pC,EAAMX,EAAKslD,sDAAsDj5C,KAAK7K,IAAK6oC,GAC/E,OAAOma,EAAgCj+C,OAAO5F,EAClD,GACA,yBAMA,SAAY4kD,EAAWC,EAAWC,GAC9B7/C,EAAa2/C,EAAWj/C,IACxBV,EAAa4/C,EAAWl/C,IACxB,IAAI3F,EAAMX,EAAK0lD,4CAA4Cr5C,KAAK7K,IAAK+jD,EAAU/jD,IAAKgkD,EAAUhkD,IAAKikD,GACnG,OAAOjB,EAAgCj+C,OAAO5F,EAClD,GACA,wBAIA,SAAWglD,GACP//C,EAAa+/C,EAAYtpC,IACzB,IAAI1b,EAAMX,EAAK4lD,2CAA2Cv5C,KAAK7K,IAAKmkD,EAAWnkD,KAC/E,OAAOgjD,EAAgCj+C,OAAO5F,EAClD,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAK6lD,sCAAsCx5C,KAAK7K,KAC1D,OAAO6iD,GAAyB99C,OAAO5F,EAC3C,IAAC,qBA/ID,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOqyC,EAAgCpyC,WAE1D,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK8lD,sCACf,OAAOtB,EAAgCj+C,OAAO5F,EAClD,KAAC,EArBuC,GAmJ/ByI,GAAe,wCAgGvB,OAhGuB,0CAMxB,WACI,IAAM5H,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+lD,2BAA2BvkD,EACpC,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO/I,EAAgBgJ,WAE1C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKgmD,2BAA2Bt/C,EAAME,GAChD,OAAOwC,EAAgB7C,OAAO5F,EAClC,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKimD,4BAA4Bv/C,EAAME,GACjD,OAAOwC,EAAgB7C,OAAO5F,EAClC,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKkmD,yBAAyBx/C,EAAME,GAC9C,OAAOwC,EAAgB7C,OAAO5F,EAClC,KAAC,EAhGuB,GAmGfkW,GAAkB,wCAgD1B,OAhD0B,0CAM3B,WACI,IAAMrV,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmmD,8BAA8B3kD,EACvC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKomD,4BAA4Bp/C,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKqmD,uBAAuBh6C,KAAK7K,IAAKgS,GAChD,OAAOlN,GAAOC,OAAO5F,EACzB,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMpN,IACnBtG,EAAKsmD,uBAAuBj6C,KAAK7K,IAAKkS,EAAKlS,IAC/C,IAAC,qBArED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0E,EAAmBzE,WAE7C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKumD,8BAA8B7/C,EAAME,GACnD,OAAOiQ,EAAmBtQ,OAAO5F,EACrC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKshB,mBACf,OAAOzK,EAAmBtQ,OAAO5F,EACrC,KAAC,EAhD0B,GAyElBmgD,GAAgB,wCAmGxB,OAnGwB,0CAMzB,WACI,IAAMt/C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKwmD,4BAA4BhlD,EACrC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKymD,0BAA0Bz/C,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0mD,yBAAyB1/C,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK2mD,6BAA6Bt6C,KAAK7K,KAErD,GACA,4BAaA,WACI,IAAIb,EAAMX,EAAK4mD,gCAAgCv6C,KAAK7K,KACpD,OAAO4H,GAAgB7C,OAAO5F,EAClC,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO2uC,EAAiB1uC,WAE3C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK6mD,4BAA4BngD,EAAME,GACjD,OAAOk6C,EAAiBv6C,OAAO5F,EACnC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK8mD,2BAA2BpgD,EAAME,GAChD,OAAOk6C,EAAiBv6C,OAAO5F,EACnC,GAAC,iBAoBD,SAAWomD,EAAgBvzC,GACvB5N,EAAamhD,EAAgB39C,IAC7BxD,EAAa4N,EAAOlN,IACpB,IAAI3F,EAAMX,EAAKgnD,qBAAqBD,EAAevlD,IAAKgS,EAAMhS,KAC9D,OAAOs/C,EAAiBv6C,OAAO5F,EACnC,KAAC,EAnGwB,GAsGhBq8C,GAAiB,wCAiFzB,OAjFyB,0CAM1B,WACI,IAAMx7C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKinD,6BAA6BzlD,EACtC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKknD,2BAA2BlgD,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKmnD,0BAA0BngD,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKonD,8BAA8B/6C,KAAK7K,KAEtD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKqnD,sBAAsBh7C,KAAK7K,IAAKgS,GAC/C,OAAOstC,GAAiBv6C,OAAO5F,EACnC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMotC,IACnB9gD,EAAKsnD,sBAAsBj7C,KAAK7K,IAAKkS,EAAKlS,IAC9C,GACA,kBACA,WACIxB,EAAKunD,uBAAuBl7C,KAAK7K,IACrC,IAAC,qBA1GD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO6qC,EAAkB5qC,WAE5C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKwnD,6BAA6B9gD,EAAME,GAClD,OAAOo2C,EAAkBz2C,OAAO5F,EACpC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKynD,4BAA4B/gD,EAAME,GACjD,OAAOo2C,EAAkBz2C,OAAO5F,EACpC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKshB,mBACf,OAAO07B,EAAkBz2C,OAAO5F,EACpC,KAAC,EAjFyB,GA8GjBkG,GAAoB,wCAwF5B,OAxF4B,0CAM7B,WACI,IAAMrF,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK0nD,gCAAgClmD,EACzC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK2nD,8BAA8B3gD,EAAQqF,KAAK7K,KAChD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBA4DA,WAEI,OADUjH,EAAK4nD,0BAA0Bv7C,KAAK7K,OAC/B,CACnB,GACA,oBAGA,WACI,IAAIb,EAAMX,EAAK6nD,4BAA4Bx7C,KAAK7K,KAChD,OAAOkN,GAAYnI,OAAO5F,EAC9B,GACA,qBAGA,WACI,IAAIA,EAAMX,EAAK8nD,6BAA6Bz7C,KAAK7K,KACjD,OAAOmN,GAAapI,OAAO5F,EAC/B,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAK+nD,4BAA4B17C,KAAK7K,KAChD,OAAOoN,GAAIrI,OAAO5F,EACtB,GACA,sBAGA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgoD,8BAA8BhhD,EAAQqF,KAAK7K,KAChD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAGA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKioD,6BAA6BjhD,EAAQqF,KAAK7K,KAC/C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IAAC,qBApJD,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOtL,EAAqBuL,WAE/C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkoD,gCAAgCxhD,EAAME,GACrD,OAAOC,EAAqBN,OAAO5F,EACvC,GACA,qBAIA,SAAe48B,GACX33B,EAAa23B,EAAK7uB,IAClB,IAAI/N,EAAMX,EAAKmoD,6BAA6B5qB,EAAI/7B,KAChD,OAAOqF,EAAqBN,OAAO5F,EACvC,GACA,sBAIA,SAAgB88B,GACZ73B,EAAa63B,EAAM9uB,IACnB,IAAIhO,EAAMX,EAAKooD,8BAA8B3qB,EAAKj8B,KAClD,OAAOqF,EAAqBN,OAAO5F,EACvC,GACA,qBAIA,SAAe0nD,GACXziD,EAAayiD,EAAKz5C,IAClB,IAAIjO,EAAMX,EAAKsoD,6BAA6BD,EAAI7mD,KAChD,OAAOqF,EAAqBN,OAAO5F,EACvC,GACA,uBAIA,SAAiB8F,GACb,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKuoD,+BAA+B7hD,EAAME,GACpD,OAAOC,EAAqBN,OAAO5F,EACvC,GACA,sBAIA,SAAgBoX,GACZ,IAAIrR,EAAOjE,EAAkBsV,EAAM/X,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKwoD,8BAA8B9hD,EAAME,GACnD,OAAOC,EAAqBN,OAAO5F,EACvC,KAAC,EAxF4B,GAwJpBkoB,GAA0B,wCAgDlC,OAhDkC,0CAMnC,WACI,IAAMrnB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKyoD,sCAAsCjnD,EAC/C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0oD,oCAAoC1hD,EAAQqF,KAAK7K,KACtD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAoBA,WAEI,OADUjH,EAAKyyB,iBAAiBpmB,KAAK7K,OACtB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK2oD,+BAA+Bt8C,KAAK7K,IAAKgS,GACxD,OAAOlN,GAAOC,OAAO5F,EACzB,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMpN,IACnBtG,EAAK4oD,+BAA+Bv8C,KAAK7K,IAAKkS,EAAKlS,IACvD,IAAC,qBArED,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO0W,EAA2BzW,WAErD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK6oD,sCAAsCniD,EAAME,GAC3D,OAAOiiB,EAA2BtiB,OAAO5F,EAC7C,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK6yB,mBACf,OAAOhK,EAA2BtiB,OAAO5F,EAC7C,KAAC,EAhDkC,GAyE1BiL,GAAiB,wCA+HzB,OA/HyB,0CAM1B,WACI,IAAMpK,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8oD,6BAA6BtnD,EACtC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+oD,2BAA2B/hD,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgpD,0BAA0BhiD,EAAQqF,KAAK7K,KAC5C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKipD,8BAA8B58C,KAAK7K,KAEtD,GACA,qBAaA,WACI,IAAIb,EAAMX,EAAKkpD,0BAA0B78C,KAAK7K,KAC9C,OAAOyP,GAAQ1K,OAAO5F,EAC1B,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAKmpD,yBAAyB98C,KAAK7K,KAC7C,OAAO+J,GAAMhF,OAAO5F,EACxB,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAKopD,wBAAwB/8C,KAAK7K,KAC5C,OAAe,IAARb,OAAYP,EAAYskB,GAAMne,OAAO5F,EAChD,GACA,wBAGA,WACI,IAAIA,EAAMX,EAAKqpD,6BAA6Bh9C,KAAK7K,KACjD,OAAe,IAARb,OAAYP,EAAY80C,GAAU3uC,OAAO5F,EACpD,GACA,uBAGA,SAAUuL,GACNtG,EAAasG,EAAOwY,IACpB1kB,EAAKspD,4BAA4Bj9C,KAAK7K,IAAK0K,EAAM1K,IACrD,GACA,4BAGA,SAAe+nD,GACX3jD,EAAa2jD,EAAYrU,IACzBl1C,EAAKwpD,iCAAiCn9C,KAAK7K,IAAK+nD,EAAW/nD,IAC/D,GACA,6BAiBA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKypD,kCAAkCziD,EAAQqF,KAAK7K,KACpD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAlJD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOvG,EAAkBwG,WAE5C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK0pD,6BAA6BhjD,EAAME,GAClD,OAAOgF,EAAkBrF,OAAO5F,EACpC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK2pD,4BAA4BjjD,EAAME,GACjD,OAAOgF,EAAkBrF,OAAO5F,EACpC,GAAC,iBAgDD,SAAWkgD,EAASnrB,GAChB9vB,EAAai7C,EAAS5vC,IACtBrL,EAAa8vB,EAAQnqB,IACrB,IAAI5K,EAAMX,EAAK4pD,sBAAsB/I,EAAQr/C,IAAKk0B,EAAOl0B,KACzD,OAAOoK,EAAkBrF,OAAO5F,EACpC,KAAC,EA/HyB,GAsJjBkpD,GAA8B,wCAKtC,OALsC,0CAMvC,WACI,IAAMroD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8pD,0CAA0CtoD,EACnD,GACA,wBAIA,SAAWk0B,GACP9vB,EAAa8vB,EAAQnqB,IACrB,IAAI5K,EAAMX,EAAK+pD,0CAA0C19C,KAAK7K,IAAKk0B,EAAOl0B,KAC1E,OAAOqoD,EAA+BtjD,OAAO5F,EACjD,GACA,uBAIA,SAAUghD,GACN/7C,EAAa+7C,EAAMr7C,IACnB,IAAI3F,EAAMX,EAAKgqD,yCAAyC39C,KAAK7K,IAAKmgD,EAAKngD,KACvE,OAAOqoD,EAA+BtjD,OAAO5F,EACjD,GACA,iCAKA,SAAoBghD,EAAMsI,GACtBrkD,EAAa+7C,EAAMr7C,IACnBV,EAAaqkD,EAAY71B,IACzB,IAAIzzB,EAAMX,EAAKkqD,mDAAmD79C,KAAK7K,IAAKmgD,EAAKngD,IAAKyoD,EAAWzoD,KACjG,OAAOqoD,EAA+BtjD,OAAO5F,EACjD,GACA,8CAKA,SAAiCspD,EAAYE,GACzCvkD,EAAaqkD,EAAY71B,IACzBxuB,EAAaukD,EAAqB7jD,IAClC,IAAI3F,EAAMX,EACLoqD,gEAAgE/9C,KAAK7K,IAAKyoD,EAAWzoD,IAAK2oD,EAAoB3oD,KACnH,OAAOqoD,EAA+BtjD,OAAO5F,EACjD,GACA,mBAGA,WACI,IAAIA,EAAMX,EAAKqqD,qCAAqCh+C,KAAK7K,KACzD,OAAOoK,GAAkBrF,OAAO5F,EACpC,IAAC,qBA7DD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO03C,EAA+Bz3C,WAEzD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,KAAC,EALsC,GAuE9B0oD,GAAwB,wCAqBhC,OArBgC,0CAMjC,WACI,IAAM9oD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKuqD,oCAAoC/oD,EAC7C,GACA,0BAWA,SAAaq/C,GACTj7C,EAAai7C,EAAS5vC,IACtB,IAAItQ,EAAMX,EAAKwqD,sCAAsCn+C,KAAK7K,IAAKq/C,EAAQr/C,KACvE,OAAO8oD,EAAyB/jD,OAAO5F,EAC3C,GACA,wBAIA,SAAWykB,GACPxf,EAAawf,EAAWV,IACxB,IAAI/jB,EAAMX,EAAKyqD,oCAAoCp+C,KAAK7K,IAAK4jB,EAAU5jB,KACvE,OAAO8oD,EAAyB/jD,OAAO5F,EAC3C,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK0qD,8BAA8Br+C,KAAK7K,KAClD,OAAOqoD,GAA+BtjD,OAAO5F,EACjD,IAAC,qBA7CD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOm4C,EAAyBl4C,WAEnD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK2qD,+BACf,OAAOL,EAAyB/jD,OAAO5F,EAC3C,KAAC,EArBgC,GAiDxBu8C,GAAkB,wCAiF1B,OAjF0B,0CAM3B,WACI,IAAM17C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK4qD,8BAA8BppD,EACvC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK6qD,4BAA4B7jD,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK8qD,2BAA2B9jD,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK+qD,+BAA+B1+C,KAAK7K,KAEvD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKgrD,uBAAuB3+C,KAAK7K,IAAKgS,GAChD,OAAO5H,GAAkBrF,OAAO5F,EACpC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM9H,IACnB5L,EAAKirD,uBAAuB5+C,KAAK7K,IAAKkS,EAAKlS,IAC/C,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO+qC,EAAmB9qC,WAE7C,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKkrD,8BAA8BxkD,EAAME,GACnD,OAAOs2C,EAAmB32C,OAAO5F,EACrC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKmrD,6BAA6BzkD,EAAME,GAClD,OAAOs2C,EAAmB32C,OAAO5F,EACrC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAKshB,mBACf,OAAO47B,EAAmB32C,OAAO5F,EACrC,KAAC,EAjF0B,GA0GlB+/C,GAAwB,wCAoDhC,OApDgC,0CAMjC,WACI,IAAMl/C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKorD,oCAAoC5pD,EAC7C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqrD,kCAAkCrkD,EAAQqF,KAAK7K,KACpD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,mBAwBA,WACI,IAAItG,EAAMX,EAAKsrD,+BAA+Bj/C,KAAK7K,KACnD,OAAOs/C,GAAiBv6C,OAAO5F,EACnC,GACA,oBAGA,WACI,IAAIA,EAAMX,EAAKurD,gCAAgCl/C,KAAK7K,KACpD,OAAOoK,GAAkBrF,OAAO5F,EACpC,GACA,6BAGA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwrD,yCAAyCxkD,EAAQqF,KAAK7K,KAC3D,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAlFD,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOuuC,EAAyBtuC,WAEnD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKyrD,oCAAoC/kD,EAAME,GACzD,OAAO85C,EAAyBn6C,OAAO5F,EAC3C,GACA,iBAKA,SAAWmmB,EAAOpb,GACd9F,EAAakhB,EAAOg6B,IACpBl7C,EAAa8F,EAAQE,IACrB,IAAIjL,EAAMX,EAAK0rD,6BAA6B5kC,EAAMtlB,IAAKkK,EAAOlK,KAC9D,OAAOk/C,EAAyBn6C,OAAO5F,EAC3C,KAAC,EApDgC,GAsFxB2/C,GAAyB,wCAqBjC,OArBiC,0CAMlC,WACI,IAAM9+C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2rD,qCAAqCnqD,EAC9C,GACA,iBAUA,WAEI,OADUxB,EAAK4rD,8BAA8Bv/C,KAAK7K,OACnC,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK6rD,8BAA8Bx/C,KAAK7K,IAAKgS,GACvD,OAAOktC,GAAyBn6C,OAAO5F,EAC3C,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMgtC,IACnB1gD,EAAK8rD,8BAA8Bz/C,KAAK7K,IAAKkS,EAAKlS,IACtD,IAAC,qBA1CD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOmuC,EAA0BluC,WAEpD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK+rD,gCACf,OAAOzL,EAA0B/5C,OAAO5F,EAC5C,KAAC,EArBiC,GA8CzB86C,GAAqB,wCAmL7B,OAnL6B,0CAM9B,WACI,IAAMj6C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgsD,iCAAiCxqD,EAC1C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKisD,+BAA+BjlD,EAAQqF,KAAK7K,KACjD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKksD,8BAA8BllD,EAAQqF,KAAK7K,KAChD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKmsD,kCAAkC9/C,KAAK7K,KAE1D,GACA,uBAaA,SAAU4qD,GACNxmD,EAAawmD,EAAOC,IACpBrsD,EAAKssD,gCAAgCjgD,KAAK7K,IAAK4qD,EAAM5qD,IACzD,GACA,mBAGA,WACI,IAAIb,EAAMX,EAAKusD,4BAA4BlgD,KAAK7K,KAChD,OAAe,IAARb,OAAYP,EAAYisD,GAAc9lD,OAAO5F,EACxD,GACA,gCAGA,SAAmByU,GACfxP,EAAawP,EAAgBD,IAC7BnV,EAAKwsD,yCAAyCngD,KAAK7K,IAAK4T,EAAe5T,IAC3E,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAKysD,qCAAqCpgD,KAAK7K,KACzD,OAAe,IAARb,OAAYP,EAAY+U,GAAc5O,OAAO5F,EACxD,GACA,4BAGA,SAAe+rD,GACX9mD,EAAa8mD,EAAY7uC,IACzB7d,EAAK2sD,qCAAqCtgD,KAAK7K,IAAKkrD,EAAWlrD,IACnE,GACA,wBAGA,WACI,IAAIb,EAAMX,EAAK4sD,iCAAiCvgD,KAAK7K,KACrD,OAAe,IAARb,OAAYP,EAAYyd,GAAmBtX,OAAO5F,EAC7D,GACA,gCAGA,SAAmB6U,GACf5P,EAAa4P,EAAgBD,IAC7BvV,EAAK6sD,yCAAyCxgD,KAAK7K,IAAKgU,EAAehU,IAC3E,GACA,4BAGA,WACI,IAAIb,EAAMX,EAAK8sD,qCAAqCzgD,KAAK7K,KACzD,OAAe,IAARb,OAAYP,EAAYmV,GAAchP,OAAO5F,EACxD,GACA,6BAGA,SAAgB2J,GACZ1E,EAAa0E,EAAaxB,IAC1B9I,EAAK+sD,sCAAsC1gD,KAAK7K,IAAK8I,EAAY9I,IACrE,GACA,yBAGA,WACI,IAAIb,EAAMX,EAAKgtD,kCAAkC3gD,KAAK7K,KACtD,OAAe,IAARb,OAAYP,EAAY0I,GAAWvC,OAAO5F,EACrD,GACA,2BAGA,SAAckK,GACVjF,EAAaiF,EAAWG,IACxBhL,EAAKitD,oCAAoC5gD,KAAK7K,IAAKqJ,EAAUrJ,IACjE,GACA,mCAGA,SAAsBgU,GAClB5P,EAAa4P,EAAgBD,IAC7BvV,EAAKktD,4CAA4C7gD,KAAK7K,IAAKgU,EAAehU,IAC9E,GACA,uBAGA,WACI,IAAIb,EAAMX,EAAKmtD,gCAAgC9gD,KAAK7K,KACpD,OAAe,IAARb,OAAYP,EAAY4K,GAAUzE,OAAO5F,EACpD,GACA,+BAGA,WACI,IAAIA,EAAMX,EAAKotD,wCAAwC/gD,KAAK7K,KAC5D,OAAe,IAARb,OAAYP,EAAYmV,GAAchP,OAAO5F,EACxD,IACA,qBA5KA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOspC,EAAsBrpC,WAEhD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKqtD,iCAAiC3mD,EAAME,GACtD,OAAO60C,EAAsBl1C,OAAO5F,EACxC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKstD,gCAAgC5mD,EAAME,GACrD,OAAO60C,EAAsBl1C,OAAO5F,EACxC,GAAC,iBAsGD,WACI,IAAIA,EAAMX,EAAKutD,4BACf,OAAO9R,EAAsBl1C,OAAO5F,EACxC,KAAC,EAnL6B,GAwLrB6sD,GAA4B,wCA6EpC,OA7EoC,0CAMrC,WACI,IAAMhsD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKytD,wCAAwCjsD,EACjD,GACA,sBAGA,SAASgc,GACL5X,EAAa4X,EAAM3T,IACnB7J,EAAK0tD,sCAAsCrhD,KAAK7K,IAAKgc,EAAKhc,IAC9D,GACA,2BAGA,SAAciuC,GACV7pC,EAAa6pC,EAAWlmC,IACxBvJ,EAAK2tD,2CAA2CthD,KAAK7K,IAAKiuC,EAAUjuC,IACxE,GACA,+BAGA,SAAkBquC,GACdjqC,EAAaiqC,EAAe9jC,IAC5B/L,EAAK4tD,+CAA+CvhD,KAAK7K,IAAKquC,EAAcruC,IAChF,GACA,+BAGA,SAAkBqH,GACdjD,EAAaiD,EAAeE,IAC5B/I,EAAK6tD,+CAA+CxhD,KAAK7K,IAAKqH,EAAcrH,IAChF,GACA,kCAGA,SAAqBqH,GACjBjD,EAAaiD,EAAeE,IAC5B/I,EAAK8tD,kDAAkDzhD,KAAK7K,IAAKqH,EAAcrH,IACnF,GACA,8BAGA,SAAiB2uC,GACbvqC,EAAauqC,EAAc5lC,IAC3BvK,EAAK+tD,8CAA8C1hD,KAAK7K,IAAK2uC,EAAa3uC,IAC9E,GACA,0BAGA,SAAao+B,GACTh6B,EAAag6B,EAAUmM,IACvB/rC,EAAKguD,0CAA0C3hD,KAAK7K,IAAKo+B,EAASp+B,IACtE,GACA,+BAGA,SAAkBysD,GACdroD,EAAaqoD,EAAe7e,IAC5BpvC,EAAKkuD,+CAA+C7hD,KAAK7K,IAAKysD,EAAczsD,IAChF,GACA,0BAUA,SAAa2sD,GACTvoD,EAAauoD,EAAS1S,IACtBz7C,EAAKouD,0CAA0C/hD,KAAK7K,IAAK2sD,EAAQ3sD,IACrE,GACA,mBAGA,WACI,IAAIb,EAAMX,EAAKquD,mCAAmChiD,KAAK7K,KACvD,OAAOi6C,GAAsBl1C,OAAO5F,EACxC,IAAC,qBA1FD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOq7C,EAA6Bp7C,WAEvD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAqED,WACI,IAAIjB,EAAMX,EAAKsuD,mCACf,OAAOd,EAA6BjnD,OAAO5F,EAC/C,KAAC,EA7EoC,GA8F5B0a,GAAsB,wCAiF9B,OAjF8B,0CAM/B,WACI,IAAM7Z,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKuuD,kCAAkC/sD,EAC3C,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKwuD,gCAAgCxnD,EAAQqF,KAAK7K,KAClD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKyuD,+BAA+BznD,EAAQqF,KAAK7K,KACjD,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK0uD,mCAAmCriD,KAAK7K,KAE3D,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK2uD,2BAA2BtiD,KAAK7K,IAAKgS,GACpD,OAAOioC,GAAsBl1C,OAAO5F,EACxC,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM+nC,IACnBz7C,EAAK4uD,2BAA2BviD,KAAK7K,IAAKkS,EAAKlS,IACnD,IAAC,qBAtGD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOkJ,EAAuBjJ,WAEjD,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK6uD,kCAAkCnoD,EAAME,GACvD,OAAOyU,EAAuB9U,OAAO5F,EACzC,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK8uD,iCAAiCpoD,EAAME,GACtD,OAAOyU,EAAuB9U,OAAO5F,EACzC,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK8T,iBACf,OAAOuH,EAAuB9U,OAAO5F,EACzC,KAAC,EAjF8B,GA0GtBsgC,GAAG,wCAmDX,OAnDW,0CAMZ,WACI,IAAMz/B,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK+uD,eAAevtD,EACxB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgvD,aAAahoD,EAAQqF,KAAK7K,KAC/B,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,iBAuBA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqjB,wBAAwBrc,EAAQqF,KAAK7K,KAC1C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IAAC,qBAlED,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8uB,EAAI7uB,WAE9B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKivD,eAAevoD,EAAME,GACpC,OAAOq6B,EAAI16B,OAAO5F,EACtB,GACA,iBAIA,SAAW8b,GACP,IAAI/V,EAAOjE,EAAkBga,EAAKzc,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKkvD,QAAQxoD,EAAME,GAC7B,OAAOq6B,EAAI16B,OAAO5F,EACtB,KAAC,EAnDW,GAsEH4mB,GAAY,wCA2GpB,OA3GoB,0CAMrB,WACI,IAAM/lB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKmvD,wBAAwB3tD,EACjC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKovD,sBAAsBpoD,EAAQqF,KAAK7K,KACxC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqvD,qBAAqBroD,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKsvD,yBAAyBjjD,KAAK7K,KAEjD,GACA,uBAaA,WACI,IAAIb,EAAMX,EAAKosB,gBAAgB/f,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,yBAGA,WACI,IAAIA,EAAMX,EAAKmiC,gBAAgB91B,KAAK7K,KACpC,OAAO8E,GAAOC,OAAO5F,EACzB,IACA,qBAxFA,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOoV,EAAanV,WAEvC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKuvD,wBAAwB7oD,EAAME,GAC7C,OAAO2gB,EAAahhB,OAAO5F,EAC/B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKwvD,uBAAuB9oD,EAAME,GAC5C,OAAO2gB,EAAahhB,OAAO5F,EAC/B,GAAC,iBAoBD,SAAW8uD,EAAWC,GAClB9pD,EAAa6pD,EAAWnpD,IACxBV,EAAa8pD,EAAappD,IAC1B,IAAI3F,EAAMX,EAAK2vD,iBAAiBF,EAAUjuD,IAAKkuD,EAAYluD,KAC3D,OAAO+lB,EAAahhB,OAAO5F,EAC/B,GACA,wBAIA,SAAkBivD,GACd,IAAIjvD,EAAMX,EAAK6vD,wBAAwBD,GACvC,OAAOroC,EAAahhB,OAAO5F,EAC/B,KAAC,EA3GoB,GA8GZg9C,GAAM,wCAkGd,OAlGc,0CAMf,WACI,IAAMn8C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK8vD,kBAAkBtuD,EAC3B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+vD,gBAAgB/oD,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKgwD,eAAehpD,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKiwD,mBAAmB5jD,KAAK7K,KAE3C,GACA,iDAaA,WACI,IAAIb,EAAMX,EAAKkwD,2CAA2C7jD,KAAK7K,KAC/D,OAAO6jC,GAAiC9+B,OAAO5F,EACnD,GACA,mBAGA,WAEI,OADUX,EAAKmwD,aAAa9jD,KAAK7K,OAClB,CACnB,IACA,qBAxFA,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOwrC,EAAOvrC,WAEjC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKowD,kBAAkB1pD,EAAME,GACvC,OAAO+2C,EAAOp3C,OAAO5F,EACzB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKqwD,iBAAiB3pD,EAAME,GACtC,OAAO+2C,EAAOp3C,OAAO5F,EACzB,GAAC,iBAoBD,SAAW2vD,EAAqC/rB,GAC5C3+B,EAAa0qD,EAAqCjrB,IAClD,IAAI1kC,EAAMX,EAAKuwD,WAAWD,EAAoC9uD,IAAK+iC,GACnE,OAAOoZ,EAAOp3C,OAAO5F,EACzB,KAAC,EAlGc,GAqGN+rB,GAAO,wCAyHf,OAzHe,0CAMhB,WACI,IAAMlrB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKwwD,mBAAmBhvD,EAC5B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKywD,iBAAiBzpD,EAAQqF,KAAK7K,KACnC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0wD,gBAAgB1pD,EAAQqF,KAAK7K,KAClC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK2wD,oBAAoBtkD,KAAK7K,KAE5C,GACA,oBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKod,4BAA4BpW,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,mBAGA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqd,4BAA4BrW,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IACA,qBA5GA,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOua,EAAQta,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK4wD,mBAAmBlqD,EAAME,GACxC,OAAO8lB,EAAQnmB,OAAO5F,EAC1B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK6wD,kBAAkBnqD,EAAME,GACvC,OAAO8lB,EAAQnmB,OAAO5F,EAC1B,GAAC,iBAwCD,SAAW+K,EAAQolD,GACf,IAAIpqD,EAAOf,EAAkB+F,EAAQ1L,EAAK2G,mBACtCC,EAAO/E,EACPuG,EAAOzC,EAAkBmrD,EAAO9wD,EAAK2G,mBACrC0B,EAAOxG,EACPlB,EAAMX,EAAK+wD,YAAYrqD,EAAME,EAAMwB,EAAMC,GAC7C,OAAOqkB,EAAQnmB,OAAO5F,EAC1B,KAAC,EAzHe,GA4HPgqB,GAAU,wCAgGlB,OAhGkB,0CAMnB,WACI,IAAMnpB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKgxD,sBAAsBxvD,EAC/B,GACA,sBAaA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK+V,2BAA2B/O,EAAQqF,KAAK7K,KAC7C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,uBAIA,SAAUsK,GACN,IACI,IAAMvK,EAAShH,EAAKiH,iCAAiC,IACjDP,EAAOjE,EAAkB8O,EAAQvR,EAAK2G,kBAAmB3G,EAAKyH,oBAC9Db,EAAO/E,EACX7B,EAAKgW,4BAA4BhP,EAAQqF,KAAK7K,IAAKkF,EAAME,GACzD,IAAIM,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,oBAaA,WACI,IACI,IAAMH,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKiW,yBAAyBjP,EAAQqF,KAAK7K,KAC3C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,IACA,qBAtFA,SAAc3F,GACV,IAAMI,EAAMgL,OAAOuF,OAAOwY,EAAWvY,WAErC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBAcD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKixD,sBAAsBvqD,EAAME,GAC3C,OAAO+jB,EAAWpkB,OAAO5F,EAC7B,GAAC,yBAyCD,SAAmB4R,GACf,IAAI7L,EAAOjE,EAAkB8P,EAAUvS,EAAK2G,kBAAmB3G,EAAKyH,oBAChEb,EAAO/E,EACPlB,EAAMX,EAAKkxD,uBAAuBxqD,EAAME,GAC5C,OAAO+jB,EAAWpkB,OAAO5F,EAC7B,GAAC,sBAqBD,SAAgByV,GACZ,IAAI1P,EAAOjE,EAAkB2T,EAAKpW,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACPlB,EAAMX,EAAKmxD,oBAAoBzqD,EAAME,GACzC,OAAO+jB,EAAWpkB,OAAO5F,EAC7B,KAAC,EAhGkB,GAmGV6rB,GAAO,wCAyCf,OAzCe,0CAMhB,WACI,IAAMhrB,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKoxD,mBAAmB5vD,EAC5B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKqxD,iBAAiBrqD,EAAQqF,KAAK7K,KACnC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,kBAaA,WACI,IAAItG,EAAMX,EAAKsxD,aAAajlD,KAAK7K,KACjC,OAAOmpB,GAAWpkB,OAAO5F,EAC7B,GACA,wBAGA,WACI,IACI,IAAMqG,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKod,4BAA4BpW,EAAQqF,KAAK7K,KAC9C,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,IAAC,qBAhED,SAAczF,GACV,IAAMI,EAAMgL,OAAOuF,OAAOqa,EAAQpa,WAElC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKuxD,mBAAmB7qD,EAAME,GACxC,OAAO4lB,EAAQjmB,OAAO5F,EAC1B,KAAC,EAzCe,GAoEP4K,GAAK,wCAmGb,OAnGa,0CAMd,WACI,IAAM/J,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKwxD,iBAAiBhwD,EAC1B,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKyxD,eAAezqD,EAAQqF,KAAK7K,KACjC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK0xD,cAAc1qD,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAK2xD,kBAAkBtlD,KAAK7K,KAE1C,GACA,qBAsCA,WAEI,OAAe,IADLxB,EAAK4xD,cAAcvlD,KAAK7K,IAEtC,GACA,kBAGA,WACI,IAAIb,EAAMX,EAAK6xD,WAAWxlD,KAAK7K,KAC/B,OAAO8E,GAAOC,OAAO5F,EACzB,GACA,sBAGA,SAASghD,GACL/7C,EAAa+7C,EAAMr7C,IACnBtG,EAAK8xD,eAAezlD,KAAK7K,IAAKmgD,EAAKngD,IACvC,GACA,wBAGA,WACI,IAAIb,EAAMX,EAAK+xD,iBAAiB1lD,KAAK7K,KACrC,OAAe,IAARb,OAAYP,EAAYg0B,GAAW7tB,OAAO5F,EACrD,GACA,4BAGA,SAAespD,GACXrkD,EAAaqkD,EAAY71B,IACzBp0B,EAAKgyD,qBAAqB3lD,KAAK7K,IAAKyoD,EAAWzoD,IACnD,GACA,yBAIA,SAAYywD,GACRrsD,EAAaqsD,EAAK1mD,GAClB,IAAI5K,EAAMX,EAAKkyD,kBAAkB7lD,KAAK7K,IAAKywD,EAAIzwD,KAC/C,OAAO+J,EAAMhF,OAAO5F,EACxB,GACA,yBAIA,SAAYiY,GACRhT,EAAagT,EAAWrN,GACxB,IAAI5K,EAAMX,EAAKmyD,kBAAkB9lD,KAAK7K,IAAKoX,EAAUpX,KACrD,OAAO+J,EAAMhF,OAAO5F,EACxB,GACA,yBAIA,SAAYiY,GACRhT,EAAagT,EAAWrN,GACxB,IAAI5K,EAAMX,EAAKoyD,kBAAkB/lD,KAAK7K,IAAKoX,EAAUpX,KACrD,OAAO+J,EAAMhF,OAAO5F,EACxB,GACA,qBAKA,SAAQiY,GACJhT,EAAagT,EAAWrN,GACxB,IAAI5K,EAAMX,EAAKqyD,cAAchmD,KAAK7K,IAAKoX,EAAUpX,KACjD,OAAe,WAARb,OAAmBP,EAAYO,CAC1C,IAAC,qBA1KD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO5G,EAAM6G,WAEhC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKsyD,iBAAiB5rD,EAAME,GACtC,OAAO2E,EAAMhF,OAAO5F,EACxB,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKuyD,gBAAgB7rD,EAAME,GACrC,OAAO2E,EAAMhF,OAAO5F,EACxB,GACA,iBAIA,SAAWghD,GACP/7C,EAAa+7C,EAAMr7C,IACnB,IAAI3F,EAAMX,EAAKwyD,UAAU7Q,EAAKngD,KAC9B,OAAO+J,EAAMhF,OAAO5F,EACxB,GACA,6BAIA,SAAuBspD,GACnBrkD,EAAaqkD,EAAY71B,IACzB,IAAIzzB,EAAMX,EAAKyyD,sBAAsBxI,EAAWzoD,KAChD,OAAO+J,EAAMhF,OAAO5F,EACxB,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAK0yD,aACf,OAAOnnD,EAAMhF,OAAO5F,EACxB,KAAC,EAnGa,GA8KLsc,GAAI,wCAkDZ,OAlDY,0CAMb,WACI,IAAMzb,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK2yD,gBAAgBnxD,EACzB,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAK4yD,cAAc5rD,EAAQqF,KAAK7K,KAChC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,wBAsBA,WACI,IAAItG,EAAMX,EAAK6yD,gBAAgBxmD,KAAK7K,KACpC,OAAO6Y,GAAU9T,OAAO5F,EAC5B,IAAC,qBAxDD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8K,EAAK7K,WAE/B,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK8yD,gBAAgBpsD,EAAME,GACrC,OAAOqW,EAAK1W,OAAO5F,EACvB,GACA,iBAIA,SAAWoyD,GACPntD,EAAamtD,EAAI14C,IACjB,IAAI1Z,EAAMX,EAAKgzD,SAASD,EAAGvxD,KAC3B,OAAOyb,EAAK1W,OAAO5F,EACvB,KAAC,EAlDY,GA4DJsyD,GAAK,wCAqBb,OArBa,0CAMd,WACI,IAAMzxD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKkzD,iBAAiB1xD,EAC1B,GACA,iBAUA,WAEI,OADUxB,EAAK+d,uBAAuB1R,KAAK7K,OAC5B,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAKmzD,UAAU9mD,KAAK7K,IAAKgS,GACnC,OAAOyJ,GAAK1W,OAAO5F,EACvB,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAMuJ,IACnBjd,EAAKozD,UAAU/mD,KAAK7K,IAAKkS,EAAKlS,IAClC,IAAC,qBA1CD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAO8gD,EAAM7gD,WAEhC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK2rC,iBACf,OAAOsnB,EAAM1sD,OAAO5F,EACxB,KAAC,EArBa,GA8CLkJ,GAAW,wCAqFnB,OArFmB,0CAMpB,WACI,IAAMrI,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKqzD,uBAAuB7xD,EAChC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKszD,qBAAqBtsD,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKuzD,oBAAoBvsD,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKwzD,wBAAwBnnD,KAAK7K,KAEhD,GACA,kBAwBA,WACI,IAAIb,EAAMX,EAAKgzD,SAAS3mD,KAAK7K,KAC7B,OAAOyb,GAAK1W,OAAO5F,EACvB,GACA,uBAGA,WACI,IAAIA,EAAMX,EAAKyzD,sBAAsBpnD,KAAK7K,KAC1C,OAAO2b,GAAiB5W,OAAO5F,EACnC,IAAC,qBAlGD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOtI,EAAYuI,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAK0zD,uBAAuBhtD,EAAME,GAC5C,OAAOiD,EAAYtD,OAAO5F,EAC9B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAK2zD,sBAAsBjtD,EAAME,GAC3C,OAAOiD,EAAYtD,OAAO5F,EAC9B,GACA,iBAKA,SAAW6c,EAAMC,GACb7X,EAAa4X,EAAMP,IACnBrX,EAAa6X,EAAWN,IACxB,IAAIxc,EAAMX,EAAK4zD,gBAAgBp2C,EAAKhc,IAAKic,EAAUjc,KACnD,OAAOqI,EAAYtD,OAAO5F,EAC9B,KAAC,EArFmB,GAsGX0rD,GAAa,wCAqBrB,OArBqB,0CAMtB,WACI,IAAM7qD,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAK6zD,yBAAyBryD,EAClC,GACA,iBAUA,WAEI,OADUxB,EAAK+d,uBAAuB1R,KAAK7K,OAC5B,CACnB,GACA,iBAIA,SAAIgS,GACA,IAAI7S,EAAMX,EAAK8zD,kBAAkBznD,KAAK7K,IAAKgS,GAC3C,OAAO3J,GAAYtD,OAAO5F,EAC9B,GACA,iBAGA,SAAI+S,GACA9N,EAAa8N,EAAM7J,IACnB7J,EAAK+zD,kBAAkB1nD,KAAK7K,IAAKkS,EAAKlS,IAC1C,IAAC,qBA1CD,SAAcA,GACV,IAAMI,EAAMgL,OAAOuF,OAAOk6C,EAAcj6C,WAExC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,iBAaD,WACI,IAAIjB,EAAMX,EAAK2rC,iBACf,OAAO0gB,EAAc9lD,OAAO5F,EAChC,KAAC,EArBqB,GA8Cb68C,GAAW,wCAiFnB,OAjFmB,0CAMpB,WACI,IAAMh8C,EAAM6K,KAAK7K,IAEjB,OADA6K,KAAK7K,IAAM,EACJA,CACX,GAAC,kBACD,WACI,IAAMA,EAAM6K,KAAK6E,qBACjBlR,EAAKg0D,uBAAuBxyD,EAChC,GACA,sBAGA,WACI,IACI,IAAMwF,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKi0D,qBAAqBjtD,EAAQqF,KAAK7K,KACvC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACpCI,EAAK1B,EAAoBwB,EAAIC,GAAInE,QAErC,OADAhD,EAAKqH,gBAAgBH,EAAS,EAALC,GAClBC,CAIX,CAHC,QAEGpH,EAAKiH,gCAAgC,GACzC,CACJ,GACA,qBAaA,WACI,IACI,IAAMD,EAAShH,EAAKiH,iCAAiC,IACrDjH,EAAKk0D,oBAAoBltD,EAAQqF,KAAK7K,KACtC,IAAI0F,EAAKhE,IAAkB8D,EAAS,EAAI,GACpCG,EAAKjE,IAAkB8D,EAAS,EAAI,GACxC,OAAOzF,EAAmB2F,EAAIC,EAKlC,CAJC,QAEGnH,EAAKiH,gCAAgC,IACrCjH,EAAKqH,gBAAgBH,EAAIC,EAC7B,CACJ,GACA,yBAGA,WAEI,OAAOzG,EADGV,EAAKm0D,wBAAwB9nD,KAAK7K,KAEhD,GACA,iBAoBA,WAEI,OADUxB,EAAKuT,eAAelH,KAAK7K,OACpB,CACnB,GACA,oBAKA,SAAO2H,EAAKiL,GACRxO,EAAauD,EAAKyI,IAClBhM,EAAawO,EAAO9N,IACpB,IAAI3F,EAAMX,EAAKo0D,mBAAmB/nD,KAAK7K,IAAK2H,EAAI3H,IAAK4S,EAAM5S,KAC3D,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,iBAIA,SAAIwI,GACAvD,EAAauD,EAAKyI,IAClB,IAAIjR,EAAMX,EAAKq0D,gBAAgBhoD,KAAK7K,IAAK2H,EAAI3H,KAC7C,OAAe,IAARb,OAAYP,EAAYkG,GAAOC,OAAO5F,EACjD,GACA,kBAGA,WACI,IAAIA,EAAMX,EAAKs0D,iBAAiBjoD,KAAK7K,KACrC,OAAOqvC,GAAgBtqC,OAAO5F,EAClC,IAAC,qBAlHD,SAAca,GACV,IAAMI,EAAMgL,OAAOuF,OAAOqrC,EAAYprC,WAEtC,OADAxQ,EAAIJ,IAAMA,EACHI,CACX,GAAC,wBA+BD,SAAkB6E,GACd,IAAIC,EAAOf,EAAkBc,EAAOzG,EAAK2G,mBACrCC,EAAO/E,EACPlB,EAAMX,EAAKu0D,uBAAuB7tD,EAAME,GAC5C,OAAO42C,EAAYj3C,OAAO5F,EAC9B,GAAC,uBA4BD,SAAiB4G,GACb,IAAIb,EAAOjE,EAAkB8E,EAAMvH,EAAK2G,kBAAmB3G,EAAKyH,oBAC5Db,EAAO/E,EACPlB,EAAMX,EAAKw0D,sBAAsB9tD,EAAME,GAC3C,OAAO42C,EAAYj3C,OAAO5F,EAC9B,GACA,iBAGA,WACI,IAAIA,EAAMX,EAAK0U,aACf,OAAO8oC,EAAYj3C,OAAO5F,EAC9B,KAAC,EAjFmB,GAoHvB,SACc8zD,GAAK,EAAD,iDA2BlB,OA3BkB,2BAAnB,WAAoBC,EAAQC,GAAO,mFACP,oBAAbC,UAA2BF,aAAkBE,UAAQ,oBACZ,oBAArCC,YAAYC,qBAAmC,0CAErCD,YAAYC,qBAAqBJ,EAAQC,GAAQ,OAYlB,yCAZkB,mCAGpB,oBAAtCD,EAAOK,QAAQ1vD,IAAI,gBAAqC,iBACxD2vD,QAAQC,KAAK,oMAAqM,EAAF,IAAK,4DAO7MP,EAAOQ,cAAa,QAA7B,OAALzuD,EAAQ,EAAH,eACEouD,YAAYM,YAAY1uD,EAAOkuD,GAAQ,yBAG7BE,YAAYM,YAAYT,EAAQC,GAAQ,QAAjD,MAAR9uD,EAAW,EAAH,gBACUgvD,YAAYO,UAAQ,0CACjC,CAAEvvD,SAAAA,EAAU6uD,OAAAA,IAAQ,iCAGpB7uD,GAAQ,0DAG1B,+BACcwvD,GAAK,GAAD,8CA+SlB,OA/SkB,2BAAnB,WAAoBvuC,GAAK,kFA2SkB,MA1SlB,qBAAVA,IACPA,EAAQ,IAAIma,GAAI,oCAAqCq0B,6KAEnDX,EAAU,CAAC,GACTY,IAAM,CAAC,EACfZ,EAAQY,IAAIC,2BAA6B,SAAU9wD,GAC/ChE,EAAWgE,EACf,EACAiwD,EAAQY,IAAIE,sBAAwB,SAAU/wD,GAE1C,OAAO/C,EADGwE,GAAYI,OAAO7B,GAEjC,EACAiwD,EAAQY,IAAIG,sBAAwB,SAAUhxD,EAAMC,GAEhD,OAAOhD,EADGJ,EAAmBmD,EAAMC,GAEvC,EACAgwD,EAAQY,IAAII,sBAAwB,SAAUjxD,EAAMC,GAEhD,OAAOhD,EADGwC,KAAKyxD,MAAMr0D,EAAmBmD,EAAMC,IAElD,EACAgwD,EAAQY,IAAIM,0BAA4B,SAAUnxD,EAAMC,GACpD,IAAM/C,EAAMvB,EAAUsE,GAElB+B,EAAOjE,EADD0B,KAAKC,eAAkBhE,IAARwB,EAAoB,KAAOA,GAClB5B,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACXqB,IAAkBwB,EAAO,EAAI,GAAKkC,EAClC1D,IAAkBwB,EAAO,EAAI,GAAKgC,CACtC,EACAiuD,EAAQY,IAAIO,sBAAwB,SAAUpxD,EAAMC,GAChD,IAAM/C,EAAMvB,EAAUsE,GAClBhE,EAAuB,kBAATiB,EAAoBA,OAAMxB,EACxCsG,EAAOtD,EAAWzC,GAChB,EACA8B,EAAkB9B,EAAKX,EAAK2G,kBAAmB3G,EAAKyH,oBACtDb,EAAO/E,EACXqB,IAAkBwB,EAAO,EAAI,GAAKkC,EAClC1D,IAAkBwB,EAAO,EAAI,GAAKgC,CACtC,EACAiuD,EAAQY,IAAIQ,6BAA+B,SAAUrxD,EAAMC,GAEvD,OAAOhD,EADGtB,EAAUqE,GAAMsxD,MAAM31D,EAAUsE,IAE9C,EACAgwD,EAAQY,IAAIU,2CAA6C,SAAUvxD,GAE/D,OADUrE,EAAUqE,aAAiBkwD,QAEzC,EACAD,EAAQY,IAAIW,4BAA8B,WACtC,OAAO/pD,IAAY,SAAUzH,GAEzB,OAAO/C,EADGtB,EAAUqE,GAAM6C,OAE9B,GAAG4uD,UACP,EACAxB,EAAQY,IAAIa,+BAAiC,SAAU1xD,GAEnD,OAAO/C,EADGtB,EAAUqE,GAAMqwD,QAE9B,EACAJ,EAAQY,IAAIc,yCAA2C,WACnD,OAAOlqD,IAAY,SAAUzH,EAAMC,EAAMa,GAErC,OAAO7D,EADG,IAAI20D,QAAQ/0D,EAAmBmD,EAAMC,GAAOtE,EAAUmF,IAEpE,GAAG2wD,UACP,EACAxB,EAAQY,IAAIgB,4BAA8B,SAAU7xD,GAEhD,OAAO/C,EADGtB,EAAUqE,GAExB,EACAiwD,EAAQY,IAAIiB,2BAA6B,WACrC,OAAOrqD,IAAY,SAAUzH,EAAMC,EAAMa,EAAMiH,EAAMgqD,GACjDp2D,EAAUqE,GAAMpC,IAAIf,EAAmBoD,EAAMa,GAAOjE,EAAmBkL,EAAMgqD,GACjF,GAAGN,UACP,EACAxB,EAAQY,IAAImB,mBAAqB,SAAUhyD,GACvC,IAAM9C,EAAMlB,EAAWgE,GAAMY,SAC7B,GAAiB,GAAb1D,EAAIqD,MAEJ,OADArD,EAAImD,EAAI,GACD,EAGX,OADU,CAEd,EACA4vD,EAAQY,IAAIoB,sCAAwC,WAChD,OAAOxqD,IAAY,SAAUzH,EAAMC,EAAMa,GACrCnF,EAAUqE,GAAMkyD,eAAelxD,EAAoBf,EAAMa,GAC7D,GAAG2wD,UACP,EACAxB,EAAQY,IAAIsB,uCAAyC,WACjD,OAAO1qD,IAAY,SAAUzH,EAAMC,GAC/BtE,EAAUqE,GAAMoyD,gBAAgBz2D,EAAUsE,GAC9C,GAAGwxD,UACP,EACAxB,EAAQY,IAAIwB,+BAAiC,SAAUryD,GAEnD,OAAO/C,EADGtB,EAAUqE,GAAMsyD,QAE9B,EACArC,EAAQY,IAAI0B,qBAAuB,SAAUvyD,GACzC,IAAMnB,EAAMlD,EAAUqE,GAEtB,MAD2B,kBAATnB,GAA6B,OAARA,CAE3C,EACAoxD,EAAQY,IAAI2B,gCAAkC,SAAUxyD,GAEpD,OAAO/C,EADGtB,EAAUqE,GAAMyyD,SAE9B,EACAxC,EAAQY,IAAI6B,4BAA8B,SAAU1yD,GAEhD,OAAO/C,EADGtB,EAAUqE,GAAM2yD,KAE9B,EACA1C,EAAQY,IAAI+B,qBAAuB,SAAU5yD,GAEzC,MADuC,kBAArBrE,EAAUqE,EAEhC,EACAiwD,EAAQY,IAAIgC,+BAAiC,WACzC,OAAOprD,IAAY,SAAUzH,EAAMC,EAAMa,GAErC,OAAO7D,EADGtB,EAAUqE,GAAM8yD,QAAQj2D,EAAmBoD,EAAMa,IAE/D,GAAG2wD,UACP,EACAxB,EAAQY,IAAIkC,8BAAgC,SAAU/yD,GAElD,OAAO/C,EADGtB,EAAUqE,GAAMgzD,OAE9B,EACA/C,EAAQY,IAAIoC,gCAAkC,SAAUjzD,GAEpD,OAAO/C,EADGtB,EAAUqE,GAAMkzD,SAE9B,EACAjD,EAAQY,IAAIsC,mDAAqD,WAE7D,OAAOl2D,EADG+yD,EAEd,EACAC,EAAQY,IAAIuC,4BAA8B,WACtC,OAAO3rD,IAAY,SAAUzH,EAAMC,GAE/B,OAAOhD,EADGtB,EAAUqE,GAAMR,KAAK7D,EAAUsE,IAE7C,GAAGwxD,UACP,EACAxB,EAAQY,IAAIwC,4BAA8B,WACtC,OAAO5rD,IAAY,WAEf,OAAOxK,EADGq2D,KAAKA,KAEnB,GAAG7B,UACP,EACAxB,EAAQY,IAAI0C,8BAAgC,WACxC,OAAO9rD,IAAY,WAEf,OAAOxK,EADGu2D,WAAWC,OAEzB,GAAGhC,UACP,EACAxB,EAAQY,IAAI6C,kCAAoC,WAC5C,OAAOjsD,IAAY,WAEf,OAAOxK,EADGu2D,WAAWA,WAEzB,GAAG/B,UACP,EACAxB,EAAQY,IAAI8C,8BAAgC,WACxC,OAAOlsD,IAAY,WAEf,OAAOxK,EADG22D,OAAOA,OAErB,GAAGnC,UACP,EACAxB,EAAQY,IAAIgD,wBAA0B,SAAU7zD,GAE5C,YAD8BtE,IAApBC,EAAUqE,EAExB,EACAiwD,EAAQY,IAAIiD,iCAAmC,SAAU9zD,EAAMC,GAE3D,OAAOhD,EADG,IAAI82D,SAASl3D,EAAmBmD,EAAMC,IAEpD,EACAgwD,EAAQY,IAAImD,4BAA8B,WACtC,OAAOvsD,IAAY,SAAUzH,EAAMC,EAAMa,GAErC,OAAO7D,EADGtB,EAAUqE,GAAMR,KAAK7D,EAAUsE,GAAOtE,EAAUmF,IAE9D,GAAG2wD,UACP,EACAxB,EAAQY,IAAIoD,2BAA6B,WAErC,OAAOh3D,EADG,IAAIiL,OAElB,EACA+nD,EAAQY,IAAIqD,2BAA6B,SAAUl0D,EAAMC,GACrD,IACI,IAAIk0D,EAAS,CAAE9zD,EAAGL,EAAMM,EAAGL,GAWvBhE,EAAM,IAAIm4D,SAVJ,SAACp0D,EAAMC,GACb,IAAMI,EAAI8zD,EAAO9zD,EACjB8zD,EAAO9zD,EAAI,EACX,IACI,OAAOyH,GAAmBzH,EAAG8zD,EAAO7zD,EAAGN,EAAMC,EAIjD,CAHC,QAEGk0D,EAAO9zD,EAAIA,CACf,CACJ,IAEA,OAAOpD,EAAchB,EAIzB,CAHC,QAEGk4D,EAAO9zD,EAAI8zD,EAAO7zD,EAAI,CAC1B,CACJ,EACA2vD,EAAQY,IAAIwD,+BAAiC,SAAUr0D,GAEnD,OAAO/C,EADGm3D,QAAQE,QAAQ34D,EAAUqE,IAExC,EACAiwD,EAAQY,IAAI0D,4BAA8B,SAAUv0D,EAAMC,GAEtD,OAAOhD,EADGtB,EAAUqE,GAAMw0D,KAAK74D,EAAUsE,IAE7C,EACAgwD,EAAQY,IAAI4D,4BAA8B,SAAUz0D,EAAMC,EAAMa,GAE5D,OAAO7D,EADGtB,EAAUqE,GAAMw0D,KAAK74D,EAAUsE,GAAOtE,EAAUmF,IAE9D,EACAmvD,EAAQY,IAAI6D,8BAAgC,SAAU10D,GAElD,OAAO/C,EADGtB,EAAUqE,GAAMtD,OAE9B,EACAuzD,EAAQY,IAAI8D,2BAA6B,SAAU30D,GAE/C,OAAO/C,EADG,IAAIL,WAAWjB,EAAUqE,IAEvC,EACAiwD,EAAQY,IAAI+D,2BAA6B,SAAU50D,EAAMC,EAAMa,GAC3DnF,EAAUqE,GAAMpC,IAAIjC,EAAUsE,GAAOa,IAAS,EAClD,EACAmvD,EAAQY,IAAIgE,8BAAgC,SAAU70D,GAElD,OADUrE,EAAUqE,GAAMjE,MAE9B,EACAk0D,EAAQY,IAAIiE,qCAAuC,SAAU90D,GAEzD,OAAO/C,EADG,IAAIL,WAAWoD,IAAS,GAEtC,EACAiwD,EAAQY,IAAIkE,gCAAkC,SAAU/0D,EAAMC,EAAMa,GAEhE,OAAO7D,EADGtB,EAAUqE,GAAMhD,SAASiD,IAAS,EAAGa,IAAS,GAE5D,EACAmvD,EAAQY,IAAImE,2BAA6B,WACrC,OAAOvtD,IAAY,SAAUzH,EAAMC,EAAMa,GAErC,OADUm0D,QAAQr3D,IAAIjC,EAAUqE,GAAOrE,EAAUsE,GAAOtE,EAAUmF,GAEtE,GAAG2wD,UACP,EACAxB,EAAQY,IAAIqE,2BAA6B,SAAUl1D,EAAMC,GAErD,OAAOhD,EADG,IAAI82D,SAASl3D,EAAmBmD,EAAMC,IAEpD,EACAgwD,EAAQY,IAAIsE,4BAA8B,SAAUn1D,EAAMC,GAEtD,OAAOhD,EADGtB,EAAUqE,GAAMR,KAAK7D,EAAUsE,IAE7C,EACAgwD,EAAQY,IAAIuE,oBAAsB,SAAUp1D,EAAMC,GAE9C,OADUtE,EAAUqE,KAAUrE,EAAUsE,EAE5C,EACAgwD,EAAQY,IAAIwE,4BAA8B,SAAUr1D,GAEhD,OAAO/C,EADGtB,EAAUqE,GAAMszD,KAE9B,EACArD,EAAQY,IAAIyE,8BAAgC,SAAUt1D,GAElD,OAAO/C,EADGtB,EAAUqE,GAAMgzD,OAE9B,EACA/C,EAAQY,IAAI0E,uCAAyC,SAAUv1D,GAE3D,OAAO/C,EADGtB,EAAUqE,GAAMoyD,gBAE9B,EACAnC,EAAQY,IAAI2E,+BAAiC,SAAUx1D,EAAMC,GAEzD,OAAOhD,EADG61D,QAAQj2D,EAAmBmD,EAAMC,IAE/C,EACAgwD,EAAQY,IAAI4E,sCAAwC,SAAUz1D,EAAMC,EAAMa,GACtEnF,EAAUqE,GAAMkyD,eAAelxD,EAAoBf,EAAMa,GAC7D,EACAmvD,EAAQY,IAAI6E,uCAAyC,SAAU11D,EAAMC,EAAMa,GACvEnF,EAAUqE,GAAMoyD,gBAAgBpxD,EAAoBf,EAAMa,GAC9D,EACAmvD,EAAQY,IAAI8E,wBAA0B,SAAU31D,EAAMC,GAClD,IACI+B,EAAOjE,EADDa,EAAYjD,EAAUsE,IACE3E,EAAK2G,kBAAmB3G,EAAKyH,oBAC3Db,EAAO/E,EACXqB,IAAkBwB,EAAO,EAAI,GAAKkC,EAClC1D,IAAkBwB,EAAO,EAAI,GAAKgC,CACtC,EACAiuD,EAAQY,IAAI+E,iBAAmB,SAAU51D,EAAMC,GAC3C,MAAM,IAAIL,MAAM/C,EAAmBmD,EAAMC,GAC7C,EACAgwD,EAAQY,IAAIgF,mBAAqB,SAAU71D,GACvC,MAAMhE,EAAWgE,EACrB,EACAiwD,EAAQY,IAAIiF,kBAAoB,WAE5B,OAAO74D,EADG3B,EAAKqB,OAEnB,EACAszD,EAAQY,IAAIkF,+BAAiC,SAAU/1D,EAAMC,EAAMa,GAE/D,OAAO7D,EADG8C,EAAeC,EAAMC,EAAM,IAAKY,GAE9C,GACqB,kBAAVuhB,GACa,oBAAZwvC,SAA0BxvC,aAAiBwvC,SACnC,oBAARr1B,IAAsBna,aAAiBma,MAC/Cna,EAAQkvC,MAAMlvC,IACjB,KACkC2tC,GAAI,UAAO3tC,EAAK,QAAS,OAAT,iBAAE6tC,EAAO,sCAEvB,OAFuB,SAApD9uD,EAAQ,EAARA,SAAU6uD,EAAM,EAANA,OAClB10D,EAAO6F,EAAS60D,QAChBrF,GAAKsF,uBAAyBjG,EAAO,kBAC9B10D,GAAI,4CACd,yBACD,Y","sources":["../node_modules/lucid-cardano/esm/src/core/wasm_modules/cardano_multiplatform_lib_web/cardano_multiplatform_lib.js"],"sourcesContent":["let wasm;\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) {\n    return heap[idx];\n}\nlet heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nlet cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true,\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null ||\n        cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nlet WASM_VECTOR_LEN = 0;\nlet cachedTextEncoder = new TextEncoder(\"utf-8\");\nconst encodeString = typeof cachedTextEncoder.encodeInto === \"function\"\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length,\n        };\n    };\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F)\n            break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null ||\n        cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \"number\" || type == \"boolean\" || val == null) {\n        return `${val}`;\n    }\n    if (type == \"string\") {\n        return `\"${val}\"`;\n    }\n    if (type == \"symbol\") {\n        const description = val.description;\n        if (description == null) {\n            return \"Symbol\";\n        }\n        else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \"function\") {\n        const name = val.name;\n        if (typeof name == \"string\" && name.length > 0) {\n            return `Function(${name})`;\n        }\n        else {\n            return \"Function\";\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \"[\";\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for (let i = 1; i < length; i++) {\n            debug += \", \" + debugString(val[i]);\n        }\n        debug += \"]\";\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    }\n    else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == \"Object\") {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \"Object(\" + JSON.stringify(val) + \")\";\n        }\n        catch (_) {\n            return \"Object\";\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        }\n        finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n            }\n            else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm\n        ._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf552e89fb1b782c2(arg0, arg1, addHeapObject(arg2));\n}\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n * @param {Transaction} tx\n * @param {LinearFee} linear_fee\n * @param {ExUnitPrices} ex_unit_prices\n * @returns {BigNum}\n */\nexport function min_fee(tx, linear_fee, ex_unit_prices) {\n    _assertClass(tx, Transaction);\n    _assertClass(linear_fee, LinearFee);\n    _assertClass(ex_unit_prices, ExUnitPrices);\n    var ret = wasm.min_fee(tx.ptr, linear_fee.ptr, ex_unit_prices.ptr);\n    return BigNum.__wrap(ret);\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {TransactionMetadatum}\n */\nexport function encode_arbitrary_bytes_as_metadatum(bytes) {\n    var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n/**\n * @param {TransactionMetadatum} metadata\n * @returns {Uint8Array}\n */\nexport function decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        wasm.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {TransactionMetadatum}\n */\nexport function encode_json_str_to_metadatum(json, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_metadatum(ptr0, len0, schema);\n    return TransactionMetadatum.__wrap(ret);\n}\n/**\n * @param {TransactionMetadatum} metadatum\n * @param {number} schema\n * @returns {string}\n */\nexport function decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        wasm.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null ||\n        cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n/**\n * @param {string} password\n * @param {string} salt\n * @param {string} nonce\n * @param {string} data\n * @returns {string}\n */\nexport function encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = passStringToWasm0(nonce, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n/**\n * @param {string} password\n * @param {string} data\n * @returns {string}\n */\nexport function decrypt_with_password(password, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n/**\n * @param {PlutusList} params\n * @param {PlutusScript} plutus_script\n * @returns {PlutusScript}\n */\nexport function apply_params_to_plutus_script(params, plutus_script) {\n    _assertClass(params, PlutusList);\n    _assertClass(plutus_script, PlutusScript);\n    var ptr0 = plutus_script.ptr;\n    plutus_script.ptr = 0;\n    var ret = wasm.apply_params_to_plutus_script(params.ptr, ptr0);\n    return PlutusScript.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {LegacyDaedalusPrivateKey} key\n * @returns {BootstrapWitness}\n */\nexport function make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    var ret = wasm.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {ByronAddress} addr\n * @param {Bip32PrivateKey} key\n * @returns {BootstrapWitness}\n */\nexport function make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    var ret = wasm.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n/**\n * @param {TransactionHash} tx_body_hash\n * @param {PrivateKey} sk\n * @returns {Vkeywitness}\n */\nexport function make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    var ret = wasm.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n/**\n * @param {AuxiliaryData} auxiliary_data\n * @returns {AuxiliaryDataHash}\n */\nexport function hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    var ret = wasm.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} tx_body\n * @returns {TransactionHash}\n */\nexport function hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    var ret = wasm.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n/**\n * @param {PlutusData} plutus_data\n * @returns {DataHash}\n */\nexport function hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    var ret = wasm.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nexport function hash_blake2b256(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b256(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nexport function hash_blake2b224(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.hash_blake2b224(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v1;\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n/**\n * @param {Redeemers} redeemers\n * @param {Costmdls} cost_models\n * @param {PlutusList | undefined} datums\n * @returns {ScriptDataHash}\n */\nexport function hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.ptr;\n        datums.ptr = 0;\n    }\n    var ret = wasm.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {Value}\n */\nexport function get_implicit_input(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_implicit_input(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return Value.__wrap(ret);\n}\n/**\n * @param {TransactionBody} txbody\n * @param {BigNum} pool_deposit\n * @param {BigNum} key_deposit\n * @returns {BigNum}\n */\nexport function get_deposit(txbody, pool_deposit, key_deposit) {\n    _assertClass(txbody, TransactionBody);\n    _assertClass(pool_deposit, BigNum);\n    _assertClass(key_deposit, BigNum);\n    var ret = wasm.get_deposit(txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n    return BigNum.__wrap(ret);\n}\n/**\n * @param {TransactionOutput} output\n * @param {BigNum} coins_per_utxo_byte\n * @returns {BigNum}\n */\nexport function min_ada_required(output, coins_per_utxo_byte) {\n    _assertClass(output, TransactionOutput);\n    _assertClass(coins_per_utxo_byte, BigNum);\n    var ret = wasm.min_ada_required(output.ptr, coins_per_utxo_byte.ptr);\n    return BigNum.__wrap(ret);\n}\n/**\n * Receives a script JSON string\n * and returns a NativeScript.\n * Cardano Wallet and Node styles are supported.\n *\n * * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml\n * * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n *\n * self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes\n * @param {string} json\n * @param {string} self_xpub\n * @param {number} schema\n * @returns {NativeScript}\n */\nexport function encode_json_str_to_native_script(json, self_xpub, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passStringToWasm0(self_xpub, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_native_script(ptr0, len0, ptr1, len1, schema);\n    return NativeScript.__wrap(ret);\n}\n/**\n * @param {string} json\n * @param {number} schema\n * @returns {PlutusData}\n */\nexport function encode_json_str_to_plutus_datum(json, schema) {\n    var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.encode_json_str_to_plutus_datum(ptr0, len0, schema);\n    return PlutusData.__wrap(ret);\n}\n/**\n * @param {PlutusData} datum\n * @param {number} schema\n * @returns {string}\n */\nexport function decode_plutus_datum_to_json_str(datum, schema) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(datum, PlutusData);\n        wasm.decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    }\n    finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    }\n    catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\nfunction __wbg_adapter_1369(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__h343db6eee225c129(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n/** */\nexport const CertificateKind = Object.freeze({\n    StakeRegistration: 0,\n    \"0\": \"StakeRegistration\",\n    StakeDeregistration: 1,\n    \"1\": \"StakeDeregistration\",\n    StakeDelegation: 2,\n    \"2\": \"StakeDelegation\",\n    PoolRegistration: 3,\n    \"3\": \"PoolRegistration\",\n    PoolRetirement: 4,\n    \"4\": \"PoolRetirement\",\n    GenesisKeyDelegation: 5,\n    \"5\": \"GenesisKeyDelegation\",\n    MoveInstantaneousRewardsCert: 6,\n    \"6\": \"MoveInstantaneousRewardsCert\",\n});\n/** */\nexport const MIRPot = Object.freeze({\n    Reserves: 0,\n    \"0\": \"Reserves\",\n    Treasury: 1,\n    \"1\": \"Treasury\",\n});\n/** */\nexport const MIRKind = Object.freeze({\n    ToOtherPot: 0,\n    \"0\": \"ToOtherPot\",\n    ToStakeCredentials: 1,\n    \"1\": \"ToStakeCredentials\",\n});\n/** */\nexport const RelayKind = Object.freeze({\n    SingleHostAddr: 0,\n    \"0\": \"SingleHostAddr\",\n    SingleHostName: 1,\n    \"1\": \"SingleHostName\",\n    MultiHostName: 2,\n    \"2\": \"MultiHostName\",\n});\n/** */\nexport const NativeScriptKind = Object.freeze({\n    ScriptPubkey: 0,\n    \"0\": \"ScriptPubkey\",\n    ScriptAll: 1,\n    \"1\": \"ScriptAll\",\n    ScriptAny: 2,\n    \"2\": \"ScriptAny\",\n    ScriptNOfK: 3,\n    \"3\": \"ScriptNOfK\",\n    TimelockStart: 4,\n    \"4\": \"TimelockStart\",\n    TimelockExpiry: 5,\n    \"5\": \"TimelockExpiry\",\n});\n/** */\nexport const NetworkIdKind = Object.freeze({\n    Testnet: 0,\n    \"0\": \"Testnet\",\n    Mainnet: 1,\n    \"1\": \"Mainnet\",\n});\n/** */\nexport const TransactionMetadatumKind = Object.freeze({\n    MetadataMap: 0,\n    \"0\": \"MetadataMap\",\n    MetadataList: 1,\n    \"1\": \"MetadataList\",\n    Int: 2,\n    \"2\": \"Int\",\n    Bytes: 3,\n    \"3\": \"Bytes\",\n    Text: 4,\n    \"4\": \"Text\",\n});\n/** */\nexport const MetadataJsonSchema = Object.freeze({\n    NoConversions: 0,\n    \"0\": \"NoConversions\",\n    BasicConversions: 1,\n    \"1\": \"BasicConversions\",\n    DetailedSchema: 2,\n    \"2\": \"DetailedSchema\",\n});\n/** */\nexport const StakeCredKind = Object.freeze({\n    Key: 0,\n    \"0\": \"Key\",\n    Script: 1,\n    \"1\": \"Script\",\n});\n/** */\nexport const ScriptWitnessKind = Object.freeze({\n    NativeWitness: 0,\n    \"0\": \"NativeWitness\",\n    PlutusWitness: 1,\n    \"1\": \"PlutusWitness\",\n});\n/**\n * Each new language uses a different namespace for hashing its script\n * This is because you could have a language where the same bytes have different semantics\n * So this avoids scripts in different languages mapping to the same hash\n * Note that the enum value here is different than the enum value for deciding the cost model of a script\n * https://github.com/input-output-hk/cardano-ledger/blob/9c3b4737b13b30f71529e76c5330f403165e28a6/eras/alonzo/impl/src/Cardano/Ledger/Alonzo.hs#L127\n */\nexport const ScriptHashNamespace = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusV1: 1,\n    \"1\": \"PlutusV1\",\n    PlutusV2: 2,\n    \"2\": \"PlutusV2\",\n});\n/**\n * Used to choose the schema for a script JSON string\n */\nexport const ScriptSchema = Object.freeze({\n    Wallet: 0,\n    \"0\": \"Wallet\",\n    Node: 1,\n    \"1\": \"Node\",\n});\n/** */\nexport const LanguageKind = Object.freeze({\n    PlutusV1: 0,\n    \"0\": \"PlutusV1\",\n    PlutusV2: 1,\n    \"1\": \"PlutusV2\",\n});\n/** */\nexport const PlutusDataKind = Object.freeze({\n    ConstrPlutusData: 0,\n    \"0\": \"ConstrPlutusData\",\n    Map: 1,\n    \"1\": \"Map\",\n    List: 2,\n    \"2\": \"List\",\n    Integer: 3,\n    \"3\": \"Integer\",\n    Bytes: 4,\n    \"4\": \"Bytes\",\n});\n/** */\nexport const RedeemerTagKind = Object.freeze({\n    Spend: 0,\n    \"0\": \"Spend\",\n    Mint: 1,\n    \"1\": \"Mint\",\n    Cert: 2,\n    \"2\": \"Cert\",\n    Reward: 3,\n    \"3\": \"Reward\",\n});\n/**\n * JSON <-> PlutusData conversion schemas.\n * Follows ScriptDataJsonSchema in cardano-cli defined at:\n * https://github.com/input-output-hk/cardano-node/blob/master/cardano-api/src/Cardano/Api/ScriptData.hs#L254\n *\n * All methods here have the following restrictions due to limitations on dependencies:\n * * JSON numbers above u64::MAX (positive) or below i64::MIN (negative) will throw errors\n * * Hex strings for bytes don't accept odd-length (half-byte) strings.\n *      cardano-cli seems to support these however but it seems to be different than just 0-padding\n *      on either side when tested so proceed with caution\n */\nexport const PlutusDatumSchema = Object.freeze({\n    /**\n     * ScriptDataJsonNoSchema in cardano-node.\n     *\n     * This is the format used by --script-data-value in cardano-cli\n     * This tries to accept most JSON but does not support the full spectrum of Plutus datums.\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.\n     * To JSON:\n     * * ConstrPlutusData not supported in ANY FORM (neither keys nor values)\n     * * Lists not supported in keys\n     * * Maps not supported in keys\n     */\n    BasicConversions: 0,\n    \"0\": \"BasicConversions\",\n    /**\n     * ScriptDataJsonDetailedSchema in cardano-node.\n     *\n     * This is the format used by --script-data-file in cardano-cli\n     * This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.\n     * The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:\n     * 1. For ConstrPlutusData there must be two fields \"constructor\" contianing a number and \"fields\" containing its fields\n     *    e.g. { \"constructor\": 2, \"fields\": [{\"int\": 2}, {\"list\": [{\"bytes\": \"CAFEF00D\"}]}]}\n     * 2. For all other cases there must be only one field named \"int\", \"bytes\", \"list\" or \"map\"\n     *    Integer's value is a JSON number e.g. {\"int\": 100}\n     *    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {\"bytes\": \"CAFEF00D\"}\n     *    Lists' value is a JSON list of its elements encoded via the same schema e.g. {\"list\": [{\"bytes\": \"CAFEF00D\"}]}\n     *    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys \"k\" and \"v\"\n     *          respectively with their values being the plutus datum encoded via this same schema\n     *          e.g. {\"map\": [\n     *              {\"k\": {\"int\": 2}, \"v\": {\"int\": 5}},\n     *              {\"k\": {\"map\": [{\"k\": {\"list\": [{\"int\": 1}]}, \"v\": {\"bytes\": \"FF03\"}}]}, \"v\": {\"list\": []}}\n     *          ]}\n     * From JSON:\n     * * null/true/false/floats NOT supported\n     * * the JSON must conform to a very specific schema\n     * To JSON:\n     * * all Plutus datums should be fully supported outside of the integer range limitations outlined above.\n     */\n    DetailedSchema: 1,\n    \"1\": \"DetailedSchema\",\n});\n/** */\nexport const ScriptKind = Object.freeze({\n    NativeScript: 0,\n    \"0\": \"NativeScript\",\n    PlutusScriptV1: 1,\n    \"1\": \"PlutusScriptV1\",\n    PlutusScriptV2: 2,\n    \"2\": \"PlutusScriptV2\",\n});\n/** */\nexport const DatumKind = Object.freeze({\n    Hash: 0,\n    \"0\": \"Hash\",\n    Data: 1,\n    \"1\": \"Data\",\n});\n/** */\nexport class Address {\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_address_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Address}\n     */\n    static from_bytes(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bytes(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.address_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Address}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_json(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string | undefined} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Address}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.address_from_bech32(ptr0, len0);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        var ret = wasm.address_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @returns {ByronAddress | undefined}\n     */\n    as_byron() {\n        var ret = wasm.address_as_byron(this.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress | undefined}\n     */\n    as_reward() {\n        var ret = wasm.address_as_reward(this.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {PointerAddress | undefined}\n     */\n    as_pointer() {\n        var ret = wasm.address_as_pointer(this.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {EnterpriseAddress | undefined}\n     */\n    as_enterprise() {\n        var ret = wasm.address_as_enterprise(this.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {BaseAddress | undefined}\n     */\n    as_base() {\n        var ret = wasm.address_as_base(this.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/** */\nexport class AssetName {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetName}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_from_bytes(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.assetname_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetName}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_from_json(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} name\n     * @returns {AssetName}\n     */\n    static new(name) {\n        var ptr0 = passArray8ToWasm0(name, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetname_new(ptr0, len0);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    name() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class AssetNames {\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assetnames_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AssetNames}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetnames_from_bytes(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assetnames_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.assetnames_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {AssetNames}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assetnames_from_json(ptr0, len0);\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    static new() {\n        var ret = wasm.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {AssetName}\n     */\n    get(index) {\n        var ret = wasm.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} elem\n     */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        wasm.assetnames_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Assets {\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_assets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Assets}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assets_from_bytes(ptr0, len0);\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.assets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.assets_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Assets}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.assets_from_json(ptr0, len0);\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {Assets}\n     */\n    static new() {\n        var ret = wasm.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        var ret = wasm.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        var ret = wasm.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/** */\nexport class AuxiliaryData {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryData}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydata_from_bytes(ptr0, len0);\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.auxiliarydata_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {AuxiliaryData}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydata_from_json(ptr0, len0);\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {AuxiliaryData}\n     */\n    static new() {\n        var ret = wasm.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {GeneralTransactionMetadata | undefined}\n     */\n    metadata() {\n        var ret = wasm.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        var ret = wasm.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        var ret = wasm.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.auxiliarydata_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n}\n/** */\nexport class AuxiliaryDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_bytes(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_bech32(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {AuxiliaryDataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.auxiliarydatahash_from_hex(ptr0, len0);\n        return AuxiliaryDataHash.__wrap(ret);\n    }\n}\n/** */\nexport class AuxiliaryDataSet {\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    static new() {\n        var ret = wasm.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @param {AuxiliaryData} data\n     * @returns {AuxiliaryData | undefined}\n     */\n    insert(tx_index, data) {\n        _assertClass(tx_index, BigNum);\n        _assertClass(data, AuxiliaryData);\n        var ret = wasm.auxiliarydataset_insert(this.ptr, tx_index.ptr, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} tx_index\n     * @returns {AuxiliaryData | undefined}\n     */\n    get(tx_index) {\n        _assertClass(tx_index, BigNum);\n        var ret = wasm.auxiliarydataset_get(this.ptr, tx_index.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    indices() {\n        var ret = wasm.auxiliarydataset_indices(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n}\n/** */\nexport class BaseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_baseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {StakeCredential} stake\n     * @returns {BaseAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        var ret = wasm.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_cred() {\n        var ret = wasm.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {BaseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.address_as_base(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/** */\nexport class BigInt {\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bigint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigInt}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bigint_from_bytes(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_u64() {\n        var ret = wasm.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {Int | undefined}\n     */\n    as_int() {\n        var ret = wasm.bigint_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {BigInt}\n     */\n    static from_str(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bigint_from_str(ptr0, len0);\n        return BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class BigNum {\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bignum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BigNum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_bytes(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {string} string\n     * @returns {BigNum}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bignum_from_str(ptr0, len0);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {BigNum}\n     */\n    static zero() {\n        var ret = wasm.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        var ret = wasm.bignum_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_mul(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_mul(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_add(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_add(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_div(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    checked_div_ceil(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_checked_div_ceil(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * returns 0 if it would otherwise underflow\n     * @param {BigNum} other\n     * @returns {BigNum}\n     */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        var ret = wasm.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} rhs_value\n     * @returns {number}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        var ret = wasm.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n}\n/** */\nexport class Bip32PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n     * derive this private key with the given index.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PrivateKey}\n     */\n    derive(index) {\n        var ret = wasm.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * 128-byte xprv a key format in Cardano that some software still uses or requires\n     * the traditional 96-byte xprv is simply encoded as\n     * prv | chaincode\n     * however, because some software may not know how to compute a public key from a private key,\n     * the 128-byte inlines the public key in the following format\n     * prv | pub | chaincode\n     * so be careful if you see the term \"xprv\" as it could refer to either one\n     * our library does not require the pub (instead we compute the pub key when needed)\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_128_xprv(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_128_xprv(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * see from_128_xprv\n     * @returns {Uint8Array}\n     */\n    to_128_xprv() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Bip32PrivateKey}\n     */\n    static generate_ed25519_bip32() {\n        var ret = wasm.bip32privatekey_generate_ed25519_bip32();\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    to_raw_key() {\n        var ret = wasm.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Bip32PublicKey}\n     */\n    to_public() {\n        var ret = wasm.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bytes(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bech32(ptr0, len0);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {Uint8Array} entropy\n     * @param {Uint8Array} password\n     * @returns {Bip32PrivateKey}\n     */\n    static from_bip39_entropy(entropy, password) {\n        var ptr0 = passArray8ToWasm0(entropy, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(password, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Bip32PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n     * derive this public key with the given index.\n     *\n     * # Errors\n     *\n     * If the index is not a soft derivation index (< 0x80000000) then\n     * calling this method will fail.\n     *\n     * # Security considerations\n     *\n     * * hard derivation index cannot be soft derived with the public key\n     *\n     * # Hard derivation vs Soft derivation\n     *\n     * If you pass an index below 0x80000000 then it is a soft derivation.\n     * The advantage of soft derivation is that it is possible to derive the\n     * public key too. I.e. derivation the private key with a soft derivation\n     * index and then retrieving the associated public key is equivalent to\n     * deriving the public key associated to the parent private key.\n     *\n     * Hard derivation index does not allow public key derivation.\n     *\n     * This is why deriving the private key should not fail while deriving\n     * the public key may fail (if the derivation index is invalid).\n     * @param {number} index\n     * @returns {Bip32PublicKey}\n     */\n    derive(index) {\n        var ret = wasm.bip32publickey_derive(this.ptr, index);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_raw_key() {\n        var ret = wasm.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Bip32PublicKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bytes(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Bip32PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bip32publickey_from_bech32(ptr0, len0);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Block {\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_block_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Block}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_from_bytes(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.block_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.block_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Block}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.block_from_json(ptr0, len0);\n        return Block.__wrap(ret);\n    }\n    /**\n     * @returns {Header}\n     */\n    header() {\n        var ret = wasm.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    transaction_bodies() {\n        var ret = wasm.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    transaction_witness_sets() {\n        var ret = wasm.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {AuxiliaryDataSet}\n     */\n    auxiliary_data_set() {\n        var ret = wasm.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    invalid_transactions() {\n        var ret = wasm.block_invalid_transactions(this.ptr);\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @param {Header} header\n     * @param {TransactionBodies} transaction_bodies\n     * @param {TransactionWitnessSets} transaction_witness_sets\n     * @param {AuxiliaryDataSet} auxiliary_data_set\n     * @param {TransactionIndexes} invalid_transactions\n     * @returns {Block}\n     */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        _assertClass(invalid_transactions, TransactionIndexes);\n        var ret = wasm.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, invalid_transactions.ptr);\n        return Block.__wrap(ret);\n    }\n}\n/** */\nexport class BlockHash {\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BlockHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bytes(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {BlockHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_bech32(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {BlockHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.blockhash_from_hex(ptr0, len0);\n        return BlockHash.__wrap(ret);\n    }\n}\n/** */\nexport class Blockfrost {\n    static __wrap(ptr) {\n        const obj = Object.create(Blockfrost.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_blockfrost_free(ptr);\n    }\n    /**\n     * @param {string} url\n     * @param {string} project_id\n     * @returns {Blockfrost}\n     */\n    static new(url, project_id) {\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(project_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.blockfrost_new(ptr0, len0, ptr1, len1);\n        return Blockfrost.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    project_id() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.blockfrost_project_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class BootstrapWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {BootstrapWitness}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_from_bytes(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.bootstrapwitness_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {BootstrapWitness}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_from_json(ptr0, len0);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        var ret = wasm.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        var ret = wasm.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chain_code() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @param {Uint8Array} chain_code\n     * @param {Uint8Array} attributes\n     * @returns {BootstrapWitness}\n     */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ptr0 = passArray8ToWasm0(chain_code, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(attributes, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\n/** */\nexport class BootstrapWitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses}\n     */\n    static new() {\n        var ret = wasm.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BootstrapWitness}\n     */\n    get(index) {\n        var ret = wasm.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        wasm.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class ByronAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_byronaddress_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_base58() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ByronAddress}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_bytes(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n     * note: for bech32 addresses, you need to use network_id instead\n     * @returns {number}\n     */\n    byron_protocol_magic() {\n        var ret = wasm.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    attributes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        var ret = wasm.byronaddress_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @param {string} s\n     * @returns {ByronAddress}\n     */\n    static from_base58(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_from_base58(ptr0, len0);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * @param {Bip32PublicKey} key\n     * @param {number} protocol_magic\n     * @returns {ByronAddress}\n     */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        var ret = wasm.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n     * @param {string} s\n     * @returns {boolean}\n     */\n    static is_valid(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {ByronAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.address_as_byron(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\n/** */\nexport class Certificate {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificate}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificate_from_bytes(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.certificate_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificate}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificate_from_json(ptr0, len0);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeRegistration} stake_registration\n     * @returns {Certificate}\n     */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        var ret = wasm.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDeregistration} stake_deregistration\n     * @returns {Certificate}\n     */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        var ret = wasm.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {StakeDelegation} stake_delegation\n     * @returns {Certificate}\n     */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        var ret = wasm.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRegistration} pool_registration\n     * @returns {Certificate}\n     */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        var ret = wasm.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {PoolRetirement} pool_retirement\n     * @returns {Certificate}\n     */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        var ret = wasm.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisKeyDelegation} genesis_key_delegation\n     * @returns {Certificate}\n     */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        var ret = wasm.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n     * @returns {Certificate}\n     */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        var ret = wasm.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {StakeRegistration | undefined}\n     */\n    as_stake_registration() {\n        var ret = wasm.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDeregistration | undefined}\n     */\n    as_stake_deregistration() {\n        var ret = wasm.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeDelegation | undefined}\n     */\n    as_stake_delegation() {\n        var ret = wasm.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRegistration | undefined}\n     */\n    as_pool_registration() {\n        var ret = wasm.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {PoolRetirement | undefined}\n     */\n    as_pool_retirement() {\n        var ret = wasm.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisKeyDelegation | undefined}\n     */\n    as_genesis_key_delegation() {\n        var ret = wasm.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {MoveInstantaneousRewardsCert | undefined}\n     */\n    as_move_instantaneous_rewards_cert() {\n        var ret = wasm.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/** */\nexport class Certificates {\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_certificates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Certificates}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificates_from_bytes(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.certificates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.certificates_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Certificates}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.certificates_from_json(ptr0, len0);\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {Certificates}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Certificate}\n     */\n    get(index) {\n        var ret = wasm.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n     * @param {Certificate} elem\n     */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        wasm.certificates_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class ConstrPlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ConstrPlutusData}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.constrplutusdata_from_bytes(ptr0, len0);\n        return ConstrPlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    alternative() {\n        var ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    data() {\n        var ret = wasm.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} alternative\n     * @param {PlutusList} data\n     * @returns {ConstrPlutusData}\n     */\n    static new(alternative, data) {\n        _assertClass(alternative, BigNum);\n        _assertClass(data, PlutusList);\n        var ret = wasm.constrplutusdata_new(alternative.ptr, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\n/** */\nexport class CostModel {\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmodel_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {CostModel}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.costmodel_from_bytes(ptr0, len0);\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new() {\n        var ret = wasm.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {CostModel}\n     */\n    static new_plutus_v2() {\n        var ret = wasm.costmodel_new_plutus_v2();\n        return CostModel.__wrap(ret);\n    }\n    /**\n     * @param {number} operation\n     * @param {Int} cost\n     * @returns {Int}\n     */\n    set(operation, cost) {\n        _assertClass(cost, Int);\n        var ret = wasm.costmodel_set(this.ptr, operation, cost.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} operation\n     * @returns {Int}\n     */\n    get(operation) {\n        var ret = wasm.costmodel_get(this.ptr, operation);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class Costmdls {\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_costmdls_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Costmdls}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.costmdls_from_bytes(ptr0, len0);\n        return Costmdls.__wrap(ret);\n    }\n    /**\n     * @returns {Costmdls}\n     */\n    static new() {\n        var ret = wasm.costmdls_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Language} key\n     * @param {CostModel} value\n     * @returns {CostModel | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        var ret = wasm.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @param {Language} key\n     * @returns {CostModel | undefined}\n     */\n    get(key) {\n        _assertClass(key, Language);\n        var ret = wasm.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n     * @returns {Languages}\n     */\n    keys() {\n        var ret = wasm.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n}\n/** */\nexport class DNSRecordAorAAAA {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordAorAAAA}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_from_bytes(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordAorAAAA}\n     */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordaoraaaa_new(ptr0, len0);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class DNSRecordSRV {\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DNSRecordSRV}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_from_bytes(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @param {string} dns_name\n     * @returns {DNSRecordSRV}\n     */\n    static new(dns_name) {\n        var ptr0 = passStringToWasm0(dns_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.dnsrecordsrv_new(ptr0, len0);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    record() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class Data {\n    static __wrap(ptr) {\n        const obj = Object.create(Data.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_data_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Data}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.data_from_bytes(ptr0, len0);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.data_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.data_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Data}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.data_from_json(ptr0, len0);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} plutus_data\n     * @returns {Data}\n     */\n    static new(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        var ret = wasm.data_new(plutus_data.ptr);\n        return Data.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    get() {\n        var ret = wasm.data_get(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n}\n/** */\nexport class DataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {DataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_bytes(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {DataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_bech32(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {DataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datahash_from_hex(ptr0, len0);\n        return DataHash.__wrap(ret);\n    }\n}\n/** */\nexport class Datum {\n    static __wrap(ptr) {\n        const obj = Object.create(Datum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_datum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Datum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datum_from_bytes(ptr0, len0);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.datum_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.datum_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Datum}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.datum_from_json(ptr0, len0);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @param {DataHash} data_hash\n     * @returns {Datum}\n     */\n    static new_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        var ret = wasm.datum_new_data_hash(data_hash.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @param {Data} data\n     * @returns {Datum}\n     */\n    static new_data(data) {\n        _assertClass(data, Data);\n        var ret = wasm.datum_new_data(data.ptr);\n        return Datum.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.datum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {DataHash | undefined}\n     */\n    as_data_hash() {\n        var ret = wasm.datum_as_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Data | undefined}\n     */\n    as_data() {\n        var ret = wasm.datum_as_data(this.ptr);\n        return ret === 0 ? undefined : Data.__wrap(ret);\n    }\n}\n/** */\nexport class Ed25519KeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bytes(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {Ed25519KeyHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_bech32(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {Ed25519KeyHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhash_from_hex(ptr0, len0);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/** */\nexport class Ed25519KeyHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhashes_from_bytes(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.ed25519keyhashes_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Ed25519KeyHashes}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519keyhashes_from_json(ptr0, len0);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Ed25519KeyHash}\n     */\n    get(index) {\n        var ret = wasm.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        wasm.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Ed25519Signature {\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech32_str\n     * @returns {Ed25519Signature}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bech32(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {string} input\n     * @returns {Ed25519Signature}\n     */\n    static from_hex(input) {\n        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_hex(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ed25519Signature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ed25519signature_from_bytes(ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/** */\nexport class EnterpriseAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {EnterpriseAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {EnterpriseAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.address_as_enterprise(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\n/** */\nexport class ExUnitPrices {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunitprices_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnitPrices}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.exunitprices_from_bytes(ptr0, len0);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    mem_price() {\n        var ret = wasm.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    step_price() {\n        var ret = wasm.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} mem_price\n     * @param {UnitInterval} step_price\n     * @returns {ExUnitPrices}\n     */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        var ret = wasm.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {number} mem_price\n     * @param {number} step_price\n     * @returns {ExUnitPrices}\n     */\n    static from_float(mem_price, step_price) {\n        var ret = wasm.exunitprices_from_float(mem_price, step_price);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\n/** */\nexport class ExUnits {\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_exunits_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ExUnits}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.exunits_from_bytes(ptr0, len0);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    mem() {\n        var ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    steps() {\n        var ret = wasm.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} mem\n     * @param {BigNum} steps\n     * @returns {ExUnits}\n     */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        var ret = wasm.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\n/** */\nexport class GeneralTransactionMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.generaltransactionmetadata_from_bytes(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.generaltransactionmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.generaltransactionmetadata_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {GeneralTransactionMetadata}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.generaltransactionmetadata_from_json(ptr0, len0);\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {GeneralTransactionMetadata}\n     */\n    static new() {\n        var ret = wasm.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key\n     * @returns {TransactionMetadatum | undefined}\n     */\n    get(key) {\n        _assertClass(key, BigNum);\n        var ret = wasm.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    keys() {\n        var ret = wasm.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\n/** */\nexport class GenesisDelegateHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bytes(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisDelegateHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_bech32(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisDelegateHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesisdelegatehash_from_hex(ptr0, len0);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n}\n/** */\nexport class GenesisHash {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bytes(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {GenesisHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_bech32(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {GenesisHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishash_from_hex(ptr0, len0);\n        return GenesisHash.__wrap(ret);\n    }\n}\n/** */\nexport class GenesisHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesishashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisHashes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishashes_from_bytes(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesishashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.genesishashes_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisHashes}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesishashes_from_json(ptr0, len0);\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {GenesisHash}\n     */\n    get(index) {\n        var ret = wasm.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        wasm.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class GenesisKeyDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesiskeydelegation_from_bytes(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genesiskeydelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.genesiskeydelegation_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {GenesisKeyDelegation}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.genesiskeydelegation_from_json(ptr0, len0);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHash}\n     */\n    genesishash() {\n        var ret = wasm.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisDelegateHash}\n     */\n    genesis_delegate_hash() {\n        var ret = wasm.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        var ret = wasm.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} genesishash\n     * @param {GenesisDelegateHash} genesis_delegate_hash\n     * @param {VRFKeyHash} vrf_keyhash\n     * @returns {GenesisKeyDelegation}\n     */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        var ret = wasm.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\n/** */\nexport class Header {\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_header_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Header}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.header_from_bytes(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.header_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.header_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Header}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.header_from_json(ptr0, len0);\n        return Header.__wrap(ret);\n    }\n    /**\n     * @returns {HeaderBody}\n     */\n    header_body() {\n        var ret = wasm.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {KESSignature}\n     */\n    body_signature() {\n        var ret = wasm.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n     * @param {HeaderBody} header_body\n     * @param {KESSignature} body_signature\n     * @returns {Header}\n     */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        var ret = wasm.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\n/** */\nexport class HeaderBody {\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_headerbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {HeaderBody}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headerbody_from_bytes(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.headerbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.headerbody_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {HeaderBody}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.headerbody_from_json(ptr0, len0);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    block_number() {\n        var ret = wasm.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BlockHash | undefined}\n     */\n    prev_hash() {\n        var ret = wasm.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    issuer_vkey() {\n        var ret = wasm.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFVKey}\n     */\n    vrf_vkey() {\n        var ret = wasm.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    nonce_vrf() {\n        var ret = wasm.headerbody_nonce_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {VRFCert}\n     */\n    leader_vrf() {\n        var ret = wasm.headerbody_leader_vrf(this.ptr);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    block_body_size() {\n        var ret = wasm.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BlockHash}\n     */\n    block_body_hash() {\n        var ret = wasm.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n     * @returns {OperationalCert}\n     */\n    operational_cert() {\n        var ret = wasm.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {ProtocolVersion}\n     */\n    protocol_version() {\n        var ret = wasm.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {number} block_number\n     * @param {BigNum} slot\n     * @param {BlockHash | undefined} prev_hash\n     * @param {Vkey} issuer_vkey\n     * @param {VRFVKey} vrf_vkey\n     * @param {VRFCert} nonce_vrf\n     * @param {VRFCert} leader_vrf\n     * @param {number} block_body_size\n     * @param {BlockHash} block_body_hash\n     * @param {OperationalCert} operational_cert\n     * @param {ProtocolVersion} protocol_version\n     * @returns {HeaderBody}\n     */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, nonce_vrf, leader_vrf, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        _assertClass(slot, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(nonce_vrf, VRFCert);\n        _assertClass(leader_vrf, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        var ret = wasm.headerbody_new(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, nonce_vrf.ptr, leader_vrf.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\n/** */\nexport class Int {\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_int_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Int}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.int_from_bytes(ptr0, len0);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} x\n     * @returns {Int}\n     */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        var ret = wasm.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @param {number} x\n     * @returns {Int}\n     */\n    static new_i32(x) {\n        var ret = wasm.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_positive() {\n        var ret = wasm.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the BigNum representation\n     * only in case the underlying i128 value is positive.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_positive() {\n        var ret = wasm.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * BigNum can only contain unsigned u64 values\n     *\n     * This function will return the *absolute* BigNum representation\n     * only in case the underlying i128 value is negative.\n     *\n     * Otherwise nothing will be returned (undefined).\n     * @returns {BigNum | undefined}\n     */\n    as_negative() {\n        var ret = wasm.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * !!! DEPRECATED !!!\n     * Returns an i32 value in case the underlying original i128 value is within the limits.\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * Otherwise will just return an empty value (undefined).\n     * @returns {number | undefined}\n     */\n    as_i32_or_nothing() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * Returns the underlying value converted to i32 if possible (within limits)\n     * JsError in case of out of boundary overflow\n     * @returns {number}\n     */\n    as_i32_or_fail() {\n        var ret = wasm.int_as_i32_or_fail(this.ptr);\n        return ret;\n    }\n    /**\n     * Returns string representation of the underlying i128 value directly.\n     * Might contain the minus sign (-) in case of negative value.\n     * @returns {string}\n     */\n    to_str() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.int_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} string\n     * @returns {Int}\n     */\n    static from_str(string) {\n        var ptr0 = passStringToWasm0(string, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.int_from_str(ptr0, len0);\n        return Int.__wrap(ret);\n    }\n}\n/** */\nexport class Ipv4 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv4_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv4}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_from_bytes(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.ipv4_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv4}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_from_json(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv4}\n     */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv4_new(ptr0, len0);\n        return Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Ipv6 {\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ipv6_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Ipv6}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_from_bytes(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.ipv6_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Ipv6}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_from_json(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @returns {Ipv6}\n     */\n    static new(data) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.ipv6_new(ptr0, len0);\n        return Ipv6.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    ip() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class KESSignature {\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kessignature_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESSignature}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kessignature_from_bytes(ptr0, len0);\n        return KESSignature.__wrap(ret);\n    }\n}\n/** */\nexport class KESVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_kesvkey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {KESVKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bytes(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {KESVKey}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_bech32(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {KESVKey}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.kesvkey_from_hex(ptr0, len0);\n        return KESVKey.__wrap(ret);\n    }\n}\n/** */\nexport class Language {\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_language_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Language}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.language_from_bytes(ptr0, len0);\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v1() {\n        var ret = wasm.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {Language}\n     */\n    static new_plutus_v2() {\n        var ret = wasm.language_new_plutus_v2();\n        return Language.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class Languages {\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_languages_free(ptr);\n    }\n    /**\n     * @returns {Languages}\n     */\n    static new() {\n        var ret = wasm.languages_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Language}\n     */\n    get(index) {\n        var ret = wasm.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n     * @param {Language} elem\n     */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.ptr;\n        elem.ptr = 0;\n        wasm.languages_add(this.ptr, ptr0);\n    }\n}\n/** */\nexport class LegacyDaedalusPrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {LegacyDaedalusPrivateKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.legacydaedalusprivatekey_from_bytes(ptr0, len0);\n        return LegacyDaedalusPrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    chaincode() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class LinearFee {\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_linearfee_free(ptr);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    constant() {\n        var ret = wasm.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coefficient() {\n        var ret = wasm.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coefficient\n     * @param {BigNum} constant\n     * @returns {LinearFee}\n     */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        var ret = wasm.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\n/** */\nexport class MIRToStakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mirtostakecredentials_from_bytes(ptr0, len0);\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mirtostakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.mirtostakecredentials_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MIRToStakeCredentials}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mirtostakecredentials_from_json(ptr0, len0);\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {MIRToStakeCredentials}\n     */\n    static new() {\n        var ret = wasm.auxiliarydataset_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @param {Int} delta\n     * @returns {Int | undefined}\n     */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        var ret = wasm.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} cred\n     * @returns {Int | undefined}\n     */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        var ret = wasm.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    keys() {\n        var ret = wasm.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\n/** */\nexport class MetadataList {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatalist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataList}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatalist_from_bytes(ptr0, len0);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    static new() {\n        var ret = wasm.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionMetadatum}\n     */\n    get(index) {\n        var ret = wasm.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        wasm.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class MetadataMap {\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_metadatamap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MetadataMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_from_bytes(ptr0, len0);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    static new() {\n        var ret = wasm.generaltransactionmetadata_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_str(key, value) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_str(this.ptr, ptr0, len0, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {number} key\n     * @param {TransactionMetadatum} value\n     * @returns {TransactionMetadatum | undefined}\n     */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        var ret = wasm.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {TransactionMetadatum}\n     */\n    get(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_get(this.ptr, key.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} key\n     * @returns {TransactionMetadatum}\n     */\n    get_str(key) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.metadatamap_get_str(this.ptr, ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {number} key\n     * @returns {TransactionMetadatum}\n     */\n    get_i32(key) {\n        var ret = wasm.metadatamap_get_i32(this.ptr, key);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionMetadatum} key\n     * @returns {boolean}\n     */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        var ret = wasm.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    keys() {\n        var ret = wasm.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\n/** */\nexport class Mint {\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mint_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Mint}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mint_from_bytes(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.mint_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.mint_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Mint}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.mint_from_json(ptr0, len0);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {Mint}\n     */\n    static new() {\n        var ret = wasm.assets_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {Mint}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = wasm.mint_new_from_entry(key.ptr, value.ptr);\n        return Mint.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ScriptHash} key\n     * @param {MintAssets} value\n     * @returns {MintAssets | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        var ret = wasm.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} key\n     * @returns {MintAssets | undefined}\n     */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        var ret = wasm.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        var ret = wasm.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only positive (minting) entries are present\n     * @returns {MultiAsset}\n     */\n    as_positive_multiasset() {\n        var ret = wasm.mint_as_positive_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * Returns the multiasset where only negative (burning) entries are present\n     * @returns {MultiAsset}\n     */\n    as_negative_multiasset() {\n        var ret = wasm.mint_as_negative_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/** */\nexport class MintAssets {\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_mintassets_free(ptr);\n    }\n    /**\n     * @returns {MintAssets}\n     */\n    static new() {\n        var ret = wasm.assets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {MintAssets}\n     */\n    static new_from_entry(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.mintassets_new_from_entry(key.ptr, ptr0);\n        return MintAssets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {AssetName} key\n     * @param {Int} value\n     * @returns {Int | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @param {AssetName} key\n     * @returns {Int | undefined}\n     */\n    get(key) {\n        _assertClass(key, AssetName);\n        var ret = wasm.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n     * @returns {AssetNames}\n     */\n    keys() {\n        var ret = wasm.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/** */\nexport class MoveInstantaneousReward {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousreward_from_bytes(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousreward_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.moveinstantaneousreward_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousReward}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousreward_from_json(ptr0, len0);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {number} pot\n     * @param {BigNum} amount\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        var ret = wasm.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {number} pot\n     * @param {MIRToStakeCredentials} amounts\n     * @returns {MoveInstantaneousReward}\n     */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        var ret = wasm.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    pot() {\n        var ret = wasm.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    as_to_other_pot() {\n        var ret = wasm.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {MIRToStakeCredentials | undefined}\n     */\n    as_to_stake_creds() {\n        var ret = wasm.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\n/** */\nexport class MoveInstantaneousRewardsCert {\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousrewardscert_from_bytes(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.moveinstantaneousrewardscert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.moveinstantaneousrewardscert_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.moveinstantaneousrewardscert_from_json(ptr0, len0);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n    /**\n     * @returns {MoveInstantaneousReward}\n     */\n    move_instantaneous_reward() {\n        var ret = wasm.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n     * @param {MoveInstantaneousReward} move_instantaneous_reward\n     * @returns {MoveInstantaneousRewardsCert}\n     */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        var ret = wasm.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/** */\nexport class MultiAsset {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multiasset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiAsset}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multiasset_from_bytes(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multiasset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.multiasset_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiAsset}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multiasset_from_json(ptr0, len0);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * @returns {MultiAsset}\n     */\n    static new() {\n        var ret = wasm.assets_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n     * the number of unique policy IDs in the multiasset\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}\n     * @param {ScriptHash} policy_id\n     * @param {Assets} assets\n     * @returns {Assets | undefined}\n     */\n    insert(policy_id, assets) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(assets, Assets);\n        var ret = wasm.multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * all assets under {policy_id}, if any exist, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @returns {Assets | undefined}\n     */\n    get(policy_id) {\n        _assertClass(policy_id, ScriptHash);\n        var ret = wasm.multiasset_get(this.ptr, policy_id.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n     * sets the asset {asset_name} to {value} under policy {policy_id}\n     * returns the previous amount if it was set, or else None (undefined in JS)\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    set_asset(policy_id, asset_name, value) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        _assertClass(value, BigNum);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        var ret = wasm.multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * returns the amount of asset {asset_name} under policy {policy_id}\n     * If such an asset does not exist, 0 is returned.\n     * @param {ScriptHash} policy_id\n     * @param {AssetName} asset_name\n     * @returns {BigNum}\n     */\n    get_asset(policy_id, asset_name) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        var ret = wasm.multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * returns all policy IDs used by assets in this multiasset\n     * @returns {ScriptHashes}\n     */\n    keys() {\n        var ret = wasm.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * removes an asset from the list if the result is 0 or less\n     * does not modify this object, instead the result is returned\n     * @param {MultiAsset} rhs_ma\n     * @returns {MultiAsset}\n     */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        var ret = wasm.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/** */\nexport class MultiHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_multihostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {MultiHostName}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multihostname_from_bytes(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.multihostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.multihostname_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {MultiHostName}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.multihostname_from_json(ptr0, len0);\n        return MultiHostName.__wrap(ret);\n    }\n    /**\n     * @returns {DNSRecordSRV}\n     */\n    dns_name() {\n        var ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n     * @param {DNSRecordSRV} dns_name\n     * @returns {MultiHostName}\n     */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        var ret = wasm.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\n/** */\nexport class NativeScript {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NativeScript}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nativescript_from_bytes(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nativescript_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.nativescript_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {NativeScript}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nativescript_from_json(ptr0, len0);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        var ret = wasm.nativescript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptPubkey} script_pubkey\n     * @returns {NativeScript}\n     */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        var ret = wasm.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAll} script_all\n     * @returns {NativeScript}\n     */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        var ret = wasm.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptAny} script_any\n     * @returns {NativeScript}\n     */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        var ret = wasm.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {ScriptNOfK} script_n_of_k\n     * @returns {NativeScript}\n     */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        var ret = wasm.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockStart} timelock_start\n     * @returns {NativeScript}\n     */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        var ret = wasm.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {TimelockExpiry} timelock_expiry\n     * @returns {NativeScript}\n     */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        var ret = wasm.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ScriptPubkey | undefined}\n     */\n    as_script_pubkey() {\n        var ret = wasm.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAll | undefined}\n     */\n    as_script_all() {\n        var ret = wasm.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptAny | undefined}\n     */\n    as_script_any() {\n        var ret = wasm.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptNOfK | undefined}\n     */\n    as_script_n_of_k() {\n        var ret = wasm.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockStart | undefined}\n     */\n    as_timelock_start() {\n        var ret = wasm.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {TimelockExpiry | undefined}\n     */\n    as_timelock_expiry() {\n        var ret = wasm.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * Returns an array of unique Ed25519KeyHashes\n     * contained within this script recursively on any depth level.\n     * The order of the keys in the result is not determined in any way.\n     * @returns {Ed25519KeyHashes}\n     */\n    get_required_signers() {\n        var ret = wasm.nativescript_get_required_signers(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {BigNum | undefined} lower_bound\n     * @param {BigNum | undefined} upper_bound\n     * @param {Ed25519KeyHashes} key_hashes\n     * @returns {boolean}\n     */\n    verify(lower_bound, upper_bound, key_hashes) {\n        let ptr0 = 0;\n        if (!isLikeNone(lower_bound)) {\n            _assertClass(lower_bound, BigNum);\n            ptr0 = lower_bound.ptr;\n            lower_bound.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(upper_bound)) {\n            _assertClass(upper_bound, BigNum);\n            ptr1 = upper_bound.ptr;\n            upper_bound.ptr = 0;\n        }\n        _assertClass(key_hashes, Ed25519KeyHashes);\n        var ret = wasm.nativescript_verify(this.ptr, ptr0, ptr1, key_hashes.ptr);\n        return ret !== 0;\n    }\n}\n/** */\nexport class NativeScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nativescripts_free(ptr);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {NativeScript}\n     */\n    get(index) {\n        var ret = wasm.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        wasm.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class NetworkId {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkid_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {NetworkId}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.networkid_from_bytes(ptr0, len0);\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.networkid_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.networkid_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {NetworkId}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.networkid_from_json(ptr0, len0);\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static testnet() {\n        var ret = wasm.networkid_testnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkId}\n     */\n    static mainnet() {\n        var ret = wasm.networkid_mainnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.networkid_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class NetworkInfo {\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_networkinfo_free(ptr);\n    }\n    /**\n     * @param {number} network_id\n     * @param {number} protocol_magic\n     * @returns {NetworkInfo}\n     */\n    static new(network_id, protocol_magic) {\n        var ret = wasm.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    network_id() {\n        var ret = wasm.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n     * @returns {number}\n     */\n    protocol_magic() {\n        var ret = wasm.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static testnet() {\n        var ret = wasm.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n     * @returns {NetworkInfo}\n     */\n    static mainnet() {\n        var ret = wasm.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\n/** */\nexport class Nonce {\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_nonce_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Nonce}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_from_bytes(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @returns {Nonce}\n     */\n    static new_identity() {\n        var ret = wasm.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} hash\n     * @returns {Nonce}\n     */\n    static new_from_hash(hash) {\n        var ptr0 = passArray8ToWasm0(hash, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.nonce_new_from_hash(ptr0, len0);\n        return Nonce.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    get_hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class OperationalCert {\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_operationalcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {OperationalCert}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.operationalcert_from_bytes(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.operationalcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.operationalcert_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {OperationalCert}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.operationalcert_from_json(ptr0, len0);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n     * @returns {KESVKey}\n     */\n    hot_vkey() {\n        var ret = wasm.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    sequence_number() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    kes_period() {\n        var ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    sigma() {\n        var ret = wasm.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {KESVKey} hot_vkey\n     * @param {number} sequence_number\n     * @param {number} kes_period\n     * @param {Ed25519Signature} sigma\n     * @returns {OperationalCert}\n     */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        var ret = wasm.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\n/** */\nexport class PlutusData {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusdata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusdata_from_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {ConstrPlutusData} constr_plutus_data\n     * @returns {PlutusData}\n     */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        var ret = wasm.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusMap} map\n     * @returns {PlutusData}\n     */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        var ret = wasm.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} list\n     * @returns {PlutusData}\n     */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        var ret = wasm.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {BigInt} integer\n     * @returns {PlutusData}\n     */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        var ret = wasm.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusData}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {ConstrPlutusData | undefined}\n     */\n    as_constr_plutus_data() {\n        var ret = wasm.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusMap | undefined}\n     */\n    as_map() {\n        var ret = wasm.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    as_list() {\n        var ret = wasm.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {BigInt | undefined}\n     */\n    as_integer() {\n        var ret = wasm.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class PlutusList {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuslist_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusList}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutuslist_from_bytes(ptr0, len0);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    static new() {\n        var ret = wasm.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusData}\n     */\n    get(index) {\n        var ret = wasm.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        wasm.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class PlutusMap {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusmap_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusMap}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusmap_from_bytes(ptr0, len0);\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusMap}\n     */\n    static new() {\n        var ret = wasm.plutusmap_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {PlutusData} key\n     * @param {PlutusData} value\n     * @returns {PlutusData | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        var ret = wasm.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} key\n     * @returns {PlutusData | undefined}\n     */\n    get(key) {\n        _assertClass(key, PlutusData);\n        var ret = wasm.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusList}\n     */\n    keys() {\n        var ret = wasm.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\n/** */\nexport class PlutusScript {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscript_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscript_from_bytes(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     * @param {number} namespace\n     * @returns {ScriptHash}\n     */\n    hash(namespace) {\n        var ret = wasm.plutusscript_hash(this.ptr, namespace);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n     *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n     *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n     *\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScript}\n     */\n    static new(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     *     * The raw bytes of this compiled Plutus script.\n     *     * If you need \"cborBytes\" for cardano-cli use PlutusScript::to_bytes() instead.\n     *\n     * @returns {Uint8Array}\n     */\n    bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscript_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class PlutusScripts {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PlutusScripts}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.plutusscripts_from_bytes(ptr0, len0);\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScripts}\n     */\n    static new() {\n        var ret = wasm.plutusscripts_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PlutusScript}\n     */\n    get(index) {\n        var ret = wasm.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} elem\n     */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        wasm.plutusscripts_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class PlutusWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_plutuswitness_free(ptr);\n    }\n    /**\n     * Plutus V1 witness or witness where no script is attached and so version doesn't matter\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.ptr;\n            plutus_data.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.ptr;\n            script.ptr = 0;\n        }\n        var ret = wasm.plutuswitness_new(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusData} redeemer\n     * @param {PlutusData | undefined} plutus_data\n     * @param {PlutusScript | undefined} script\n     * @returns {PlutusWitness}\n     */\n    static new_plutus_v2(redeemer, plutus_data, script) {\n        _assertClass(redeemer, PlutusData);\n        let ptr0 = 0;\n        if (!isLikeNone(plutus_data)) {\n            _assertClass(plutus_data, PlutusData);\n            ptr0 = plutus_data.ptr;\n            plutus_data.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(script)) {\n            _assertClass(script, PlutusScript);\n            ptr1 = script.ptr;\n            script.ptr = 0;\n        }\n        var ret = wasm.plutuswitness_new_plutus_v2(redeemer.ptr, ptr0, ptr1);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData | undefined}\n     */\n    plutus_data() {\n        var ret = wasm.plutuswitness_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    redeemer() {\n        var ret = wasm.plutuswitness_redeemer(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    script() {\n        var ret = wasm.plutuswitness_script(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    version() {\n        var ret = wasm.plutuswitness_version(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class Pointer {\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointer_free(ptr);\n    }\n    /**\n     * @param {BigNum} slot\n     * @param {BigNum} tx_index\n     * @param {BigNum} cert_index\n     * @returns {Pointer}\n     */\n    static new(slot, tx_index, cert_index) {\n        _assertClass(slot, BigNum);\n        _assertClass(tx_index, BigNum);\n        _assertClass(cert_index, BigNum);\n        var ret = wasm.pointer_new(slot.ptr, tx_index.ptr, cert_index.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.pointer_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    tx_index() {\n        var ret = wasm.pointer_tx_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cert_index() {\n        var ret = wasm.pointer_cert_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nexport class PointerAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @param {Pointer} stake\n     * @returns {PointerAddress}\n     */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        var ret = wasm.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Pointer}\n     */\n    stake_pointer() {\n        var ret = wasm.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {PointerAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.address_as_pointer(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\n/** */\nexport class PoolMetadata {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadata}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadata_from_bytes(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolmetadata_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolMetadata}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadata_from_json(ptr0, len0);\n        return PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @returns {URL}\n     */\n    url() {\n        var ret = wasm.multihostname_dns_name(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadataHash}\n     */\n    pool_metadata_hash() {\n        var ret = wasm.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @param {URL} url\n     * @param {PoolMetadataHash} pool_metadata_hash\n     * @returns {PoolMetadata}\n     */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        var ret = wasm.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\n/** */\nexport class PoolMetadataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolMetadataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_bytes(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {PoolMetadataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_bech32(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {PoolMetadataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolmetadatahash_from_hex(ptr0, len0);\n        return PoolMetadataHash.__wrap(ret);\n    }\n}\n/** */\nexport class PoolParams {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolparams_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolParams}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolparams_from_bytes(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolparams_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolparams_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolParams}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolparams_from_json(ptr0, len0);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    operator() {\n        var ret = wasm.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    vrf_keyhash() {\n        var ret = wasm.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    pledge() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    cost() {\n        var ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {UnitInterval}\n     */\n    margin() {\n        var ret = wasm.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddress}\n     */\n    reward_account() {\n        var ret = wasm.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHashes}\n     */\n    pool_owners() {\n        var ret = wasm.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @returns {Relays}\n     */\n    relays() {\n        var ret = wasm.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {PoolMetadata | undefined}\n     */\n    pool_metadata() {\n        var ret = wasm.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} operator\n     * @param {VRFKeyHash} vrf_keyhash\n     * @param {BigNum} pledge\n     * @param {BigNum} cost\n     * @param {UnitInterval} margin\n     * @param {RewardAddress} reward_account\n     * @param {Ed25519KeyHashes} pool_owners\n     * @param {Relays} relays\n     * @param {PoolMetadata | undefined} pool_metadata\n     * @returns {PoolParams}\n     */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.ptr;\n            pool_metadata.ptr = 0;\n        }\n        var ret = wasm.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\n/** */\nexport class PoolRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRegistration}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolregistration_from_bytes(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolregistration_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRegistration}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolregistration_from_json(ptr0, len0);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {PoolParams}\n     */\n    pool_params() {\n        var ret = wasm.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n     * @param {PoolParams} pool_params\n     * @returns {PoolRegistration}\n     */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        var ret = wasm.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n    /**\n     * @param {boolean} update\n     */\n    set_is_update(update) {\n        wasm.poolregistration_set_is_update(this.ptr, update);\n    }\n}\n/** */\nexport class PoolRetirement {\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_poolretirement_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PoolRetirement}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolretirement_from_bytes(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.poolretirement_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.poolretirement_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {PoolRetirement}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.poolretirement_from_json(ptr0, len0);\n        return PoolRetirement.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        var ret = wasm.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @param {number} epoch\n     * @returns {PoolRetirement}\n     */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\n/** */\nexport class PrivateKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_privatekey_free(ptr);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    to_public() {\n        var ret = wasm.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519() {\n        var ret = wasm.privatekey_generate_ed25519();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {PrivateKey}\n     */\n    static generate_ed25519extended() {\n        var ret = wasm.privatekey_generate_ed25519extended();\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * Get private key from its bech32 representation\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);\n     * ```\n     * For an extended 25519 key\n     * ```javascript\n     * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PrivateKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_bech32(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_extended_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_extended_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_normal_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_normal_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} message\n     * @returns {Ed25519Signature}\n     */\n    sign(message) {\n        var ptr0 = passArray8ToWasm0(message, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PrivateKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.privatekey_from_bytes(ptr0, len0);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.privatekey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class ProposedProtocolParameterUpdates {\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.proposedprotocolparameterupdates_from_bytes(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.proposedprotocolparameterupdates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.proposedprotocolparameterupdates_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.proposedprotocolparameterupdates_from_json(ptr0, len0);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    static new() {\n        var ret = wasm.auxiliarydataset_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {GenesisHash} key\n     * @param {ProtocolParamUpdate} value\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        var ret = wasm.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @param {GenesisHash} key\n     * @returns {ProtocolParamUpdate | undefined}\n     */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        var ret = wasm.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @returns {GenesisHashes}\n     */\n    keys() {\n        var ret = wasm.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\n/** */\nexport class ProtocolParamUpdate {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolparamupdate_from_bytes(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.protocolparamupdate_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolParamUpdate}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolparamupdate_from_json(ptr0, len0);\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} minfee_a\n     */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        wasm.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_a() {\n        var ret = wasm.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} minfee_b\n     */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        wasm.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    minfee_b() {\n        var ret = wasm.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_block_body_size\n     */\n    set_max_block_body_size(max_block_body_size) {\n        wasm.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_body_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_tx_size\n     */\n    set_max_tx_size(max_tx_size) {\n        wasm.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_tx_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_block_header_size\n     */\n    set_max_block_header_size(max_block_header_size) {\n        wasm.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_block_header_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {BigNum} key_deposit\n     */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        wasm.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    key_deposit() {\n        var ret = wasm.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        wasm.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    pool_deposit() {\n        var ret = wasm.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {number} max_epoch\n     */\n    set_max_epoch(max_epoch) {\n        wasm.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_epoch() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} n_opt\n     */\n    set_n_opt(n_opt) {\n        wasm.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    n_opt() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {UnitInterval} pool_pledge_influence\n     */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        wasm.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    pool_pledge_influence() {\n        var ret = wasm.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} expansion_rate\n     */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        wasm.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    expansion_rate() {\n        var ret = wasm.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} treasury_growth_rate\n     */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        wasm.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    treasury_growth_rate() {\n        var ret = wasm.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {UnitInterval} d\n     */\n    set_d(d) {\n        _assertClass(d, UnitInterval);\n        wasm.protocolparamupdate_set_d(this.ptr, d.ptr);\n    }\n    /**\n     * @returns {UnitInterval | undefined}\n     */\n    d() {\n        var ret = wasm.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {Nonce} extra_entropy\n     */\n    set_extra_entropy(extra_entropy) {\n        _assertClass(extra_entropy, Nonce);\n        wasm.protocolparamupdate_set_extra_entropy(this.ptr, extra_entropy.ptr);\n    }\n    /**\n     * @returns {Nonce | undefined}\n     */\n    extra_entropy() {\n        var ret = wasm.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n     * @param {ProtocolVersion} protocol_version\n     */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersion);\n        wasm.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n     * @returns {ProtocolVersion | undefined}\n     */\n    protocol_version() {\n        var ret = wasm.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} min_pool_cost\n     */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        wasm.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    min_pool_cost() {\n        var ret = wasm.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} ada_per_utxo_byte\n     */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        wasm.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ada_per_utxo_byte() {\n        var ret = wasm.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} cost_models\n     */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        wasm.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n     * @returns {Costmdls | undefined}\n     */\n    cost_models() {\n        var ret = wasm.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} execution_costs\n     */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        wasm.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n     * @returns {ExUnitPrices | undefined}\n     */\n    execution_costs() {\n        var ret = wasm.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_tx_ex_units() {\n        var ret = wasm.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_block_ex_units\n     */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        wasm.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n     * @returns {ExUnits | undefined}\n     */\n    max_block_ex_units() {\n        var ret = wasm.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     */\n    set_max_value_size(max_value_size) {\n        wasm.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_value_size() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} collateral_percentage\n     */\n    set_collateral_percentage(collateral_percentage) {\n        wasm.protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    collateral_percentage() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_collateral_percentage(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     */\n    set_max_collateral_inputs(max_collateral_inputs) {\n        wasm.protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    max_collateral_inputs() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolparamupdate_max_collateral_inputs(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {ProtocolParamUpdate}\n     */\n    static new() {\n        var ret = wasm.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\n/** */\nexport class ProtocolVersion {\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_protocolversion_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ProtocolVersion}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversion_from_bytes(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.protocolversion_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.protocolversion_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ProtocolVersion}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.protocolversion_from_json(ptr0, len0);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    major() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {number}\n     */\n    minor() {\n        var ret = wasm.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} major\n     * @param {number} minor\n     * @returns {ProtocolVersion}\n     */\n    static new(major, minor) {\n        var ret = wasm.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\n/**\n * ED25519 key used as public key\n */\nexport class PublicKey {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickey_free(ptr);\n    }\n    /**\n     * Get public key from its bech32 representation\n     * Example:\n     * ```javascript\n     * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n     * ```\n     * @param {string} bech32_str\n     * @returns {PublicKey}\n     */\n    static from_bech32(bech32_str) {\n        var ptr0 = passStringToWasm0(bech32_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bech32(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_bech32() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {PublicKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.publickey_from_bytes(ptr0, len0);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} data\n     * @param {Ed25519Signature} signature\n     * @returns {boolean}\n     */\n    verify(data, signature) {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    hash() {\n        var ret = wasm.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n}\n/** */\nexport class PublicKeys {\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_publickeys_free(ptr);\n    }\n    /** */\n    constructor() {\n        var ret = wasm.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    size() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {PublicKey}\n     */\n    get(index) {\n        var ret = wasm.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} key\n     */\n    add(key) {\n        _assertClass(key, PublicKey);\n        wasm.publickeys_add(this.ptr, key.ptr);\n    }\n}\n/** */\nexport class Redeemer {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemer_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemer}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemer_from_bytes(ptr0, len0);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        var ret = wasm.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        var ret = wasm.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusData}\n     */\n    data() {\n        var ret = wasm.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n     * @returns {ExUnits}\n     */\n    ex_units() {\n        var ret = wasm.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @param {PlutusData} data\n     * @param {ExUnits} ex_units\n     * @returns {Redeemer}\n     */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        var ret = wasm.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/** */\nexport class RedeemerTag {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemertag_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RedeemerTag}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemertag_from_bytes(ptr0, len0);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_spend() {\n        var ret = wasm.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_mint() {\n        var ret = wasm.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_cert() {\n        var ret = wasm.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    static new_reward() {\n        var ret = wasm.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/** */\nexport class RedeemerWitnessKey {\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerWitnessKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemerwitnesskey_free(ptr);\n    }\n    /**\n     * @returns {RedeemerTag}\n     */\n    tag() {\n        var ret = wasm.redeemerwitnesskey_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        var ret = wasm.pointer_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RedeemerTag} tag\n     * @param {BigNum} index\n     * @returns {RedeemerWitnessKey}\n     */\n    static new(tag, index) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        var ret = wasm.redeemerwitnesskey_new(tag.ptr, index.ptr);\n        return RedeemerWitnessKey.__wrap(ret);\n    }\n}\n/** */\nexport class Redeemers {\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_redeemers_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Redeemers}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.redeemers_from_bytes(ptr0, len0);\n        return Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {Redeemers}\n     */\n    static new() {\n        var ret = wasm.plutusmap_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Redeemer}\n     */\n    get(index) {\n        var ret = wasm.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n     * @param {Redeemer} elem\n     */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        wasm.redeemers_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Relay {\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relay_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relay}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relay_from_bytes(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relay_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.relay_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Relay}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relay_from_json(ptr0, len0);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {SingleHostAddr} single_host_addr\n     * @returns {Relay}\n     */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        var ret = wasm.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {SingleHostName} single_host_name\n     * @returns {Relay}\n     */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        var ret = wasm.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {MultiHostName} multi_host_name\n     * @returns {Relay}\n     */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        var ret = wasm.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {SingleHostAddr | undefined}\n     */\n    as_single_host_addr() {\n        var ret = wasm.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {SingleHostName | undefined}\n     */\n    as_single_host_name() {\n        var ret = wasm.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {MultiHostName | undefined}\n     */\n    as_multi_host_name() {\n        var ret = wasm.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\n/** */\nexport class Relays {\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_relays_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Relays}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relays_from_bytes(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.relays_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.relays_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Relays}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.relays_from_json(ptr0, len0);\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {Relays}\n     */\n    static new() {\n        var ret = wasm.assetnames_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Relay}\n     */\n    get(index) {\n        var ret = wasm.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n     * @param {Relay} elem\n     */\n    add(elem) {\n        _assertClass(elem, Relay);\n        wasm.relays_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class RequiredWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(RequiredWitnessSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_requiredwitnessset_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.requiredwitnessset_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Vkey} vkey\n     */\n    add_vkey_key(vkey) {\n        _assertClass(vkey, Vkey);\n        wasm.requiredwitnessset_add_vkey_key(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_vkey_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_vkey_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.requiredwitnessset_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Vkey} bootstrap\n     */\n    add_bootstrap_key(bootstrap) {\n        _assertClass(bootstrap, Vkey);\n        wasm.requiredwitnessset_add_bootstrap_key(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     */\n    add_bootstrap_key_hash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        wasm.requiredwitnessset_add_bootstrap_key_hash(this.ptr, hash.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.requiredwitnessset_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} native_script\n     */\n    add_native_script_hash(native_script) {\n        _assertClass(native_script, ScriptHash);\n        wasm.requiredwitnessset_add_native_script_hash(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.requiredwitnessset_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {ScriptHash} plutus_script\n     */\n    add_plutus_hash(plutus_script) {\n        _assertClass(plutus_script, ScriptHash);\n        wasm.requiredwitnessset_add_plutus_hash(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.requiredwitnessset_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {DataHash} plutus_datum\n     */\n    add_plutus_datum_hash(plutus_datum) {\n        _assertClass(plutus_datum, DataHash);\n        wasm.requiredwitnessset_add_plutus_datum_hash(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.requiredwitnessset_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RedeemerWitnessKey} redeemer\n     */\n    add_redeemer_tag(redeemer) {\n        _assertClass(redeemer, RedeemerWitnessKey);\n        wasm.requiredwitnessset_add_redeemer_tag(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} requirements\n     */\n    add_all(requirements) {\n        _assertClass(requirements, RequiredWitnessSet);\n        wasm.requiredwitnessset_add_all(this.ptr, requirements.ptr);\n    }\n    /**\n     * @returns {RequiredWitnessSet}\n     */\n    static new() {\n        var ret = wasm.requiredwitnessset_new();\n        return RequiredWitnessSet.__wrap(ret);\n    }\n}\n/** */\nexport class RewardAddress {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n     * @param {number} network\n     * @param {StakeCredential} payment\n     * @returns {RewardAddress}\n     */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        var ret = wasm.enterpriseaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    payment_cred() {\n        var ret = wasm.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    to_address() {\n        var ret = wasm.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @param {Address} addr\n     * @returns {RewardAddress | undefined}\n     */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        var ret = wasm.address_as_reward(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\n/** */\nexport class RewardAddresses {\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {RewardAddresses}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.rewardaddresses_from_bytes(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.rewardaddresses_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.rewardaddresses_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {RewardAddresses}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.rewardaddresses_from_json(ptr0, len0);\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {RewardAddress}\n     */\n    get(index) {\n        var ret = wasm.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} elem\n     */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        wasm.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Script {\n    static __wrap(ptr) {\n        const obj = Object.create(Script.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_script_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Script}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.script_from_bytes(ptr0, len0);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.script_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Script}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.script_from_json(ptr0, len0);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {Script}\n     */\n    static new_native(native_script) {\n        _assertClass(native_script, NativeScript);\n        var ret = wasm.script_new_native(native_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v1(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        var ret = wasm.script_new_plutus_v1(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     * @returns {Script}\n     */\n    static new_plutus_v2(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        var ret = wasm.script_new_plutus_v2(plutus_script.ptr);\n        return Script.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.script_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native() {\n        var ret = wasm.script_as_native(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v1() {\n        var ret = wasm.script_as_plutus_v1(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScript | undefined}\n     */\n    as_plutus_v2() {\n        var ret = wasm.script_as_plutus_v2(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptAll {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptall_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAll}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptall_from_bytes(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptall_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAll}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptall_from_json(ptr0, len0);\n        return ScriptAll.__wrap(ret);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        var ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAll}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptAny {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptany_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptAny}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptany_from_bytes(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptany_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptAny}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptany_from_json(ptr0, len0);\n        return ScriptAny.__wrap(ret);\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        var ret = wasm.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptAny}\n     */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptall_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptDataHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptDataHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_bytes(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptDataHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_bech32(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptDataHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptdatahash_from_hex(ptr0, len0);\n        return ScriptDataHash.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptHash {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bytes(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {ScriptHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_bech32(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {ScriptHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthash_from_hex(ptr0, len0);\n        return ScriptHash.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptHashes {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scripthashes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptHashes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthashes_from_bytes(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scripthashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scripthashes_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptHashes}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scripthashes_from_json(ptr0, len0);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHashes}\n     */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {ScriptHash}\n     */\n    get(index) {\n        var ret = wasm.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} elem\n     */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        wasm.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class ScriptNOfK {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptNOfK}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptnofk_from_bytes(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptnofk_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptnofk_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptNOfK}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptnofk_from_json(ptr0, len0);\n        return ScriptNOfK.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    n() {\n        var ret = wasm.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScripts}\n     */\n    native_scripts() {\n        var ret = wasm.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {number} n\n     * @param {NativeScripts} native_scripts\n     * @returns {ScriptNOfK}\n     */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        var ret = wasm.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptPubkey {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptPubkey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptpubkey_from_bytes(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptpubkey_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptpubkey_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptPubkey}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptpubkey_from_json(ptr0, len0);\n        return ScriptPubkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    addr_keyhash() {\n        var ret = wasm.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} addr_keyhash\n     * @returns {ScriptPubkey}\n     */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        var ret = wasm.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptRef {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptRef.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptref_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptref_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ScriptRef}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptref_from_bytes(ptr0, len0);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.script_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptref_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptRef}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptref_from_json(ptr0, len0);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @param {Script} script\n     * @returns {ScriptRef}\n     */\n    static new(script) {\n        _assertClass(script, Script);\n        var ret = wasm.scriptref_new(script.ptr);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n     * @returns {Script}\n     */\n    get() {\n        var ret = wasm.scriptref_get(this.ptr);\n        return Script.__wrap(ret);\n    }\n}\n/** */\nexport class ScriptWitness {\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptWitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_scriptwitness_free(ptr);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.scriptwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.scriptwitness_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {ScriptWitness}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.scriptwitness_from_json(ptr0, len0);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @param {NativeScript} native_script\n     * @returns {ScriptWitness}\n     */\n    static new_native_witness(native_script) {\n        _assertClass(native_script, NativeScript);\n        var ret = wasm.scriptwitness_new_native_witness(native_script.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @param {PlutusWitness} plutus_witness\n     * @returns {ScriptWitness}\n     */\n    static new_plutus_witness(plutus_witness) {\n        _assertClass(plutus_witness, PlutusWitness);\n        var ret = wasm.scriptwitness_new_plutus_witness(plutus_witness.ptr);\n        return ScriptWitness.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.scriptwitness_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {NativeScript | undefined}\n     */\n    as_native_witness() {\n        var ret = wasm.scriptwitness_as_native_witness(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusWitness | undefined}\n     */\n    as_plutus_witness() {\n        var ret = wasm.scriptwitness_as_plutus_witness(this.ptr);\n        return ret === 0 ? undefined : PlutusWitness.__wrap(ret);\n    }\n}\n/** */\nexport class SingleHostAddr {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostAddr}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostaddr_from_bytes(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostaddr_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.singlehostaddr_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostAddr}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostaddr_from_json(ptr0, len0);\n        return SingleHostAddr.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        var ret = wasm.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {Ipv4 | undefined}\n     */\n    ipv4() {\n        var ret = wasm.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n     * @returns {Ipv6 | undefined}\n     */\n    ipv6() {\n        var ret = wasm.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {Ipv4 | undefined} ipv4\n     * @param {Ipv6 | undefined} ipv6\n     * @returns {SingleHostAddr}\n     */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.ptr;\n            ipv4.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.ptr;\n            ipv6.ptr = 0;\n        }\n        var ret = wasm.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\n/** */\nexport class SingleHostName {\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_singlehostname_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {SingleHostName}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostname_from_bytes(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.singlehostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.singlehostname_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {SingleHostName}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.singlehostname_from_json(ptr0, len0);\n        return SingleHostName.__wrap(ret);\n    }\n    /**\n     * @returns {number | undefined}\n     */\n    port() {\n        var ret = wasm.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * @returns {DNSRecordAorAAAA}\n     */\n    dns_name() {\n        var ret = wasm.multihostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n     * @param {number | undefined} port\n     * @param {DNSRecordAorAAAA} dns_name\n     * @returns {SingleHostName}\n     */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        var ret = wasm.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\n/** */\nexport class StakeCredential {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredential_free(ptr);\n    }\n    /**\n     * @param {Ed25519KeyHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        var ret = wasm.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {ScriptHash} hash\n     * @returns {StakeCredential}\n     */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        var ret = wasm.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash | undefined}\n     */\n    to_keyhash() {\n        var ret = wasm.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptHash | undefined}\n     */\n    to_scripthash() {\n        var ret = wasm.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.stakecredential_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredential}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredential_from_bytes(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredential_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakecredential_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredential}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredential_from_json(ptr0, len0);\n        return StakeCredential.__wrap(ret);\n    }\n}\n/** */\nexport class StakeCredentials {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeCredentials}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredentials_from_bytes(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakecredentials_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeCredentials}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakecredentials_from_json(ptr0, len0);\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredentials}\n     */\n    static new() {\n        var ret = wasm.ed25519keyhashes_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {StakeCredential}\n     */\n    get(index) {\n        var ret = wasm.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} elem\n     */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        wasm.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class StakeDelegation {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDelegation}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakedelegation_from_bytes(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakedelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakedelegation_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDelegation}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakedelegation_from_json(ptr0, len0);\n        return StakeDelegation.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519KeyHash}\n     */\n    pool_keyhash() {\n        var ret = wasm.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @param {Ed25519KeyHash} pool_keyhash\n     * @returns {StakeDelegation}\n     */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        var ret = wasm.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\n/** */\nexport class StakeDeregistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeDeregistration}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakederegistration_from_bytes(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakederegistration_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeDeregistration}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakederegistration_from_json(ptr0, len0);\n        return StakeDeregistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeDeregistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\n/** */\nexport class StakeRegistration {\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {StakeRegistration}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakeregistration_from_bytes(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.stakeregistration_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {StakeRegistration}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.stakeregistration_from_json(ptr0, len0);\n        return StakeRegistration.__wrap(ret);\n    }\n    /**\n     * @returns {StakeCredential}\n     */\n    stake_credential() {\n        var ret = wasm.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n     * @param {StakeCredential} stake_credential\n     * @returns {StakeRegistration}\n     */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        var ret = wasm.stakederegistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\n/** */\nexport class Strings {\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_strings_free(ptr);\n    }\n    /**\n     * @returns {Strings}\n     */\n    static new() {\n        var ret = wasm.plutusscripts_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {string}\n     */\n    get(index) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} elem\n     */\n    add(elem) {\n        var ptr0 = passStringToWasm0(elem, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.strings_add(this.ptr, ptr0, len0);\n    }\n}\n/** */\nexport class TimelockExpiry {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockExpiry}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockexpiry_from_bytes(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.timelockexpiry_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockExpiry}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockexpiry_from_json(ptr0, len0);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockExpiry}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        var ret = wasm.timelockexpiry_new(slot.ptr);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\n/** */\nexport class TimelockStart {\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_timelockstart_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TimelockStart}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockstart_from_bytes(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.timelockstart_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TimelockStart}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.timelockstart_from_json(ptr0, len0);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    slot() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} slot\n     * @returns {TimelockStart}\n     */\n    static new(slot) {\n        _assertClass(slot, BigNum);\n        var ret = wasm.timelockexpiry_new(slot.ptr);\n        return TimelockStart.__wrap(ret);\n    }\n}\n/** */\nexport class Transaction {\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transaction_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Transaction}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transaction_from_bytes(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transaction_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transaction_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Transaction}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transaction_from_json(ptr0, len0);\n        return Transaction.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBody}\n     */\n    body() {\n        var ret = wasm.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    witness_set() {\n        var ret = wasm.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_valid() {\n        var ret = wasm.transaction_is_valid(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        var ret = wasm.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * @param {boolean} valid\n     */\n    set_is_valid(valid) {\n        wasm.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n     * @param {TransactionBody} body\n     * @param {TransactionWitnessSet} witness_set\n     * @param {AuxiliaryData | undefined} auxiliary_data\n     * @returns {Transaction}\n     */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.ptr;\n            auxiliary_data.ptr = 0;\n        }\n        var ret = wasm.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionBodies {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBodies}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbodies_from_bytes(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbodies_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionbodies_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBodies}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbodies_from_json(ptr0, len0);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBodies}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionBody}\n     */\n    get(index) {\n        var ret = wasm.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @param {TransactionBody} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        wasm.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionBody {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbody_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionBody}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbody_from_bytes(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionbody_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionBody}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionbody_from_json(ptr0, len0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    inputs() {\n        var ret = wasm.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        var ret = wasm.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    fee() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    ttl() {\n        var ret = wasm.transactionbody_ttl(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Certificates} certs\n     */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        wasm.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certs() {\n        var ret = wasm.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @param {Withdrawals} withdrawals\n     */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        wasm.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        var ret = wasm.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * @param {Update} update\n     */\n    set_update(update) {\n        _assertClass(update, Update);\n        wasm.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n     * @returns {Update | undefined}\n     */\n    update() {\n        var ret = wasm.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n     * @param {AuxiliaryDataHash} auxiliary_data_hash\n     */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        wasm.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n     * @returns {AuxiliaryDataHash | undefined}\n     */\n    auxiliary_data_hash() {\n        var ret = wasm.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    validity_start_interval() {\n        var ret = wasm.transactionbody_validity_start_interval(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {Mint} mint\n     */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        wasm.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        var ret = wasm.transactionbody_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @param {ScriptDataHash} script_data_hash\n     */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        wasm.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        var ret = wasm.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} collateral\n     */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        wasm.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    collateral() {\n        var ret = wasm.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHashes} required_signers\n     */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        wasm.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        var ret = wasm.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        wasm.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        var ret = wasm.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} collateral_return\n     */\n    set_collateral_return(collateral_return) {\n        _assertClass(collateral_return, TransactionOutput);\n        wasm.transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n     * @returns {TransactionOutput | undefined}\n     */\n    collateral_return() {\n        var ret = wasm.transactionbody_collateral_return(this.ptr);\n        return ret === 0 ? undefined : TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} total_collateral\n     */\n    set_total_collateral(total_collateral) {\n        _assertClass(total_collateral, BigNum);\n        wasm.transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    total_collateral() {\n        var ret = wasm.transactionbody_total_collateral(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} reference_inputs\n     */\n    set_reference_inputs(reference_inputs) {\n        _assertClass(reference_inputs, TransactionInputs);\n        wasm.transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    reference_inputs() {\n        var ret = wasm.transactionbody_reference_inputs(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInputs} inputs\n     * @param {TransactionOutputs} outputs\n     * @param {BigNum} fee\n     * @param {BigNum | undefined} ttl\n     * @returns {TransactionBody}\n     */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(ttl)) {\n            _assertClass(ttl, BigNum);\n            ptr0 = ttl.ptr;\n            ttl.ptr = 0;\n        }\n        var ret = wasm.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, ptr0);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array | undefined}\n     */\n    raw() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbody_raw(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class TransactionBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n     * This automatically selects and adds inputs from {inputs} consisting of just enough to cover\n     * the outputs that have already been added.\n     * This should be called after adding all certs/outputs/etc and will be an error otherwise.\n     * Adding a change output must be called after via TransactionBuilder::balance()\n     * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.\n     *\n     * change_address is required here in order to determine the min ada requirement precisely\n     * @param {TransactionUnspentOutputs} inputs\n     * @param {Address} change_address\n     */\n    add_inputs_from(inputs, change_address) {\n        _assertClass(inputs, TransactionUnspentOutputs);\n        _assertClass(change_address, Address);\n        wasm.transactionbuilder_add_inputs_from(this.ptr, inputs.ptr, change_address.ptr);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_input(utxo, script_witness) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_input(this.ptr, utxo.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_reference_input(utxo) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        wasm.transactionbuilder_add_reference_input(this.ptr, utxo.ptr);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {Address} address\n     * @param {TransactionInput} input\n     * @param {Value} amount\n     * @returns {BigNum}\n     */\n    fee_for_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionbuilder_fee_for_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * Add explicit output via a TransactionOutput object\n     * @param {TransactionOutput} output\n     */\n    add_output(output) {\n        _assertClass(output, TransactionOutput);\n        wasm.transactionbuilder_add_output(this.ptr, output.ptr);\n    }\n    /**\n     * Add plutus scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus v2 scripts via a PlutusScripts object\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * Add plutus data via a PlutusData object\n     * @param {PlutusData} plutus_data\n     */\n    add_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusData);\n        wasm.transactionbuilder_add_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * Add native scripts via a NativeScripts object\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * Add certificate via a Certificates object\n     * @param {Certificate} certificate\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_certificate(certificate, script_witness) {\n        _assertClass(certificate, Certificate);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_certificate(this.ptr, certificate.ptr, ptr0);\n    }\n    /**\n     * calculates how much the fee would increase if you added a given output\n     * @param {TransactionOutput} output\n     * @returns {BigNum}\n     */\n    fee_for_output(output) {\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionbuilder_fee_for_output(this.ptr, output.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} ttl\n     */\n    set_ttl(ttl) {\n        _assertClass(ttl, BigNum);\n        wasm.transactionbuilder_set_ttl(this.ptr, ttl.ptr);\n    }\n    /**\n     * @param {BigNum} validity_start_interval\n     */\n    set_validity_start_interval(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        wasm.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval.ptr);\n    }\n    /**\n     * @param {RewardAddress} reward_address\n     * @param {BigNum} coin\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_withdrawal(reward_address, coin, script_witness) {\n        _assertClass(reward_address, RewardAddress);\n        _assertClass(coin, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_withdrawal(this.ptr, reward_address.ptr, coin.ptr, ptr0);\n    }\n    /**\n     * @returns {AuxiliaryData | undefined}\n     */\n    auxiliary_data() {\n        var ret = wasm.transactionbuilder_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n     * Set explicit auxiliary data via an AuxiliaryData object\n     * It might contain some metadata plus native or Plutus scripts\n     * @param {AuxiliaryData} auxiliary_data\n     */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        wasm.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n     * Set metadata using a GeneralTransactionMetadata object\n     * It will be set to the existing or new auxiliary data in this builder\n     * @param {GeneralTransactionMetadata} metadata\n     */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        wasm.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n     * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {TransactionMetadatum} val\n     */\n    add_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        _assertClass(val, TransactionMetadatum);\n        wasm.transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel and a String\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     */\n    add_json_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.transactionbuilder_add_json_metadatum(this.ptr, key.ptr, ptr0, len0);\n    }\n    /**\n     * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object\n     * It will be securely added to existing or new metadata in this builder\n     * @param {BigNum} key\n     * @param {string} val\n     * @param {number} schema\n     */\n    add_json_metadatum_with_schema(key, val, schema) {\n        _assertClass(key, BigNum);\n        var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.transactionbuilder_add_json_metadatum_with_schema(this.ptr, key.ptr, ptr0, len0, schema);\n    }\n    /**\n     * Returns a copy of the current mint state in the builder\n     * @returns {Mint | undefined}\n     */\n    mint() {\n        var ret = wasm.transactionbuilder_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n     * @returns {Certificates | undefined}\n     */\n    certificates() {\n        var ret = wasm.transactionbuilder_certificates(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n     * @returns {Withdrawals | undefined}\n     */\n    withdrawals() {\n        var ret = wasm.transactionbuilder_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n     * Returns a copy of the current witness native scripts in the builder\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        var ret = wasm.transactionbuilder_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * Add a mint entry to this builder using a PolicyID and MintAssets object\n     * It will be securely added to existing or new Mint in this builder\n     * It will securely add assets to an existing PolicyID\n     * But it will replace/overwrite any existing mint assets with the same PolicyID\n     * first redeemer applied to a PolicyID is taken for all further assets added to the same PolicyID\n     * @param {ScriptHash} policy_id\n     * @param {MintAssets} mint_assets\n     * @param {ScriptWitness | undefined} script_witness\n     */\n    add_mint(policy_id, mint_assets, script_witness) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(mint_assets, MintAssets);\n        let ptr0 = 0;\n        if (!isLikeNone(script_witness)) {\n            _assertClass(script_witness, ScriptWitness);\n            ptr0 = script_witness.ptr;\n            script_witness.ptr = 0;\n        }\n        wasm.transactionbuilder_add_mint(this.ptr, policy_id.ptr, mint_assets.ptr, ptr0);\n    }\n    /**\n     * @param {TransactionBuilderConfig} cfg\n     * @returns {TransactionBuilder}\n     */\n    static new(cfg) {\n        _assertClass(cfg, TransactionBuilderConfig);\n        var ret = wasm.transactionbuilder_new(cfg.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptDataHash | undefined}\n     */\n    script_data_hash() {\n        var ret = wasm.transactionbuilder_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} utxo\n     */\n    add_collateral(utxo) {\n        _assertClass(utxo, TransactionUnspentOutput);\n        wasm.transactionbuilder_add_collateral(this.ptr, utxo.ptr);\n    }\n    /**\n     * @returns {TransactionInputs | undefined}\n     */\n    get_collateral() {\n        var ret = wasm.transactionbuilder_get_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @param {Ed25519KeyHash} required_signer\n     */\n    add_required_signer(required_signer) {\n        _assertClass(required_signer, Ed25519KeyHash);\n        wasm.transactionbuilder_add_required_signer(this.ptr, required_signer.ptr);\n    }\n    /**\n     * @returns {Ed25519KeyHashes | undefined}\n     */\n    required_signers() {\n        var ret = wasm.transactionbuilder_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n     * @param {NetworkId} network_id\n     */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        var ptr0 = network_id.ptr;\n        network_id.ptr = 0;\n        wasm.transactionbuilder_set_network_id(this.ptr, ptr0);\n    }\n    /**\n     * @returns {NetworkId | undefined}\n     */\n    network_id() {\n        var ret = wasm.transactionbuilder_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        var ret = wasm.transactionbuilder_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * does not include refunds or withdrawals\n     * @returns {Value}\n     */\n    get_explicit_input() {\n        var ret = wasm.transactionbuilder_get_explicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * withdrawals and refunds\n     * @returns {Value}\n     */\n    get_implicit_input() {\n        var ret = wasm.transactionbuilder_get_implicit_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * Return explicit input plus implicit input plus mint\n     * @returns {Value}\n     */\n    get_total_input() {\n        var ret = wasm.transactionbuilder_get_total_input(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * Return explicit output plus implicit output plus burn (does not consider fee directly)\n     * @returns {Value}\n     */\n    get_total_output() {\n        var ret = wasm.transactionbuilder_get_total_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * does not include fee\n     * @returns {Value}\n     */\n    get_explicit_output() {\n        var ret = wasm.transactionbuilder_get_explicit_output(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    get_deposit() {\n        var ret = wasm.transactionbuilder_get_deposit(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum | undefined}\n     */\n    get_fee_if_set() {\n        var ret = wasm.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * Warning: this function will mutate the /fee/ field\n     * Make sure to call this function last after setting all other tx-body properties\n     * Editing inputs, outputs, mint, etc. after change been calculated\n     * might cause a mismatch in calculated fee versus the required fee\n     * @param {Address} change_address\n     * @param {Datum | undefined} datum\n     */\n    balance(change_address, datum) {\n        _assertClass(change_address, Address);\n        let ptr0 = 0;\n        if (!isLikeNone(datum)) {\n            _assertClass(datum, Datum);\n            ptr0 = datum.ptr;\n            datum.ptr = 0;\n        }\n        wasm.transactionbuilder_balance(this.ptr, change_address.ptr, ptr0);\n    }\n    /**\n     * Returns the TransactionBody.\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {number}\n     */\n    full_size() {\n        var ret = wasm.transactionbuilder_full_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {Uint32Array}\n     */\n    output_sizes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    outputs() {\n        var ret = wasm.transactionbuilder_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     *\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     *\n     * takes fetched ex units into consideration\n     *\n     * add collateral utxos and collateral change receiver in case you redeem from plutus script utxos\n     *\n     * async call\n     *\n     * NOTE: is_valid set to true\n     * @param {TransactionUnspentOutputs | undefined} collateral_utxos\n     * @param {Address | undefined} collateral_change_address\n     * @param {boolean | undefined} native_uplc\n     * @returns {Promise<Transaction>}\n     */\n    construct(collateral_utxos, collateral_change_address, native_uplc) {\n        const ptr = this.__destroy_into_raw();\n        let ptr0 = 0;\n        if (!isLikeNone(collateral_utxos)) {\n            _assertClass(collateral_utxos, TransactionUnspentOutputs);\n            ptr0 = collateral_utxos.ptr;\n            collateral_utxos.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(collateral_change_address)) {\n            _assertClass(collateral_change_address, Address);\n            ptr1 = collateral_change_address.ptr;\n            collateral_change_address.ptr = 0;\n        }\n        var ret = wasm.transactionbuilder_construct(ptr, ptr0, ptr1, isLikeNone(native_uplc) ? 0xFFFFFF : native_uplc ? 1 : 0);\n        return takeObject(ret);\n    }\n    /**\n     * Returns full Transaction object with the body and the auxiliary data\n     * NOTE: witness_set will contain all mint_scripts if any been added or set\n     * NOTE: is_valid set to true\n     * @returns {Transaction}\n     */\n    build_tx() {\n        var ret = wasm.transactionbuilder_build_tx(this.ptr);\n        return Transaction.__wrap(ret);\n    }\n    /**\n     * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n     * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n     * this is done to simplify the library code, but can be fixed later\n     * @returns {BigNum}\n     */\n    min_fee() {\n        var ret = wasm.transactionbuilder_min_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionBuilderConfig {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfig.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfig_free(ptr);\n    }\n}\n/** */\nexport class TransactionBuilderConfigBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfigBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionbuilderconfigbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    static new() {\n        var ret = wasm.transactionbuilderconfigbuilder_new();\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {LinearFee} fee_algo\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    fee_algo(fee_algo) {\n        _assertClass(fee_algo, LinearFee);\n        var ret = wasm.transactionbuilderconfigbuilder_fee_algo(this.ptr, fee_algo.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coins_per_utxo_byte\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    coins_per_utxo_byte(coins_per_utxo_byte) {\n        _assertClass(coins_per_utxo_byte, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr, coins_per_utxo_byte.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} pool_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_pool_deposit(this.ptr, pool_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} key_deposit\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_key_deposit(this.ptr, key_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_value_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_value_size(max_value_size) {\n        var ret = wasm.transactionbuilderconfigbuilder_max_value_size(this.ptr, max_value_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_tx_size\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_size(max_tx_size) {\n        var ret = wasm.transactionbuilderconfigbuilder_max_tx_size(this.ptr, max_tx_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnitPrices} ex_unit_prices\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    ex_unit_prices(ex_unit_prices) {\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        var ret = wasm.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, ex_unit_prices.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {ExUnits} max_tx_ex_units\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        var ret = wasm.transactionbuilderconfigbuilder_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Costmdls} costmdls\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    costmdls(costmdls) {\n        _assertClass(costmdls, Costmdls);\n        var ret = wasm.transactionbuilderconfigbuilder_costmdls(this.ptr, costmdls.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} collateral_percentage\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    collateral_percentage(collateral_percentage) {\n        var ret = wasm.transactionbuilderconfigbuilder_collateral_percentage(this.ptr, collateral_percentage);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {number} max_collateral_inputs\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    max_collateral_inputs(max_collateral_inputs) {\n        var ret = wasm.transactionbuilderconfigbuilder_max_collateral_inputs(this.ptr, max_collateral_inputs);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} zero_time\n     * @param {BigNum} zero_slot\n     * @param {number} slot_length\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    slot_config(zero_time, zero_slot, slot_length) {\n        _assertClass(zero_time, BigNum);\n        _assertClass(zero_slot, BigNum);\n        var ret = wasm.transactionbuilderconfigbuilder_slot_config(this.ptr, zero_time.ptr, zero_slot.ptr, slot_length);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Blockfrost} blockfrost\n     * @returns {TransactionBuilderConfigBuilder}\n     */\n    blockfrost(blockfrost) {\n        _assertClass(blockfrost, Blockfrost);\n        var ret = wasm.transactionbuilderconfigbuilder_blockfrost(this.ptr, blockfrost.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionBuilderConfig}\n     */\n    build() {\n        var ret = wasm.transactionbuilderconfigbuilder_build(this.ptr);\n        return TransactionBuilderConfig.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionHash {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bytes(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {TransactionHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_bech32(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {TransactionHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionhash_from_hex(ptr0, len0);\n        return TransactionHash.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionIndexes {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionIndexes.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionindexes_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionindexes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionIndexes}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionindexes_from_bytes(ptr0, len0);\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionIndexes}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return TransactionIndexes.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        var ret = wasm.transactionindexes_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionindexes_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionInput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInput}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninput_from_bytes(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactioninput_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInput}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninput_from_json(ptr0, len0);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionHash}\n     */\n    transaction_id() {\n        var ret = wasm.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    index() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {TransactionHash} transaction_id\n     * @param {BigNum} index\n     * @returns {TransactionInput}\n     */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        _assertClass(index, BigNum);\n        var ret = wasm.transactioninput_new(transaction_id.ptr, index.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionInputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionInputs}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninputs_from_bytes(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactioninputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactioninputs_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionInputs}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactioninputs_from_json(ptr0, len0);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInputs}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionInput}\n     */\n    get(index) {\n        var ret = wasm.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        wasm.transactioninputs_add(this.ptr, elem.ptr);\n    }\n    /** */\n    sort() {\n        wasm.transactioninputs_sort(this.ptr);\n    }\n}\n/** */\nexport class TransactionMetadatum {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_from_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {MetadataMap} map\n     * @returns {TransactionMetadatum}\n     */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        var ret = wasm.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {MetadataList} list\n     * @returns {TransactionMetadatum}\n     */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        var ret = wasm.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Int} int\n     * @returns {TransactionMetadatum}\n     */\n    static new_int(int) {\n        _assertClass(int, Int);\n        var ret = wasm.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatum}\n     */\n    static new_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_bytes(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @param {string} text\n     * @returns {TransactionMetadatum}\n     */\n    static new_text(text) {\n        var ptr0 = passStringToWasm0(text, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatum_new_text(ptr0, len0);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    kind() {\n        var ret = wasm.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @returns {MetadataMap}\n     */\n    as_map() {\n        var ret = wasm.transactionmetadatum_as_map(this.ptr);\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n     * @returns {MetadataList}\n     */\n    as_list() {\n        var ret = wasm.transactionmetadatum_as_list(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n    /**\n     * @returns {Int}\n     */\n    as_int() {\n        var ret = wasm.transactionmetadatum_as_int(this.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {string}\n     */\n    as_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class TransactionMetadatumLabels {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionMetadatumLabels}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionmetadatumlabels_from_bytes(ptr0, len0);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionMetadatumLabels}\n     */\n    static new() {\n        var ret = wasm.metadatalist_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {BigNum}\n     */\n    get(index) {\n        var ret = wasm.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} elem\n     */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        wasm.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutput}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutput_from_bytes(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionoutput_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutput}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutput_from_json(ptr0, len0);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {Address}\n     */\n    address() {\n        var ret = wasm.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    amount() {\n        var ret = wasm.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Datum | undefined}\n     */\n    datum() {\n        var ret = wasm.transactionoutput_datum(this.ptr);\n        return ret === 0 ? undefined : Datum.__wrap(ret);\n    }\n    /**\n     * @returns {ScriptRef | undefined}\n     */\n    script_ref() {\n        var ret = wasm.transactionoutput_script_ref(this.ptr);\n        return ret === 0 ? undefined : ScriptRef.__wrap(ret);\n    }\n    /**\n     * @param {Datum} datum\n     */\n    set_datum(datum) {\n        _assertClass(datum, Datum);\n        wasm.transactionoutput_set_datum(this.ptr, datum.ptr);\n    }\n    /**\n     * @param {ScriptRef} script_ref\n     */\n    set_script_ref(script_ref) {\n        _assertClass(script_ref, ScriptRef);\n        wasm.transactionoutput_set_script_ref(this.ptr, script_ref.ptr);\n    }\n    /**\n     * @param {Address} address\n     * @param {Value} amount\n     * @returns {TransactionOutput}\n     */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        var ret = wasm.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * legacy support: serialize output as array array\n     *\n     * does not support inline datum and script_ref!\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class TransactionOutputAmountBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputAmountBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputamountbuilder_free(ptr);\n    }\n    /**\n     * @param {Value} amount\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_value(amount) {\n        _assertClass(amount, Value);\n        var ret = wasm.transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin(coin) {\n        _assertClass(coin, BigNum);\n        var ret = wasm.transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @param {MultiAsset} multiasset\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_coin_and_asset(coin, multiasset) {\n        _assertClass(coin, BigNum);\n        _assertClass(multiasset, MultiAsset);\n        var ret = wasm.transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @param {BigNum} coins_per_utxo_word\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {\n        _assertClass(multiasset, MultiAsset);\n        _assertClass(coins_per_utxo_word, BigNum);\n        var ret = wasm\n            .transactionoutputamountbuilder_with_asset_and_min_required_coin(this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    build() {\n        var ret = wasm.transactionoutputamountbuilder_build(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n * We introduce a builder-pattern format for creating transaction outputs\n * This is because:\n * 1. Some fields (i.e. data hash) are optional, and we can't easily expose Option<> in WASM\n * 2. Some fields like amounts have many ways it could be set (some depending on other field values being known)\n * 3. Easier to adapt as the output format gets more complicated in future Cardano releases\n */\nexport class TransactionOutputBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputbuilder_free(ptr);\n    }\n    /**\n     * @returns {TransactionOutputBuilder}\n     */\n    static new() {\n        var ret = wasm.transactionoutputbuilder_new();\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Address} address\n     * @returns {TransactionOutputBuilder}\n     */\n    with_address(address) {\n        _assertClass(address, Address);\n        var ret = wasm.transactionoutputbuilder_with_address(this.ptr, address.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @param {Datum} data_hash\n     * @returns {TransactionOutputBuilder}\n     */\n    with_datum(data_hash) {\n        _assertClass(data_hash, Datum);\n        var ret = wasm.transactionoutputbuilder_with_datum(this.ptr, data_hash.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputAmountBuilder}\n     */\n    next() {\n        var ret = wasm.transactionoutputbuilder_next(this.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionOutputs}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutputs_from_bytes(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionoutputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionoutputs_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionOutputs}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionoutputs_from_json(ptr0, len0);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutputs}\n     */\n    static new() {\n        var ret = wasm.certificates_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionOutput}\n     */\n    get(index) {\n        var ret = wasm.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        wasm.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionUnspentOutput {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionUnspentOutput}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionunspentoutput_from_bytes(ptr0, len0);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionInput} input\n     * @param {TransactionOutput} output\n     * @returns {TransactionUnspentOutput}\n     */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        var ret = wasm.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionInput}\n     */\n    input() {\n        var ret = wasm.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionOutput}\n     */\n    output() {\n        var ret = wasm.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_legacy_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionunspentoutput_to_legacy_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class TransactionUnspentOutputs {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutputs.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionunspentoutputs_free(ptr);\n    }\n    /**\n     * @returns {TransactionUnspentOutputs}\n     */\n    static new() {\n        var ret = wasm.transactionunspentoutputs_new();\n        return TransactionUnspentOutputs.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.transactionunspentoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionUnspentOutput}\n     */\n    get(index) {\n        var ret = wasm.transactionunspentoutputs_get(this.ptr, index);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n     * @param {TransactionUnspentOutput} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionUnspentOutput);\n        wasm.transactionunspentoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class TransactionWitnessSet {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSet}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnessset_from_bytes(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnessset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionwitnessset_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSet}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnessset_from_json(ptr0, len0);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @param {Vkeywitnesses} vkeys\n     */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        wasm.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses | undefined}\n     */\n    vkeys() {\n        var ret = wasm.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @param {NativeScripts} native_scripts\n     */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        wasm.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n     * @returns {NativeScripts | undefined}\n     */\n    native_scripts() {\n        var ret = wasm.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n     * @param {BootstrapWitnesses} bootstraps\n     */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        wasm.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n     * @returns {BootstrapWitnesses | undefined}\n     */\n    bootstraps() {\n        var ret = wasm.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_scripts() {\n        var ret = wasm.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @param {PlutusList} plutus_data\n     */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        wasm.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n     * @returns {PlutusList | undefined}\n     */\n    plutus_data() {\n        var ret = wasm.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n     * @param {Redeemers} redeemers\n     */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        wasm.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n     * @param {PlutusScripts} plutus_scripts\n     */\n    set_plutus_v2_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        wasm.transactionwitnessset_set_plutus_v2_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n     * @returns {Redeemers | undefined}\n     */\n    redeemers() {\n        var ret = wasm.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n     * @returns {PlutusScripts | undefined}\n     */\n    plutus_v2_scripts() {\n        var ret = wasm.transactionwitnessset_plutus_v2_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    static new() {\n        var ret = wasm.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/**\n * Builder de-duplicates witnesses as they are added\n */\nexport class TransactionWitnessSetBuilder {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSetBuilder.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssetbuilder_free(ptr);\n    }\n    /**\n     * @param {Vkeywitness} vkey\n     */\n    add_vkey(vkey) {\n        _assertClass(vkey, Vkeywitness);\n        wasm.transactionwitnesssetbuilder_add_vkey(this.ptr, vkey.ptr);\n    }\n    /**\n     * @param {BootstrapWitness} bootstrap\n     */\n    add_bootstrap(bootstrap) {\n        _assertClass(bootstrap, BootstrapWitness);\n        wasm.transactionwitnesssetbuilder_add_bootstrap(this.ptr, bootstrap.ptr);\n    }\n    /**\n     * @param {NativeScript} native_script\n     */\n    add_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        wasm.transactionwitnesssetbuilder_add_native_script(this.ptr, native_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusScript} plutus_script\n     */\n    add_plutus_v2_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        wasm.transactionwitnesssetbuilder_add_plutus_v2_script(this.ptr, plutus_script.ptr);\n    }\n    /**\n     * @param {PlutusData} plutus_datum\n     */\n    add_plutus_datum(plutus_datum) {\n        _assertClass(plutus_datum, PlutusData);\n        wasm.transactionwitnesssetbuilder_add_plutus_datum(this.ptr, plutus_datum.ptr);\n    }\n    /**\n     * @param {Redeemer} redeemer\n     */\n    add_redeemer(redeemer) {\n        _assertClass(redeemer, Redeemer);\n        wasm.transactionwitnesssetbuilder_add_redeemer(this.ptr, redeemer.ptr);\n    }\n    /**\n     * @param {RequiredWitnessSet} required_wits\n     */\n    add_required_wits(required_wits) {\n        _assertClass(required_wits, RequiredWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_required_wits(this.ptr, required_wits.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSetBuilder}\n     */\n    static new() {\n        var ret = wasm.transactionwitnesssetbuilder_new();\n        return TransactionWitnessSetBuilder.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} wit_set\n     */\n    add_existing(wit_set) {\n        _assertClass(wit_set, TransactionWitnessSet);\n        wasm.transactionwitnesssetbuilder_add_existing(this.ptr, wit_set.ptr);\n    }\n    /**\n     * @returns {TransactionWitnessSet}\n     */\n    build() {\n        var ret = wasm.transactionwitnesssetbuilder_build(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/** */\nexport class TransactionWitnessSets {\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {TransactionWitnessSets}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnesssets_from_bytes(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.transactionwitnesssets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.transactionwitnesssets_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {TransactionWitnessSets}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.transactionwitnesssets_from_json(ptr0, len0);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {TransactionWitnessSets}\n     */\n    static new() {\n        var ret = wasm.assetnames_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {TransactionWitnessSet}\n     */\n    get(index) {\n        var ret = wasm.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n     * @param {TransactionWitnessSet} elem\n     */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        wasm.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class URL {\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_url_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {URL}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_from_bytes(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @param {string} url\n     * @returns {URL}\n     */\n    static new(url) {\n        var ptr0 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.url_new(ptr0, len0);\n        return URL.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    url() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/** */\nexport class UnitInterval {\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unitinterval_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {UnitInterval}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.unitinterval_from_bytes(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unitinterval_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.unitinterval_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {UnitInterval}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.unitinterval_from_json(ptr0, len0);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    numerator() {\n        var ret = wasm.headerbody_slot(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {BigNum}\n     */\n    denominator() {\n        var ret = wasm.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} numerator\n     * @param {BigNum} denominator\n     * @returns {UnitInterval}\n     */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        var ret = wasm.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n     * @param {number} float_number\n     * @returns {UnitInterval}\n     */\n    static from_float(float_number) {\n        var ret = wasm.unitinterval_from_float(float_number);\n        return UnitInterval.__wrap(ret);\n    }\n}\n/** */\nexport class Update {\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_update_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Update}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.update_from_bytes(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.update_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.update_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Update}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.update_from_json(ptr0, len0);\n        return Update.__wrap(ret);\n    }\n    /**\n     * @returns {ProposedProtocolParameterUpdates}\n     */\n    proposed_protocol_parameter_updates() {\n        var ret = wasm.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    epoch() {\n        var ret = wasm.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n     * @param {number} epoch\n     * @returns {Update}\n     */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        var ret = wasm.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\n/** */\nexport class VRFCert {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfcert_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFCert}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_from_bytes(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.vrfcert_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {VRFCert}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_from_json(ptr0, len0);\n        return VRFCert.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    output() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    proof() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} output\n     * @param {Uint8Array} proof\n     * @returns {VRFCert}\n     */\n    static new(output, proof) {\n        var ptr0 = passArray8ToWasm0(output, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(proof, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfcert_new(ptr0, len0, ptr1, len1);\n        return VRFCert.__wrap(ret);\n    }\n}\n/** */\nexport class VRFKeyHash {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFKeyHash}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bytes(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {string} prefix\n     * @returns {string}\n     */\n    to_bech32(prefix) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = passStringToWasm0(prefix, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} bech_str\n     * @returns {VRFKeyHash}\n     */\n    static from_bech32(bech_str) {\n        var ptr0 = passStringToWasm0(bech_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_bech32(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_hex() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @param {string} hex\n     * @returns {VRFKeyHash}\n     */\n    static from_hex(hex) {\n        var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfkeyhash_from_hex(ptr0, len0);\n        return VRFKeyHash.__wrap(ret);\n    }\n}\n/** */\nexport class VRFVKey {\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {VRFVKey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vrfvkey_from_bytes(ptr0, len0);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n     * @returns {VRFKeyHash}\n     */\n    hash() {\n        var ret = wasm.vrfvkey_hash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_raw_key() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/** */\nexport class Value {\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_value_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Value}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.value_from_bytes(ptr0, len0);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.value_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.value_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Value}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.value_from_json(ptr0, len0);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     * @returns {Value}\n     */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        var ret = wasm.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     * @returns {Value}\n     */\n    static new_from_assets(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        var ret = wasm.value_new_from_assets(multiasset.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {Value}\n     */\n    static zero() {\n        var ret = wasm.value_zero();\n        return Value.__wrap(ret);\n    }\n    /**\n     * @returns {boolean}\n     */\n    is_zero() {\n        var ret = wasm.value_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n     * @returns {BigNum}\n     */\n    coin() {\n        var ret = wasm.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n     * @param {BigNum} coin\n     */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        wasm.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n     * @returns {MultiAsset | undefined}\n     */\n    multiasset() {\n        var ret = wasm.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n     * @param {MultiAsset} multiasset\n     */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        wasm.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n     * @param {Value} rhs\n     * @returns {Value}\n     */\n    checked_add(rhs) {\n        _assertClass(rhs, Value);\n        var ret = wasm.value_checked_add(this.ptr, rhs.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    checked_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_checked_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * @param {Value} rhs_value\n     * @returns {Value}\n     */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n     * note: values are only partially comparable\n     * @param {Value} rhs_value\n     * @returns {number | undefined}\n     */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        var ret = wasm.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/** */\nexport class Vkey {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkey_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkey}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkey_from_bytes(ptr0, len0);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @param {PublicKey} pk\n     * @returns {Vkey}\n     */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        var ret = wasm.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {PublicKey}\n     */\n    public_key() {\n        var ret = wasm.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\n/** */\nexport class Vkeys {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeys_free(ptr);\n    }\n    /**\n     * @returns {Vkeys}\n     */\n    static new() {\n        var ret = wasm.publickeys_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkey}\n     */\n    get(index) {\n        var ret = wasm.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @param {Vkey} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        wasm.vkeys_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Vkeywitness {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Vkeywitness}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkeywitness_from_bytes(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vkeywitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.vkeywitness_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Vkeywitness}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.vkeywitness_from_json(ptr0, len0);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @param {Vkey} vkey\n     * @param {Ed25519Signature} signature\n     * @returns {Vkeywitness}\n     */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        var ret = wasm.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @returns {Vkey}\n     */\n    vkey() {\n        var ret = wasm.vkey_new(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n     * @returns {Ed25519Signature}\n     */\n    signature() {\n        var ret = wasm.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/** */\nexport class Vkeywitnesses {\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n     * @returns {Vkeywitnesses}\n     */\n    static new() {\n        var ret = wasm.publickeys_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {number} index\n     * @returns {Vkeywitness}\n     */\n    get(index) {\n        var ret = wasm.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n     * @param {Vkeywitness} elem\n     */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        wasm.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/** */\nexport class Withdrawals {\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_withdrawals_free(ptr);\n    }\n    /**\n     * @returns {Uint8Array}\n     */\n    to_bytes() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {Withdrawals}\n     */\n    static from_bytes(bytes) {\n        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.withdrawals_from_bytes(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {string}\n     */\n    to_json() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.withdrawals_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        }\n        finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n     * @returns {any}\n     */\n    to_js_value() {\n        var ret = wasm.withdrawals_to_js_value(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n     * @param {string} json\n     * @returns {Withdrawals}\n     */\n    static from_json(json) {\n        var ptr0 = passStringToWasm0(json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.withdrawals_from_json(ptr0, len0);\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {Withdrawals}\n     */\n    static new() {\n        var ret = wasm.assets_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n     * @returns {number}\n     */\n    len() {\n        var ret = wasm.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n     * @param {RewardAddress} key\n     * @param {BigNum} value\n     * @returns {BigNum | undefined}\n     */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        var ret = wasm.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @param {RewardAddress} key\n     * @returns {BigNum | undefined}\n     */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        var ret = wasm.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n     * @returns {RewardAddresses}\n     */\n    keys() {\n        var ret = wasm.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\nasync function load(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            }\n            catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    }\n    else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n        }\n        else {\n            return instance;\n        }\n    }\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"cardano_multiplatform_lib_bg.wasm\", import.meta.url);\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_object_drop_ref = function (arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_transaction_new = function (arg0) {\n        var ret = Transaction.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function (arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_json_parse = function (arg0, arg1) {\n        var ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_json_serialize = function (arg0, arg1) {\n        const obj = getObject(arg1);\n        var ret = JSON.stringify(obj === undefined ? null : obj);\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_string_get = function (arg0, arg1) {\n        const obj = getObject(arg1);\n        var ret = typeof (obj) === \"string\" ? obj : undefined;\n        var ptr0 = isLikeNone(ret)\n            ? 0\n            : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_fetch_da4b562f370dc6f1 = function (arg0, arg1) {\n        var ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_d61ff4c524b8dbc4 = function (arg0) {\n        var ret = getObject(arg0) instanceof Response;\n        return ret;\n    };\n    imports.wbg.__wbg_json_0662bf961a0f5285 = function () {\n        return handleError(function (arg0) {\n            var ret = getObject(arg0).json();\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_headers_0fdd616fbc057820 = function (arg0) {\n        var ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithstrandinit_155cb1478824b198 = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function (arg0) {\n        var ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_5d0410fa55f5533e = function () {\n        return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n            getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_cb_drop = function (arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        var ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_randomFillSync_654a7797990fb8db = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n        }, arguments);\n    };\n    imports.wbg.__wbg_getRandomValues_fb6b088efb6bead2 = function () {\n        return handleError(function (arg0, arg1) {\n            getObject(arg0).getRandomValues(getObject(arg1));\n        }, arguments);\n    };\n    imports.wbg.__wbg_process_70251ed1291754d5 = function (arg0) {\n        var ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_object = function (arg0) {\n        const val = getObject(arg0);\n        var ret = typeof (val) === \"object\" && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_versions_b23f2588cdb2ddbb = function (arg0) {\n        var ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_61b8c9a82499895d = function (arg0) {\n        var ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function (arg0) {\n        var ret = typeof (getObject(arg0)) === \"string\";\n        return ret;\n    };\n    imports.wbg.__wbg_require_2a93bc09fee45aca = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_crypto_2f56257a38275dbd = function (arg0) {\n        var ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_d07655bf62361f21 = function (arg0) {\n        var ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_33b45247c55045b0 = function () {\n        var ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_ba36642bd901572b = function () {\n        return handleError(function (arg0, arg1) {\n            var ret = getObject(arg0).call(getObject(arg1));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_self_bb69a836a72ec6e9 = function () {\n        return handleError(function () {\n            var ret = self.self;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_window_3304fc4b414c9693 = function () {\n        return handleError(function () {\n            var ret = globalThis.window;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_globalThis_e0d21cabc6630763 = function () {\n        return handleError(function () {\n            var ret = globalThis.globalThis;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_global_8463719227271676 = function () {\n        return handleError(function () {\n            var ret = global.global;\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbindgen_is_undefined = function (arg0) {\n        var ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbg_newnoargs_9fdd8f3961dd1bee = function (arg0, arg1) {\n        var ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_3fc07b7d5fc9022d = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n            return addHeapObject(ret);\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_edbe38a4e21329dd = function () {\n        var ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_c143a4f563f78c4e = function (arg0, arg1) {\n        try {\n            var state0 = { a: arg0, b: arg1 };\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_1369(a, state0.b, arg0, arg1);\n                }\n                finally {\n                    state0.a = a;\n                }\n            };\n            var ret = new Promise(cb0);\n            return addHeapObject(ret);\n        }\n        finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_resolve_cae3d8f752f5db88 = function (arg0) {\n        var ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_c2361a9d5c9a4fcb = function (arg0, arg1) {\n        var ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_6c9a4bf55755f9b8 = function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_9e184d6f785de5ed = function (arg0) {\n        var ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_e8101319e4cf95fc = function (arg0) {\n        var ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_e8ae7b27314e8b98 = function (arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_2d56cb37075fcfb1 = function (arg0) {\n        var ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_newwithlength_a8d1dbcbe703a5c6 = function (arg0) {\n        var ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_subarray_901ede8318da52a6 = function (arg0, arg1, arg2) {\n        var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_73349fc4814e0fc6 = function () {\n        return handleError(function (arg0, arg1, arg2) {\n            var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n            return ret;\n        }, arguments);\n    };\n    imports.wbg.__wbg_new_3a746f2619705add = function (arg0, arg1) {\n        var ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_f54d3a6dadb199ca = function (arg0, arg1) {\n        var ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_eq = function (arg0, arg1) {\n        var ret = getObject(arg0) === getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_self_ac379e780a0d8b94 = function (arg0) {\n        var ret = getObject(arg0).self;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_crypto_1e4302b85d4f64a2 = function (arg0) {\n        var ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_1b4ba144162a5c9e = function (arg0) {\n        var ret = getObject(arg0).getRandomValues;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_6461b1e9a0d7c34a = function (arg0, arg1) {\n        var ret = require(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_1b52c8482374c55b = function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbg_getRandomValues_1ef11e888e5228e9 = function (arg0, arg1, arg2) {\n        getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbindgen_debug_string = function (arg0, arg1) {\n        var ret = debugString(getObject(arg1));\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function (arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_rethrow = function (arg0) {\n        throw takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_memory = function () {\n        var ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6457 = function (arg0, arg1, arg2) {\n        var ret = makeMutClosure(arg0, arg1, 273, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n    if (typeof input === \"string\" ||\n        (typeof Request === \"function\" && input instanceof Request) ||\n        (typeof URL === \"function\" && input instanceof URL)) {\n        input = fetch(input);\n    }\n    const { instance, module } = await load(await input, imports);\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    return wasm;\n}\nexport default init;\n"],"names":["wasm","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","takeObject","ret","dropObject","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","isLikeNone","x","debugString","val","type","description","name","isArray","debug","i","className","builtInMatches","exec","toString","call","JSON","stringify","_","Error","message","stack","makeMutClosure","arg0","arg1","dtor","f","state","a","b","cnt","real","args","__wbindgen_export_2","get","original","__wbg_adapter_32","arg2","_dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hf552e89fb1b782c2","getArrayU8FromWasm0","passArray8ToWasm0","_assertClass","instance","klass","min_fee","tx","linear_fee","ex_unit_prices","Transaction","LinearFee","ExUnitPrices","BigNum","__wrap","encode_arbitrary_bytes_as_metadatum","bytes","ptr0","__wbindgen_malloc","len0","TransactionMetadatum","decode_arbitrary_bytes_from_metadatum","metadata","retptr","__wbindgen_add_to_stack_pointer","r0","r1","v0","__wbindgen_free","encode_json_str_to_metadatum","json","schema","__wbindgen_realloc","decode_metadatum_to_json_str","metadatum","cachegetUint32Memory0","getArrayU32FromWasm0","Uint32Array","encrypt_with_password","password","salt","nonce","data","ptr1","len1","ptr2","len2","ptr3","len3","decrypt_with_password","apply_params_to_plutus_script","params","plutus_script","PlutusList","PlutusScript","make_daedalus_bootstrap_witness","tx_body_hash","addr","key","TransactionHash","ByronAddress","LegacyDaedalusPrivateKey","BootstrapWitness","make_icarus_bootstrap_witness","Bip32PrivateKey","make_vkey_witness","sk","PrivateKey","Vkeywitness","hash_auxiliary_data","auxiliary_data","AuxiliaryData","AuxiliaryDataHash","hash_transaction","tx_body","TransactionBody","hash_plutus_data","plutus_data","PlutusData","DataHash","hash_blake2b256","v1","hash_blake2b224","hash_script_data","redeemers","cost_models","datums","Redeemers","Costmdls","ScriptDataHash","get_implicit_input","txbody","pool_deposit","key_deposit","Value","get_deposit","min_ada_required","output","coins_per_utxo_byte","TransactionOutput","encode_json_str_to_native_script","self_xpub","NativeScript","encode_json_str_to_plutus_datum","decode_plutus_datum_to_json_str","datum","handleError","apply","this","e","__wbindgen_exn_store","__wbg_adapter_1369","arg3","wasm_bindgen__convert__closures__invoke2_mut__h343db6eee225c129","CertificateKind","Object","freeze","StakeRegistration","StakeDeregistration","StakeDelegation","PoolRegistration","PoolRetirement","GenesisKeyDelegation","MoveInstantaneousRewardsCert","MIRPot","Reserves","Treasury","MIRKind","ToOtherPot","ToStakeCredentials","RelayKind","SingleHostAddr","SingleHostName","MultiHostName","NativeScriptKind","ScriptPubkey","ScriptAll","ScriptAny","ScriptNOfK","TimelockStart","TimelockExpiry","NetworkIdKind","Testnet","Mainnet","TransactionMetadatumKind","MetadataMap","MetadataList","Int","Bytes","Text","MetadataJsonSchema","NoConversions","BasicConversions","DetailedSchema","StakeCredKind","Key","Script","ScriptWitnessKind","NativeWitness","PlutusWitness","ScriptHashNamespace","PlutusV1","PlutusV2","ScriptSchema","Wallet","Node","LanguageKind","PlutusDataKind","ConstrPlutusData","Map","List","Integer","RedeemerTagKind","Spend","Mint","Cert","Reward","PlutusDatumSchema","ScriptKind","PlutusScriptV1","PlutusScriptV2","DatumKind","Hash","Data","Address","__destroy_into_raw","__wbg_address_free","address_to_json","address_to_js_value","address_to_bytes","prefix","address_to_bech32","address_network_id","address_as_byron","address_as_reward","RewardAddress","address_as_pointer","PointerAddress","address_as_enterprise","EnterpriseAddress","address_as_base","BaseAddress","create","prototype","address_from_bytes","address_from_json","bech_str","address_from_bech32","AssetName","__wbg_assetname_free","assetname_to_bytes","assetname_to_json","assetname_to_js_value","assetname_name","assetname_from_bytes","assetname_from_json","assetname_new","AssetNames","__wbg_assetnames_free","assetnames_to_bytes","assetnames_to_json","assetnames_to_js_value","assetnames_len","index","assetnames_get","elem","assetnames_add","assetnames_from_bytes","assetnames_from_json","assetnames_new","Assets","__wbg_assets_free","assets_to_bytes","assets_to_json","assets_to_js_value","value","assets_insert","assets_get","assets_keys","assets_from_bytes","assets_from_json","assets_new","__wbg_auxiliarydata_free","auxiliarydata_to_bytes","auxiliarydata_to_json","auxiliarydata_to_js_value","auxiliarydata_metadata","GeneralTransactionMetadata","auxiliarydata_set_metadata","auxiliarydata_native_scripts","NativeScripts","native_scripts","auxiliarydata_set_native_scripts","auxiliarydata_plutus_scripts","PlutusScripts","plutus_scripts","auxiliarydata_set_plutus_scripts","auxiliarydata_set_plutus_v2_scripts","auxiliarydata_from_bytes","auxiliarydata_from_json","auxiliarydata_new","__wbg_auxiliarydatahash_free","auxiliarydatahash_to_bytes","auxiliarydatahash_to_bech32","auxiliarydatahash_to_hex","auxiliarydatahash_from_bytes","auxiliarydatahash_from_bech32","hex","auxiliarydatahash_from_hex","AuxiliaryDataSet","__wbg_auxiliarydataset_free","auxiliarydataset_len","tx_index","auxiliarydataset_insert","auxiliarydataset_get","auxiliarydataset_indices","TransactionIndexes","auxiliarydataset_new","__wbg_baseaddress_free","baseaddress_payment_cred","StakeCredential","baseaddress_stake_cred","baseaddress_to_address","network","payment","stake","baseaddress_new","BigInt","__wbg_bigint_free","bigint_to_bytes","bigint_as_u64","bigint_as_int","bigint_to_str","bigint_from_bytes","text","bigint_from_str","__wbg_bignum_free","bignum_to_bytes","bignum_to_str","bignum_is_zero","other","bignum_checked_mul","bignum_checked_add","bignum_checked_sub","bignum_checked_div","bignum_checked_div_ceil","bignum_clamped_sub","rhs_value","bignum_compare","bignum_from_bytes","string","bignum_from_str","bignum_zero","__wbg_bip32privatekey_free","bip32privatekey_derive","bip32privatekey_to_128_xprv","bip32privatekey_to_raw_key","bip32privatekey_to_public","Bip32PublicKey","bip32privatekey_as_bytes","bip32privatekey_to_bech32","bip32privatekey_chaincode","bip32privatekey_from_128_xprv","bip32privatekey_generate_ed25519_bip32","bip32privatekey_from_bytes","bech32_str","bip32privatekey_from_bech32","entropy","bip32privatekey_from_bip39_entropy","__wbg_bip32publickey_free","bip32publickey_derive","bip32publickey_to_raw_key","PublicKey","bip32publickey_as_bytes","bip32publickey_to_bech32","bip32publickey_chaincode","bip32publickey_from_bytes","bip32publickey_from_bech32","Block","__wbg_block_free","block_to_bytes","block_to_json","block_to_js_value","block_header","Header","block_transaction_bodies","TransactionBodies","block_transaction_witness_sets","TransactionWitnessSets","block_auxiliary_data_set","block_invalid_transactions","block_from_bytes","block_from_json","header","transaction_bodies","transaction_witness_sets","auxiliary_data_set","invalid_transactions","block_new","BlockHash","__wbg_blockhash_free","blockhash_from_bytes","blockhash_from_bech32","blockhash_from_hex","Blockfrost","__wbg_blockfrost_free","blockfrost_url","blockfrost_project_id","url","project_id","blockfrost_new","__wbg_bootstrapwitness_free","bootstrapwitness_to_bytes","bootstrapwitness_to_json","bootstrapwitness_to_js_value","bootstrapwitness_vkey","Vkey","bootstrapwitness_signature","Ed25519Signature","bootstrapwitness_chain_code","bootstrapwitness_attributes","bootstrapwitness_from_bytes","bootstrapwitness_from_json","vkey","signature","chain_code","attributes","bootstrapwitness_new","BootstrapWitnesses","__wbg_bootstrapwitnesses_free","bootstrapwitnesses_len","bootstrapwitnesses_get","bootstrapwitnesses_add","bootstrapwitnesses_new","__wbg_byronaddress_free","byronaddress_to_base58","byronaddress_to_bytes","byronaddress_byron_protocol_magic","byronaddress_attributes","byronaddress_network_id","byronaddress_to_address","byronaddress_from_bytes","s","byronaddress_from_base58","protocol_magic","byronaddress_icarus_from_key","byronaddress_is_valid","Certificate","__wbg_certificate_free","certificate_to_bytes","certificate_to_json","certificate_to_js_value","certificate_kind","certificate_as_stake_registration","certificate_as_stake_deregistration","certificate_as_stake_delegation","certificate_as_pool_registration","certificate_as_pool_retirement","certificate_as_genesis_key_delegation","certificate_as_move_instantaneous_rewards_cert","certificate_from_bytes","certificate_from_json","stake_registration","certificate_new_stake_registration","stake_deregistration","certificate_new_stake_deregistration","stake_delegation","certificate_new_stake_delegation","pool_registration","certificate_new_pool_registration","pool_retirement","certificate_new_pool_retirement","genesis_key_delegation","certificate_new_genesis_key_delegation","move_instantaneous_rewards_cert","certificate_new_move_instantaneous_rewards_cert","Certificates","__wbg_certificates_free","certificates_to_bytes","certificates_to_json","certificates_to_js_value","certificates_get","certificates_add","certificates_from_bytes","certificates_from_json","certificates_new","__wbg_constrplutusdata_free","constrplutusdata_to_bytes","constrplutusdata_alternative","constrplutusdata_data","constrplutusdata_from_bytes","alternative","constrplutusdata_new","CostModel","__wbg_costmodel_free","costmodel_to_bytes","operation","cost","costmodel_set","costmodel_get","costmdls_len","costmodel_from_bytes","costmodel_new","costmodel_new_plutus_v2","__wbg_costmdls_free","costmdls_to_bytes","Language","costmdls_insert","costmdls_get","costmdls_keys","Languages","costmdls_from_bytes","costmdls_new","DNSRecordAorAAAA","__wbg_dnsrecordaoraaaa_free","dnsrecordaoraaaa_to_bytes","dnsrecordaoraaaa_record","dnsrecordaoraaaa_from_bytes","dns_name","dnsrecordaoraaaa_new","DNSRecordSRV","__wbg_dnsrecordsrv_free","dnsrecordsrv_to_bytes","dnsrecordsrv_from_bytes","dnsrecordsrv_new","__wbg_data_free","data_to_bytes","data_to_json","data_to_js_value","data_get","data_from_bytes","data_from_json","data_new","__wbg_datahash_free","datahash_from_bytes","datahash_from_bech32","datahash_from_hex","Datum","__wbg_datum_free","datum_to_bytes","datum_to_json","datum_to_js_value","datum_kind","datum_as_data_hash","datum_as_data","datum_from_bytes","datum_from_json","data_hash","datum_new_data_hash","datum_new_data","Ed25519KeyHash","__wbg_ed25519keyhash_free","ed25519keyhash_to_bytes","ed25519keyhash_to_bech32","ed25519keyhash_to_hex","ed25519keyhash_from_bytes","ed25519keyhash_from_bech32","ed25519keyhash_from_hex","Ed25519KeyHashes","__wbg_ed25519keyhashes_free","ed25519keyhashes_to_bytes","ed25519keyhashes_to_json","ed25519keyhashes_to_js_value","ed25519keyhashes_get","ed25519keyhashes_add","ed25519keyhashes_from_bytes","ed25519keyhashes_from_json","ed25519keyhashes_new","__wbg_ed25519signature_free","ed25519signature_to_bytes","ed25519signature_to_bech32","ed25519signature_to_hex","ed25519signature_from_bech32","input","ed25519signature_from_hex","ed25519signature_from_bytes","__wbg_enterpriseaddress_free","enterpriseaddress_to_address","enterpriseaddress_new","__wbg_exunitprices_free","exunitprices_to_bytes","exunitprices_mem_price","UnitInterval","exunitprices_step_price","exunitprices_from_bytes","mem_price","step_price","exunitprices_new","exunitprices_from_float","ExUnits","__wbg_exunits_free","exunits_to_bytes","exunits_steps","exunits_from_bytes","steps","exunits_new","__wbg_generaltransactionmetadata_free","generaltransactionmetadata_to_bytes","generaltransactionmetadata_to_json","generaltransactionmetadata_to_js_value","generaltransactionmetadata_len","generaltransactionmetadata_insert","generaltransactionmetadata_get","generaltransactionmetadata_keys","TransactionMetadatumLabels","generaltransactionmetadata_from_bytes","generaltransactionmetadata_from_json","generaltransactionmetadata_new","GenesisDelegateHash","__wbg_genesisdelegatehash_free","genesisdelegatehash_from_bytes","genesisdelegatehash_from_bech32","genesisdelegatehash_from_hex","GenesisHash","__wbg_genesishash_free","genesishash_from_bytes","genesishash_from_bech32","genesishash_from_hex","GenesisHashes","__wbg_genesishashes_free","genesishashes_to_bytes","genesishashes_to_json","genesishashes_to_js_value","genesishashes_get","genesishashes_add","genesishashes_from_bytes","genesishashes_from_json","__wbg_genesiskeydelegation_free","genesiskeydelegation_to_bytes","genesiskeydelegation_to_json","genesiskeydelegation_to_js_value","genesiskeydelegation_genesishash","genesiskeydelegation_genesis_delegate_hash","genesiskeydelegation_vrf_keyhash","VRFKeyHash","genesiskeydelegation_from_bytes","genesiskeydelegation_from_json","genesishash","genesis_delegate_hash","vrf_keyhash","genesiskeydelegation_new","__wbg_header_free","header_to_bytes","header_to_json","header_to_js_value","header_header_body","HeaderBody","header_body_signature","KESSignature","header_from_bytes","header_from_json","header_body","body_signature","header_new","__wbg_headerbody_free","headerbody_to_bytes","headerbody_to_json","headerbody_to_js_value","headerbody_block_number","headerbody_slot","headerbody_prev_hash","headerbody_issuer_vkey","headerbody_vrf_vkey","VRFVKey","headerbody_nonce_vrf","VRFCert","headerbody_leader_vrf","headerbody_block_body_size","headerbody_block_body_hash","headerbody_operational_cert","OperationalCert","headerbody_protocol_version","ProtocolVersion","headerbody_from_bytes","headerbody_from_json","block_number","slot","prev_hash","issuer_vkey","vrf_vkey","nonce_vrf","leader_vrf","block_body_size","block_body_hash","operational_cert","protocol_version","headerbody_new","__wbg_int_free","int_to_bytes","int_is_positive","int_as_positive","int_as_negative","int_as_i32","int_as_i32_or_fail","int_to_str","int_from_bytes","int_new","int_new_negative","int_new_i32","int_from_str","Ipv4","__wbg_ipv4_free","ipv4_to_bytes","ipv4_to_json","ipv4_to_js_value","ipv4_ip","ipv4_from_bytes","ipv4_from_json","ipv4_new","Ipv6","__wbg_ipv6_free","ipv6_to_bytes","ipv6_to_json","ipv6_to_js_value","ipv6_ip","ipv6_from_bytes","ipv6_from_json","ipv6_new","__wbg_kessignature_free","kessignature_from_bytes","KESVKey","__wbg_kesvkey_free","kesvkey_from_bytes","kesvkey_from_bech32","kesvkey_from_hex","__wbg_language_free","language_to_bytes","language_kind","language_from_bytes","language_new_plutus_v1","language_new_plutus_v2","__wbg_languages_free","languages_get","languages_add","languages_new","__wbg_legacydaedalusprivatekey_free","legacydaedalusprivatekey_as_bytes","legacydaedalusprivatekey_chaincode","legacydaedalusprivatekey_from_bytes","__wbg_linearfee_free","linearfee_constant","linearfee_coefficient","coefficient","constant","linearfee_new","MIRToStakeCredentials","__wbg_mirtostakecredentials_free","mirtostakecredentials_to_bytes","mirtostakecredentials_to_json","mirtostakecredentials_to_js_value","cred","delta","mirtostakecredentials_insert","mirtostakecredentials_get","mirtostakecredentials_keys","StakeCredentials","mirtostakecredentials_from_bytes","mirtostakecredentials_from_json","__wbg_metadatalist_free","metadatalist_to_bytes","metadatalist_len","metadatalist_get","metadatalist_add","metadatalist_from_bytes","metadatalist_new","__wbg_metadatamap_free","metadatamap_to_bytes","metadatamap_insert","metadatamap_insert_str","metadatamap_insert_i32","metadatamap_get","metadatamap_get_str","metadatamap_get_i32","metadatamap_has","metadatamap_keys","metadatamap_from_bytes","__wbg_mint_free","mint_to_bytes","mint_to_json","mint_to_js_value","ScriptHash","MintAssets","mint_insert","mint_get","mint_keys","ScriptHashes","mint_as_positive_multiasset","MultiAsset","mint_as_negative_multiasset","mint_from_bytes","mint_from_json","mint_new_from_entry","__wbg_mintassets_free","mintassets_insert","mintassets_get","mintassets_keys","mintassets_new_from_entry","MoveInstantaneousReward","__wbg_moveinstantaneousreward_free","moveinstantaneousreward_to_bytes","moveinstantaneousreward_to_json","moveinstantaneousreward_to_js_value","moveinstantaneousreward_pot","moveinstantaneousreward_kind","moveinstantaneousreward_as_to_other_pot","moveinstantaneousreward_as_to_stake_creds","moveinstantaneousreward_from_bytes","moveinstantaneousreward_from_json","pot","amount","moveinstantaneousreward_new_to_other_pot","amounts","moveinstantaneousreward_new_to_stake_creds","__wbg_moveinstantaneousrewardscert_free","moveinstantaneousrewardscert_to_bytes","moveinstantaneousrewardscert_to_json","moveinstantaneousrewardscert_to_js_value","moveinstantaneousrewardscert_move_instantaneous_reward","moveinstantaneousrewardscert_from_bytes","moveinstantaneousrewardscert_from_json","move_instantaneous_reward","moveinstantaneousrewardscert_new","__wbg_multiasset_free","multiasset_to_bytes","multiasset_to_json","multiasset_to_js_value","policy_id","assets","multiasset_insert","multiasset_get","asset_name","multiasset_set_asset","multiasset_get_asset","multiasset_keys","rhs_ma","multiasset_sub","multiasset_from_bytes","multiasset_from_json","__wbg_multihostname_free","multihostname_to_bytes","multihostname_to_json","multihostname_to_js_value","multihostname_dns_name","multihostname_from_bytes","multihostname_from_json","multihostname_new","__wbg_nativescript_free","nativescript_to_bytes","nativescript_to_json","nativescript_to_js_value","namespace","nativescript_hash","nativescript_kind","nativescript_as_script_pubkey","nativescript_as_script_all","nativescript_as_script_any","nativescript_as_script_n_of_k","nativescript_as_timelock_start","nativescript_as_timelock_expiry","nativescript_get_required_signers","lower_bound","upper_bound","key_hashes","nativescript_verify","nativescript_from_bytes","nativescript_from_json","script_pubkey","nativescript_new_script_pubkey","script_all","nativescript_new_script_all","script_any","nativescript_new_script_any","script_n_of_k","nativescript_new_script_n_of_k","timelock_start","nativescript_new_timelock_start","timelock_expiry","nativescript_new_timelock_expiry","__wbg_nativescripts_free","nativescripts_get","nativescripts_add","NetworkId","__wbg_networkid_free","networkid_to_bytes","networkid_to_json","networkid_to_js_value","networkid_kind","networkid_from_bytes","networkid_from_json","networkid_testnet","networkid_mainnet","NetworkInfo","__wbg_networkinfo_free","networkinfo_network_id","networkinfo_protocol_magic","network_id","networkinfo_new","networkinfo_testnet","networkinfo_mainnet","Nonce","__wbg_nonce_free","nonce_to_bytes","nonce_get_hash","nonce_from_bytes","nonce_new_identity","hash","nonce_new_from_hash","__wbg_operationalcert_free","operationalcert_to_bytes","operationalcert_to_json","operationalcert_to_js_value","operationalcert_hot_vkey","operationalcert_sequence_number","operationalcert_kes_period","operationalcert_sigma","operationalcert_from_bytes","operationalcert_from_json","hot_vkey","sequence_number","kes_period","sigma","operationalcert_new","__wbg_plutusdata_free","plutusdata_to_bytes","plutusdata_kind","plutusdata_as_constr_plutus_data","plutusdata_as_map","PlutusMap","plutusdata_as_list","plutusdata_as_integer","plutusdata_as_bytes","plutusdata_from_bytes","constr_plutus_data","plutusdata_new_constr_plutus_data","map","plutusdata_new_map","list","plutusdata_new_list","integer","plutusdata_new_integer","plutusdata_new_bytes","__wbg_plutuslist_free","plutuslist_to_bytes","plutuslist_get","plutuslist_add","plutuslist_from_bytes","plutuslist_new","__wbg_plutusmap_free","plutusmap_to_bytes","plutusmap_insert","plutusmap_get","plutusmap_keys","plutusmap_from_bytes","plutusmap_new","__wbg_plutusscript_free","plutusscript_to_bytes","plutusscript_hash","plutusscript_bytes","plutusscript_from_bytes","plutusscript_new","__wbg_plutusscripts_free","plutusscripts_to_bytes","plutusscripts_get","plutusscripts_add","plutusscripts_from_bytes","plutusscripts_new","__wbg_plutuswitness_free","plutuswitness_plutus_data","plutuswitness_redeemer","plutuswitness_script","plutuswitness_version","redeemer","script","plutuswitness_new","plutuswitness_new_plutus_v2","Pointer","__wbg_pointer_free","pointer_slot","pointer_tx_index","pointer_cert_index","cert_index","pointer_new","__wbg_pointeraddress_free","pointeraddress_payment_cred","pointeraddress_stake_pointer","pointeraddress_to_address","pointeraddress_new","PoolMetadata","__wbg_poolmetadata_free","poolmetadata_to_bytes","poolmetadata_to_json","poolmetadata_to_js_value","URL","poolmetadata_pool_metadata_hash","PoolMetadataHash","poolmetadata_from_bytes","poolmetadata_from_json","pool_metadata_hash","poolmetadata_new","__wbg_poolmetadatahash_free","poolmetadatahash_from_bytes","poolmetadatahash_from_bech32","poolmetadatahash_from_hex","PoolParams","__wbg_poolparams_free","poolparams_to_bytes","poolparams_to_json","poolparams_to_js_value","poolparams_operator","poolparams_vrf_keyhash","poolparams_cost","poolparams_margin","poolparams_reward_account","poolparams_pool_owners","poolparams_relays","Relays","poolparams_pool_metadata","poolparams_from_bytes","poolparams_from_json","operator","pledge","margin","reward_account","pool_owners","relays","pool_metadata","poolparams_new","__wbg_poolregistration_free","poolregistration_to_bytes","poolregistration_to_json","poolregistration_to_js_value","poolregistration_pool_params","update","poolregistration_set_is_update","poolregistration_from_bytes","poolregistration_from_json","pool_params","poolregistration_new","__wbg_poolretirement_free","poolretirement_to_bytes","poolretirement_to_json","poolretirement_to_js_value","poolretirement_pool_keyhash","poolretirement_from_bytes","poolretirement_from_json","pool_keyhash","epoch","poolretirement_new","__wbg_privatekey_free","privatekey_to_public","privatekey_to_bech32","privatekey_as_bytes","privatekey_sign","privatekey_to_bytes","privatekey_generate_ed25519","privatekey_generate_ed25519extended","privatekey_from_bech32","privatekey_from_extended_bytes","privatekey_from_normal_bytes","privatekey_from_bytes","ProposedProtocolParameterUpdates","__wbg_proposedprotocolparameterupdates_free","proposedprotocolparameterupdates_to_bytes","proposedprotocolparameterupdates_to_json","proposedprotocolparameterupdates_to_js_value","ProtocolParamUpdate","proposedprotocolparameterupdates_insert","proposedprotocolparameterupdates_get","proposedprotocolparameterupdates_keys","proposedprotocolparameterupdates_from_bytes","proposedprotocolparameterupdates_from_json","__wbg_protocolparamupdate_free","protocolparamupdate_to_bytes","protocolparamupdate_to_json","protocolparamupdate_to_js_value","minfee_a","protocolparamupdate_set_minfee_a","protocolparamupdate_minfee_a","minfee_b","protocolparamupdate_set_minfee_b","protocolparamupdate_minfee_b","max_block_body_size","protocolparamupdate_set_max_block_body_size","protocolparamupdate_max_block_body_size","max_tx_size","protocolparamupdate_set_max_tx_size","protocolparamupdate_max_tx_size","max_block_header_size","protocolparamupdate_set_max_block_header_size","protocolparamupdate_max_block_header_size","protocolparamupdate_set_key_deposit","protocolparamupdate_key_deposit","protocolparamupdate_set_pool_deposit","protocolparamupdate_pool_deposit","max_epoch","protocolparamupdate_set_max_epoch","protocolparamupdate_max_epoch","n_opt","protocolparamupdate_set_n_opt","protocolparamupdate_n_opt","pool_pledge_influence","protocolparamupdate_set_pool_pledge_influence","protocolparamupdate_pool_pledge_influence","expansion_rate","protocolparamupdate_set_expansion_rate","protocolparamupdate_expansion_rate","treasury_growth_rate","protocolparamupdate_set_treasury_growth_rate","protocolparamupdate_treasury_growth_rate","d","protocolparamupdate_set_d","protocolparamupdate_d","extra_entropy","protocolparamupdate_set_extra_entropy","protocolparamupdate_extra_entropy","protocolparamupdate_set_protocol_version","protocolparamupdate_protocol_version","min_pool_cost","protocolparamupdate_set_min_pool_cost","protocolparamupdate_min_pool_cost","ada_per_utxo_byte","protocolparamupdate_set_ada_per_utxo_byte","protocolparamupdate_ada_per_utxo_byte","protocolparamupdate_set_cost_models","protocolparamupdate_cost_models","execution_costs","protocolparamupdate_set_execution_costs","protocolparamupdate_execution_costs","max_tx_ex_units","protocolparamupdate_set_max_tx_ex_units","protocolparamupdate_max_tx_ex_units","max_block_ex_units","protocolparamupdate_set_max_block_ex_units","protocolparamupdate_max_block_ex_units","max_value_size","protocolparamupdate_set_max_value_size","protocolparamupdate_max_value_size","collateral_percentage","protocolparamupdate_set_collateral_percentage","protocolparamupdate_collateral_percentage","max_collateral_inputs","protocolparamupdate_set_max_collateral_inputs","protocolparamupdate_max_collateral_inputs","protocolparamupdate_from_bytes","protocolparamupdate_from_json","protocolparamupdate_new","__wbg_protocolversion_free","protocolversion_to_bytes","protocolversion_to_json","protocolversion_to_js_value","protocolversion_from_bytes","protocolversion_from_json","major","minor","protocolversion_new","__wbg_publickey_free","publickey_to_bech32","publickey_verify","publickey_hash","publickey_from_bech32","publickey_from_bytes","PublicKeys","publickeys_new","__wbg_publickeys_free","publickeys_get","publickeys_add","Redeemer","__wbg_redeemer_free","redeemer_to_bytes","redeemer_tag","RedeemerTag","redeemer_data","redeemer_ex_units","redeemer_from_bytes","tag","ex_units","redeemer_new","__wbg_redeemertag_free","redeemertag_to_bytes","redeemertag_kind","redeemertag_from_bytes","redeemertag_new_spend","redeemertag_new_mint","redeemertag_new_cert","redeemertag_new_reward","RedeemerWitnessKey","__wbg_redeemerwitnesskey_free","redeemerwitnesskey_tag","redeemerwitnesskey_new","__wbg_redeemers_free","redeemers_to_bytes","redeemers_get","redeemers_add","redeemers_from_bytes","Relay","__wbg_relay_free","relay_to_bytes","relay_to_json","relay_to_js_value","relay_kind","relay_as_single_host_addr","relay_as_single_host_name","relay_as_multi_host_name","relay_from_bytes","relay_from_json","single_host_addr","relay_new_single_host_addr","single_host_name","relay_new_single_host_name","multi_host_name","relay_new_multi_host_name","__wbg_relays_free","relays_to_bytes","relays_to_json","relays_to_js_value","relays_get","relays_add","relays_from_bytes","relays_from_json","RequiredWitnessSet","__wbg_requiredwitnessset_free","requiredwitnessset_add_vkey","requiredwitnessset_add_vkey_key","requiredwitnessset_add_vkey_key_hash","bootstrap","requiredwitnessset_add_bootstrap","requiredwitnessset_add_bootstrap_key","requiredwitnessset_add_bootstrap_key_hash","native_script","requiredwitnessset_add_native_script","requiredwitnessset_add_native_script_hash","requiredwitnessset_add_plutus_script","requiredwitnessset_add_plutus_v2_script","requiredwitnessset_add_plutus_hash","plutus_datum","requiredwitnessset_add_plutus_datum","requiredwitnessset_add_plutus_datum_hash","requiredwitnessset_add_redeemer","requiredwitnessset_add_redeemer_tag","requirements","requiredwitnessset_add_all","requiredwitnessset_new","__wbg_rewardaddress_free","rewardaddress_to_address","RewardAddresses","__wbg_rewardaddresses_free","rewardaddresses_to_bytes","rewardaddresses_to_json","rewardaddresses_to_js_value","rewardaddresses_get","rewardaddresses_add","rewardaddresses_from_bytes","rewardaddresses_from_json","__wbg_script_free","script_to_bytes","script_to_json","script_to_js_value","script_kind","script_as_native","script_as_plutus_v1","script_as_plutus_v2","script_from_bytes","script_from_json","script_new_native","script_new_plutus_v1","script_new_plutus_v2","__wbg_scriptall_free","scriptall_to_bytes","scriptall_to_json","scriptall_to_js_value","scriptall_native_scripts","scriptall_from_bytes","scriptall_from_json","scriptall_new","__wbg_scriptany_free","scriptany_to_bytes","scriptany_to_js_value","scriptany_from_bytes","scriptany_from_json","__wbg_scriptdatahash_free","scriptdatahash_from_bytes","scriptdatahash_from_bech32","scriptdatahash_from_hex","__wbg_scripthash_free","scripthash_from_bytes","scripthash_from_bech32","scripthash_from_hex","__wbg_scripthashes_free","scripthashes_to_bytes","scripthashes_to_json","scripthashes_to_js_value","scripthashes_get","scripthashes_add","scripthashes_from_bytes","scripthashes_from_json","__wbg_scriptnofk_free","scriptnofk_to_bytes","scriptnofk_to_json","scriptnofk_to_js_value","scriptnofk_native_scripts","scriptnofk_from_bytes","scriptnofk_from_json","n","scriptnofk_new","__wbg_scriptpubkey_free","scriptpubkey_to_bytes","scriptpubkey_to_json","scriptpubkey_to_js_value","scriptpubkey_addr_keyhash","scriptpubkey_from_bytes","scriptpubkey_from_json","addr_keyhash","scriptpubkey_new","ScriptRef","__wbg_scriptref_free","scriptref_to_bytes","scriptref_to_js_value","scriptref_get","scriptref_from_bytes","scriptref_from_json","scriptref_new","ScriptWitness","__wbg_scriptwitness_free","scriptwitness_to_json","scriptwitness_to_js_value","scriptwitness_kind","scriptwitness_as_native_witness","scriptwitness_as_plutus_witness","scriptwitness_from_json","scriptwitness_new_native_witness","plutus_witness","scriptwitness_new_plutus_witness","__wbg_singlehostaddr_free","singlehostaddr_to_bytes","singlehostaddr_to_json","singlehostaddr_to_js_value","singlehostaddr_port","singlehostaddr_ipv4","singlehostaddr_ipv6","singlehostaddr_from_bytes","singlehostaddr_from_json","port","ipv4","ipv6","singlehostaddr_new","__wbg_singlehostname_free","singlehostname_to_bytes","singlehostname_to_json","singlehostname_to_js_value","singlehostname_port","singlehostname_from_bytes","singlehostname_from_json","singlehostname_new","__wbg_stakecredential_free","stakecredential_to_keyhash","stakecredential_to_scripthash","stakecredential_kind","stakecredential_to_bytes","stakecredential_to_json","stakecredential_to_js_value","stakecredential_from_keyhash","stakecredential_from_scripthash","stakecredential_from_bytes","stakecredential_from_json","__wbg_stakecredentials_free","stakecredentials_to_bytes","stakecredentials_to_json","stakecredentials_to_js_value","stakecredentials_get","stakecredentials_add","stakecredentials_from_bytes","stakecredentials_from_json","__wbg_stakedelegation_free","stakedelegation_to_bytes","stakedelegation_to_json","stakedelegation_to_js_value","stakedelegation_stake_credential","stakedelegation_pool_keyhash","stakedelegation_from_bytes","stakedelegation_from_json","stake_credential","stakedelegation_new","__wbg_stakederegistration_free","stakederegistration_to_bytes","stakederegistration_to_json","stakederegistration_to_js_value","stakederegistration_from_bytes","stakederegistration_from_json","stakederegistration_new","__wbg_stakeregistration_free","stakeregistration_to_bytes","stakeregistration_to_js_value","stakeregistration_from_bytes","stakeregistration_from_json","Strings","__wbg_strings_free","strings_get","strings_add","__wbg_timelockexpiry_free","timelockexpiry_to_bytes","timelockexpiry_to_json","timelockexpiry_to_js_value","timelockexpiry_from_bytes","timelockexpiry_from_json","timelockexpiry_new","__wbg_timelockstart_free","timelockstart_to_bytes","timelockstart_to_js_value","timelockstart_from_bytes","timelockstart_from_json","__wbg_transaction_free","transaction_to_bytes","transaction_to_json","transaction_to_js_value","transaction_body","transaction_witness_set","TransactionWitnessSet","transaction_is_valid","transaction_auxiliary_data","valid","transaction_set_is_valid","transaction_from_bytes","transaction_from_json","body","witness_set","transaction_new","__wbg_transactionbodies_free","transactionbodies_to_bytes","transactionbodies_to_json","transactionbodies_to_js_value","transactionbodies_get","transactionbodies_add","transactionbodies_from_bytes","transactionbodies_from_json","__wbg_transactionbody_free","transactionbody_to_bytes","transactionbody_to_json","transactionbody_to_js_value","transactionbody_inputs","TransactionInputs","transactionbody_outputs","TransactionOutputs","transactionbody_ttl","certs","transactionbody_set_certs","transactionbody_certs","withdrawals","Withdrawals","transactionbody_set_withdrawals","transactionbody_withdrawals","Update","transactionbody_set_update","transactionbody_update","auxiliary_data_hash","transactionbody_set_auxiliary_data_hash","transactionbody_auxiliary_data_hash","validity_start_interval","transactionbody_set_validity_start_interval","transactionbody_validity_start_interval","mint","transactionbody_set_mint","transactionbody_mint","script_data_hash","transactionbody_set_script_data_hash","transactionbody_script_data_hash","collateral","transactionbody_set_collateral","transactionbody_collateral","required_signers","transactionbody_set_required_signers","transactionbody_required_signers","transactionbody_set_network_id","transactionbody_network_id","collateral_return","transactionbody_set_collateral_return","transactionbody_collateral_return","total_collateral","transactionbody_set_total_collateral","transactionbody_total_collateral","reference_inputs","transactionbody_set_reference_inputs","transactionbody_reference_inputs","transactionbody_raw","transactionbody_from_bytes","transactionbody_from_json","inputs","outputs","fee","ttl","transactionbody_new","TransactionBuilder","__wbg_transactionbuilder_free","change_address","TransactionUnspentOutputs","transactionbuilder_add_inputs_from","utxo","script_witness","TransactionUnspentOutput","transactionbuilder_add_input","transactionbuilder_add_reference_input","address","TransactionInput","transactionbuilder_fee_for_input","transactionbuilder_add_output","transactionbuilder_add_plutus_script","transactionbuilder_add_plutus_v2_script","transactionbuilder_add_plutus_data","transactionbuilder_add_native_script","certificate","transactionbuilder_add_certificate","transactionbuilder_fee_for_output","transactionbuilder_set_ttl","transactionbuilder_set_validity_start_interval","reward_address","coin","transactionbuilder_add_withdrawal","transactionbuilder_auxiliary_data","transactionbuilder_set_auxiliary_data","transactionbuilder_set_metadata","transactionbuilder_add_metadatum","transactionbuilder_add_json_metadatum","transactionbuilder_add_json_metadatum_with_schema","transactionbuilder_mint","transactionbuilder_certificates","transactionbuilder_withdrawals","transactionbuilder_native_scripts","mint_assets","transactionbuilder_add_mint","transactionbuilder_script_data_hash","transactionbuilder_add_collateral","transactionbuilder_get_collateral","required_signer","transactionbuilder_add_required_signer","transactionbuilder_required_signers","transactionbuilder_set_network_id","transactionbuilder_network_id","transactionbuilder_redeemers","transactionbuilder_get_explicit_input","transactionbuilder_get_implicit_input","transactionbuilder_get_total_input","transactionbuilder_get_total_output","transactionbuilder_get_explicit_output","transactionbuilder_get_deposit","transactionbuilder_get_fee_if_set","transactionbuilder_balance","transactionbuilder_to_bytes","transactionbuilder_full_size","transactionbuilder_output_sizes","transactionbuilder_outputs","collateral_utxos","collateral_change_address","native_uplc","transactionbuilder_construct","transactionbuilder_build_tx","transactionbuilder_min_fee","cfg","TransactionBuilderConfig","transactionbuilder_new","__wbg_transactionbuilderconfig_free","TransactionBuilderConfigBuilder","__wbg_transactionbuilderconfigbuilder_free","fee_algo","transactionbuilderconfigbuilder_fee_algo","transactionbuilderconfigbuilder_coins_per_utxo_byte","transactionbuilderconfigbuilder_pool_deposit","transactionbuilderconfigbuilder_key_deposit","transactionbuilderconfigbuilder_max_value_size","transactionbuilderconfigbuilder_max_tx_size","transactionbuilderconfigbuilder_ex_unit_prices","transactionbuilderconfigbuilder_max_tx_ex_units","costmdls","transactionbuilderconfigbuilder_costmdls","transactionbuilderconfigbuilder_collateral_percentage","transactionbuilderconfigbuilder_max_collateral_inputs","zero_time","zero_slot","slot_length","transactionbuilderconfigbuilder_slot_config","blockfrost","transactionbuilderconfigbuilder_blockfrost","transactionbuilderconfigbuilder_build","transactionbuilderconfigbuilder_new","__wbg_transactionhash_free","transactionhash_from_bytes","transactionhash_from_bech32","transactionhash_from_hex","__wbg_transactionindexes_free","transactionindexes_to_bytes","transactionindexes_get","transactionindexes_add","transactionindexes_from_bytes","__wbg_transactioninput_free","transactioninput_to_bytes","transactioninput_to_json","transactioninput_to_js_value","transactioninput_transaction_id","transactioninput_from_bytes","transactioninput_from_json","transaction_id","transactioninput_new","__wbg_transactioninputs_free","transactioninputs_to_bytes","transactioninputs_to_json","transactioninputs_to_js_value","transactioninputs_get","transactioninputs_add","transactioninputs_sort","transactioninputs_from_bytes","transactioninputs_from_json","__wbg_transactionmetadatum_free","transactionmetadatum_to_bytes","transactionmetadatum_kind","transactionmetadatum_as_map","transactionmetadatum_as_list","transactionmetadatum_as_int","transactionmetadatum_as_bytes","transactionmetadatum_as_text","transactionmetadatum_from_bytes","transactionmetadatum_new_map","transactionmetadatum_new_list","int","transactionmetadatum_new_int","transactionmetadatum_new_bytes","transactionmetadatum_new_text","__wbg_transactionmetadatumlabels_free","transactionmetadatumlabels_to_bytes","transactionmetadatumlabels_get","transactionmetadatumlabels_add","transactionmetadatumlabels_from_bytes","__wbg_transactionoutput_free","transactionoutput_to_bytes","transactionoutput_to_json","transactionoutput_to_js_value","transactionoutput_address","transactionoutput_amount","transactionoutput_datum","transactionoutput_script_ref","transactionoutput_set_datum","script_ref","transactionoutput_set_script_ref","transactionoutput_to_legacy_bytes","transactionoutput_from_bytes","transactionoutput_from_json","transactionoutput_new","TransactionOutputAmountBuilder","__wbg_transactionoutputamountbuilder_free","transactionoutputamountbuilder_with_value","transactionoutputamountbuilder_with_coin","multiasset","transactionoutputamountbuilder_with_coin_and_asset","coins_per_utxo_word","transactionoutputamountbuilder_with_asset_and_min_required_coin","transactionoutputamountbuilder_build","TransactionOutputBuilder","__wbg_transactionoutputbuilder_free","transactionoutputbuilder_with_address","transactionoutputbuilder_with_datum","transactionoutputbuilder_next","transactionoutputbuilder_new","__wbg_transactionoutputs_free","transactionoutputs_to_bytes","transactionoutputs_to_json","transactionoutputs_to_js_value","transactionoutputs_get","transactionoutputs_add","transactionoutputs_from_bytes","transactionoutputs_from_json","__wbg_transactionunspentoutput_free","transactionunspentoutput_to_bytes","transactionunspentoutput_input","transactionunspentoutput_output","transactionunspentoutput_to_legacy_bytes","transactionunspentoutput_from_bytes","transactionunspentoutput_new","__wbg_transactionunspentoutputs_free","transactionunspentoutputs_len","transactionunspentoutputs_get","transactionunspentoutputs_add","transactionunspentoutputs_new","__wbg_transactionwitnessset_free","transactionwitnessset_to_bytes","transactionwitnessset_to_json","transactionwitnessset_to_js_value","vkeys","Vkeywitnesses","transactionwitnessset_set_vkeys","transactionwitnessset_vkeys","transactionwitnessset_set_native_scripts","transactionwitnessset_native_scripts","bootstraps","transactionwitnessset_set_bootstraps","transactionwitnessset_bootstraps","transactionwitnessset_set_plutus_scripts","transactionwitnessset_plutus_scripts","transactionwitnessset_set_plutus_data","transactionwitnessset_plutus_data","transactionwitnessset_set_redeemers","transactionwitnessset_set_plutus_v2_scripts","transactionwitnessset_redeemers","transactionwitnessset_plutus_v2_scripts","transactionwitnessset_from_bytes","transactionwitnessset_from_json","transactionwitnessset_new","TransactionWitnessSetBuilder","__wbg_transactionwitnesssetbuilder_free","transactionwitnesssetbuilder_add_vkey","transactionwitnesssetbuilder_add_bootstrap","transactionwitnesssetbuilder_add_native_script","transactionwitnesssetbuilder_add_plutus_script","transactionwitnesssetbuilder_add_plutus_v2_script","transactionwitnesssetbuilder_add_plutus_datum","transactionwitnesssetbuilder_add_redeemer","required_wits","transactionwitnesssetbuilder_add_required_wits","wit_set","transactionwitnesssetbuilder_add_existing","transactionwitnesssetbuilder_build","transactionwitnesssetbuilder_new","__wbg_transactionwitnesssets_free","transactionwitnesssets_to_bytes","transactionwitnesssets_to_json","transactionwitnesssets_to_js_value","transactionwitnesssets_get","transactionwitnesssets_add","transactionwitnesssets_from_bytes","transactionwitnesssets_from_json","__wbg_url_free","url_to_bytes","url_from_bytes","url_new","__wbg_unitinterval_free","unitinterval_to_bytes","unitinterval_to_json","unitinterval_to_js_value","unitinterval_from_bytes","unitinterval_from_json","numerator","denominator","unitinterval_new","float_number","unitinterval_from_float","__wbg_update_free","update_to_bytes","update_to_json","update_to_js_value","update_proposed_protocol_parameter_updates","update_epoch","update_from_bytes","update_from_json","proposed_protocol_parameter_updates","update_new","__wbg_vrfcert_free","vrfcert_to_bytes","vrfcert_to_json","vrfcert_to_js_value","vrfcert_from_bytes","vrfcert_from_json","proof","vrfcert_new","__wbg_vrfkeyhash_free","vrfkeyhash_from_bytes","vrfkeyhash_from_bech32","vrfkeyhash_from_hex","__wbg_vrfvkey_free","vrfvkey_to_bytes","vrfvkey_hash","vrfvkey_from_bytes","__wbg_value_free","value_to_bytes","value_to_json","value_to_js_value","value_is_zero","value_coin","value_set_coin","value_multiasset","value_set_multiasset","rhs","value_checked_add","value_checked_sub","value_clamped_sub","value_compare","value_from_bytes","value_from_json","value_new","value_new_from_assets","value_zero","__wbg_vkey_free","vkey_to_bytes","vkey_public_key","vkey_from_bytes","pk","vkey_new","Vkeys","__wbg_vkeys_free","vkeys_get","vkeys_add","__wbg_vkeywitness_free","vkeywitness_to_bytes","vkeywitness_to_json","vkeywitness_to_js_value","vkeywitness_signature","vkeywitness_from_bytes","vkeywitness_from_json","vkeywitness_new","__wbg_vkeywitnesses_free","vkeywitnesses_get","vkeywitnesses_add","__wbg_withdrawals_free","withdrawals_to_bytes","withdrawals_to_json","withdrawals_to_js_value","withdrawals_insert","withdrawals_get","withdrawals_keys","withdrawals_from_bytes","withdrawals_from_json","load","module","imports","Response","WebAssembly","instantiateStreaming","headers","console","warn","arrayBuffer","instantiate","Instance","init","import","wbg","__wbindgen_object_drop_ref","__wbg_transaction_new","__wbindgen_string_new","__wbindgen_json_parse","parse","__wbindgen_json_serialize","__wbindgen_string_get","__wbg_fetch_da4b562f370dc6f1","fetch","__wbg_instanceof_Response_d61ff4c524b8dbc4","__wbg_json_0662bf961a0f5285","arguments","__wbg_headers_0fdd616fbc057820","__wbg_newwithstrandinit_155cb1478824b198","Request","__wbindgen_object_clone_ref","__wbg_set_5d0410fa55f5533e","arg4","__wbindgen_cb_drop","__wbg_randomFillSync_654a7797990fb8db","randomFillSync","__wbg_getRandomValues_fb6b088efb6bead2","getRandomValues","__wbg_process_70251ed1291754d5","process","__wbindgen_is_object","__wbg_versions_b23f2588cdb2ddbb","versions","__wbg_node_61b8c9a82499895d","node","__wbindgen_is_string","__wbg_require_2a93bc09fee45aca","require","__wbg_crypto_2f56257a38275dbd","crypto","__wbg_msCrypto_d07655bf62361f21","msCrypto","__wbg_static_accessor_NODE_MODULE_33b45247c55045b0","__wbg_call_ba36642bd901572b","__wbg_self_bb69a836a72ec6e9","self","__wbg_window_3304fc4b414c9693","globalThis","window","__wbg_globalThis_e0d21cabc6630763","__wbg_global_8463719227271676","global","__wbindgen_is_undefined","__wbg_newnoargs_9fdd8f3961dd1bee","Function","__wbg_call_3fc07b7d5fc9022d","__wbg_new_edbe38a4e21329dd","__wbg_new_c143a4f563f78c4e","state0","Promise","__wbg_resolve_cae3d8f752f5db88","resolve","__wbg_then_c2361a9d5c9a4fcb","then","__wbg_then_6c9a4bf55755f9b8","__wbg_buffer_9e184d6f785de5ed","__wbg_new_e8101319e4cf95fc","__wbg_set_e8ae7b27314e8b98","__wbg_length_2d56cb37075fcfb1","__wbg_newwithlength_a8d1dbcbe703a5c6","__wbg_subarray_901ede8318da52a6","__wbg_set_73349fc4814e0fc6","Reflect","__wbg_new_3a746f2619705add","__wbg_call_f54d3a6dadb199ca","__wbindgen_jsval_eq","__wbg_self_ac379e780a0d8b94","__wbg_crypto_1e4302b85d4f64a2","__wbg_getRandomValues_1b4ba144162a5c9e","__wbg_require_6461b1e9a0d7c34a","__wbg_randomFillSync_1b52c8482374c55b","__wbg_getRandomValues_1ef11e888e5228e9","__wbindgen_debug_string","__wbindgen_throw","__wbindgen_rethrow","__wbindgen_memory","__wbindgen_closure_wrapper6457","exports","__wbindgen_wasm_module"],"sourceRoot":""}